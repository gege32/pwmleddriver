
PWMlight_mesaure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00001e80  00001f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ce  008000f4  008000f4  00001fa8  2**0
                  ALLOC
  3 .stab         00003990  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a2c  00000000  00000000  00005938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007364  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
       2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
       4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
       6:	f6 c1       	rjmp	.+1004   	; 0x3f4 <__vector_3>
       8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
       a:	31 c0       	rjmp	.+98     	; 0x6e <__bad_interrupt>
       c:	2a c3       	rjmp	.+1620   	; 0x662 <__vector_6>
       e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
      10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
      12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
      14:	2c c0       	rjmp	.+88     	; 0x6e <__bad_interrupt>
      16:	d2 c9       	rjmp	.-3164   	; 0xfffff3bc <__eeprom_end+0xff7ef3bc>
      18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
      1a:	96 c9       	rjmp	.-3284   	; 0xfffff348 <__eeprom_end+0xff7ef348>
      1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
      1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
      20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
      22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
      24:	24 c0       	rjmp	.+72     	; 0x6e <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	30 31       	cpi	r19, 0x10	; 16
      28:	32 33       	cpi	r19, 0x32	; 50
      2a:	34 35       	cpi	r19, 0x54	; 84
      2c:	36 37       	cpi	r19, 0x76	; 118
      2e:	38 39       	cpi	r19, 0x98	; 152
      30:	41 42       	sbci	r20, 0x21	; 33
      32:	43 44       	sbci	r20, 0x43	; 67
      34:	45 46       	sbci	r20, 0x65	; 101
	...

00000038 <__ctors_end>:
      38:	11 24       	eor	r1, r1
      3a:	1f be       	out	0x3f, r1	; 63
      3c:	cf e5       	ldi	r28, 0x5F	; 95
      3e:	d4 e0       	ldi	r29, 0x04	; 4
      40:	de bf       	out	0x3e, r29	; 62
      42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
      44:	10 e0       	ldi	r17, 0x00	; 0
      46:	a0 e6       	ldi	r26, 0x60	; 96
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	e0 e8       	ldi	r30, 0x80	; 128
      4c:	fe e1       	ldi	r31, 0x1E	; 30
      4e:	02 c0       	rjmp	.+4      	; 0x54 <__do_copy_data+0x10>
      50:	05 90       	lpm	r0, Z+
      52:	0d 92       	st	X+, r0
      54:	a4 3f       	cpi	r26, 0xF4	; 244
      56:	b1 07       	cpc	r27, r17
      58:	d9 f7       	brne	.-10     	; 0x50 <__do_copy_data+0xc>

0000005a <__do_clear_bss>:
      5a:	21 e0       	ldi	r18, 0x01	; 1
      5c:	a4 ef       	ldi	r26, 0xF4	; 244
      5e:	b0 e0       	ldi	r27, 0x00	; 0
      60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
      62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
      64:	a2 3c       	cpi	r26, 0xC2	; 194
      66:	b2 07       	cpc	r27, r18
      68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
      6a:	4f d4       	rcall	.+2206   	; 0x90a <main>
      6c:	07 cf       	rjmp	.-498    	; 0xfffffe7c <__eeprom_end+0xff7efe7c>

0000006e <__bad_interrupt>:
      6e:	c8 cf       	rjmp	.-112    	; 0x0 <__vectors>

00000070 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      70:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      72:	8f b7       	in	r24, 0x3f	; 63
      74:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      76:	71 83       	std	Z+1, r23	; 0x01
      78:	60 83       	st	Z, r22
	buffer->size = size;
      7a:	53 83       	std	Z+3, r21	; 0x03
      7c:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      7e:	17 82       	std	Z+7, r1	; 0x07
      80:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      82:	15 82       	std	Z+5, r1	; 0x05
      84:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
      86:	8f bf       	out	0x3f, r24	; 63
      88:	08 95       	ret

0000008a <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
      8a:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
      8c:	9f b7       	in	r25, 0x3f	; 63
      8e:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
      90:	24 81       	ldd	r18, Z+4	; 0x04
      92:	35 81       	ldd	r19, Z+5	; 0x05
      94:	21 15       	cp	r18, r1
      96:	31 05       	cpc	r19, r1
      98:	d9 f0       	breq	.+54     	; 0xd0 <bufferGetFromFront+0x46>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
      9a:	46 81       	ldd	r20, Z+6	; 0x06
      9c:	57 81       	ldd	r21, Z+7	; 0x07
      9e:	a0 81       	ld	r26, Z
      a0:	b1 81       	ldd	r27, Z+1	; 0x01
      a2:	a4 0f       	add	r26, r20
      a4:	b5 1f       	adc	r27, r21
      a6:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
      a8:	4f 5f       	subi	r20, 0xFF	; 255
      aa:	5f 4f       	sbci	r21, 0xFF	; 255
      ac:	57 83       	std	Z+7, r21	; 0x07
      ae:	46 83       	std	Z+6, r20	; 0x06
		if(buffer->dataindex >= buffer->size)
      b0:	62 81       	ldd	r22, Z+2	; 0x02
      b2:	73 81       	ldd	r23, Z+3	; 0x03
      b4:	46 17       	cp	r20, r22
      b6:	57 07       	cpc	r21, r23
      b8:	30 f4       	brcc	.+12     	; 0xc6 <bufferGetFromFront+0x3c>
		{
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
      ba:	21 50       	subi	r18, 0x01	; 1
      bc:	31 09       	sbc	r19, r1
      be:	35 83       	std	Z+5, r19	; 0x05
      c0:	24 83       	std	Z+4, r18	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
      c2:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
      c4:	08 95       	ret
		data = buffer->dataptr[buffer->dataindex];
		// move index down and decrement length
		buffer->dataindex++;
		if(buffer->dataindex >= buffer->size)
		{
			buffer->dataindex -= buffer->size;
      c6:	46 1b       	sub	r20, r22
      c8:	57 0b       	sbc	r21, r23
      ca:	57 83       	std	Z+7, r21	; 0x07
      cc:	46 83       	std	Z+6, r20	; 0x06
      ce:	f5 cf       	rjmp	.-22     	; 0xba <bufferGetFromFront+0x30>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
      d0:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
      d2:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
      d4:	08 95       	ret

000000d6 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
      d6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      d8:	af b7       	in	r26, 0x3f	; 63
      da:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
      dc:	24 81       	ldd	r18, Z+4	; 0x04
      de:	35 81       	ldd	r19, Z+5	; 0x05
      e0:	62 17       	cp	r22, r18
      e2:	73 07       	cpc	r23, r19
      e4:	a8 f4       	brcc	.+42     	; 0x110 <bufferDumpFromFront+0x3a>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
      e6:	86 81       	ldd	r24, Z+6	; 0x06
      e8:	97 81       	ldd	r25, Z+7	; 0x07
      ea:	86 0f       	add	r24, r22
      ec:	97 1f       	adc	r25, r23
      ee:	97 83       	std	Z+7, r25	; 0x07
      f0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
      f2:	42 81       	ldd	r20, Z+2	; 0x02
      f4:	53 81       	ldd	r21, Z+3	; 0x03
      f6:	84 17       	cp	r24, r20
      f8:	95 07       	cpc	r25, r21
      fa:	20 f0       	brcs	.+8      	; 0x104 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
      fc:	84 1b       	sub	r24, r20
      fe:	95 0b       	sbc	r25, r21
     100:	97 83       	std	Z+7, r25	; 0x07
     102:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     104:	26 1b       	sub	r18, r22
     106:	37 0b       	sbc	r19, r23
     108:	35 83       	std	Z+5, r19	; 0x05
     10a:	24 83       	std	Z+4, r18	; 0x04
	{
		// flush the whole buffer
		buffer->datalength = 0;
	}
	// end critical section
	CRITICAL_SECTION_END;
     10c:	af bf       	out	0x3f, r26	; 63
     10e:	08 95       	ret
		buffer->datalength -= numbytes;
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     110:	15 82       	std	Z+5, r1	; 0x05
     112:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     114:	af bf       	out	0x3f, r26	; 63
     116:	08 95       	ret

00000118 <bufferGetAtIndex>:
}

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     118:	fc 01       	movw	r30, r24
     11a:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
     11c:	4f b7       	in	r20, 0x3f	; 63
     11e:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
     120:	26 81       	ldd	r18, Z+6	; 0x06
     122:	37 81       	ldd	r19, Z+7	; 0x07
     124:	82 0f       	add	r24, r18
     126:	93 1f       	adc	r25, r19
     128:	62 81       	ldd	r22, Z+2	; 0x02
     12a:	73 81       	ldd	r23, Z+3	; 0x03
     12c:	85 d9       	rcall	.-3318   	; 0xfffff438 <__eeprom_end+0xff7ef438>
     12e:	01 90       	ld	r0, Z+
     130:	f0 81       	ld	r31, Z
     132:	e0 2d       	mov	r30, r0
     134:	e8 0f       	add	r30, r24
     136:	f9 1f       	adc	r31, r25
     138:	80 81       	ld	r24, Z
	// end critical section
	CRITICAL_SECTION_END;
     13a:	4f bf       	out	0x3f, r20	; 63
	return data;
}
     13c:	08 95       	ret

0000013e <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
     146:	cf b7       	in	r28, 0x3f	; 63
     148:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     14a:	44 81       	ldd	r20, Z+4	; 0x04
     14c:	55 81       	ldd	r21, Z+5	; 0x05
     14e:	62 81       	ldd	r22, Z+2	; 0x02
     150:	73 81       	ldd	r23, Z+3	; 0x03
     152:	46 17       	cp	r20, r22
     154:	57 07       	cpc	r21, r23
     156:	a0 f4       	brcc	.+40     	; 0x180 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     158:	86 81       	ldd	r24, Z+6	; 0x06
     15a:	97 81       	ldd	r25, Z+7	; 0x07
     15c:	84 0f       	add	r24, r20
     15e:	95 1f       	adc	r25, r21
     160:	6b d9       	rcall	.-3370   	; 0xfffff438 <__eeprom_end+0xff7ef438>
     162:	a0 81       	ld	r26, Z
     164:	b1 81       	ldd	r27, Z+1	; 0x01
     166:	a8 0f       	add	r26, r24
     168:	b9 1f       	adc	r27, r25
     16a:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
     16c:	84 81       	ldd	r24, Z+4	; 0x04
     16e:	95 81       	ldd	r25, Z+5	; 0x05
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	95 83       	std	Z+5, r25	; 0x05
     174:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     176:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
     178:	8f ef       	ldi	r24, 0xFF	; 255
	}
	// end critical section
	CRITICAL_SECTION_END;
	// return failure
	return 0;
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret
		CRITICAL_SECTION_END;
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
     180:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     18a:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     18c:	4f b7       	in	r20, 0x3f	; 63
     18e:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     190:	82 81       	ldd	r24, Z+2	; 0x02
     192:	93 81       	ldd	r25, Z+3	; 0x03
     194:	24 81       	ldd	r18, Z+4	; 0x04
     196:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     198:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     19a:	82 1b       	sub	r24, r18
     19c:	93 0b       	sbc	r25, r19
     19e:	08 95       	ret

000001a0 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
	// begin critical section
	CRITICAL_SECTION_START;
     1a0:	2f b7       	in	r18, 0x3f	; 63
     1a2:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
     1a4:	fc 01       	movw	r30, r24
     1a6:	15 82       	std	Z+5, r1	; 0x05
     1a8:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     1aa:	2f bf       	out	0x3f, r18	; 63
     1ac:	08 95       	ret

000001ae <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
     1ae:	66 23       	and	r22, r22
     1b0:	69 f1       	breq	.+90     	; 0x20c <lcd_write+0x5e>
       lcd_rs_high();
     1b2:	c1 9a       	sbi	0x18, 1	; 24
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();    /* RW=0  write mode      */
     1b4:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     1b6:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     1b8:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     1ba:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     1bc:	be 9a       	sbi	0x17, 6	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1be:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1c0:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1c2:	c4 98       	cbi	0x18, 4	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1c4:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1c6:	87 fd       	sbrc	r24, 7
     1c8:	23 c0       	rjmp	.+70     	; 0x210 <lcd_write+0x62>
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ca:	86 fd       	sbrc	r24, 6
     1cc:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1ce:	85 fd       	sbrc	r24, 5
     1d0:	c4 9a       	sbi	0x18, 4	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     1d2:	84 fd       	sbrc	r24, 4
     1d4:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1d6:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	9a 95       	dec	r25
     1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_write+0x2c>
    lcd_e_delay();
    lcd_e_low();
     1de:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1e0:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1e2:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1e4:	c4 98       	cbi	0x18, 4	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1e6:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1e8:	83 fd       	sbrc	r24, 3
     1ea:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ec:	82 fd       	sbrc	r24, 2
     1ee:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1f0:	81 fd       	sbrc	r24, 1
     1f2:	c4 9a       	sbi	0x18, 4	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1f4:	80 fd       	sbrc	r24, 0
     1f6:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1f8:	c2 9a       	sbi	0x18, 2	; 24
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	8a 95       	dec	r24
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_write+0x4e>
    lcd_e_delay();
    lcd_e_low();
     200:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     202:	c3 9a       	sbi	0x18, 3	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     204:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     206:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     208:	c6 9a       	sbi	0x18, 6	; 24
     20a:	08 95       	ret


    if (rs) {        /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     20c:	c1 98       	cbi	0x18, 1	; 24
     20e:	d2 cf       	rjmp	.-92     	; 0x1b4 <lcd_write+0x6>
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     210:	c6 9a       	sbi	0x18, 6	; 24
     212:	db cf       	rjmp	.-74     	; 0x1ca <lcd_write+0x1c>

00000214 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     214:	c1 98       	cbi	0x18, 1	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
     216:	c7 9a       	sbi	0x18, 7	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     218:	bb 98       	cbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     21a:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     21c:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     21e:	be 98       	cbi	0x17, 6	; 23
                
        /* read high nibble first */
        lcd_e_high();
     220:	c2 9a       	sbi	0x18, 2	; 24
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <lcd_read.constprop.0+0x10>
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     228:	b3 99       	sbic	0x16, 3	; 22
     22a:	19 c0       	rjmp	.+50     	; 0x25e <lcd_read.constprop.0+0x4a>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     22e:	b4 99       	sbic	0x16, 4	; 22
     230:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     232:	b5 99       	sbic	0x16, 5	; 22
     234:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     236:	b6 99       	sbic	0x16, 6	; 22
     238:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     23a:	c2 98       	cbi	0x18, 2	; 24
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	9a 95       	dec	r25
     240:	f1 f7       	brne	.-4      	; 0x23e <lcd_read.constprop.0+0x2a>

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
     242:	c2 9a       	sbi	0x18, 2	; 24
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	9a 95       	dec	r25
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_read.constprop.0+0x32>
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     24a:	b3 99       	sbic	0x16, 3	; 22
     24c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     24e:	b4 99       	sbic	0x16, 4	; 22
     250:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     252:	b5 99       	sbic	0x16, 5	; 22
     254:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     256:	b6 99       	sbic	0x16, 6	; 22
     258:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     25a:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     25c:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     25e:	80 e1       	ldi	r24, 0x10	; 16
     260:	e6 cf       	rjmp	.-52     	; 0x22e <lcd_read.constprop.0+0x1a>

00000262 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     262:	d8 df       	rcall	.-80     	; 0x214 <lcd_read.constprop.0>
     264:	87 fd       	sbrc	r24, 7
     266:	fd cf       	rjmp	.-6      	; 0x262 <lcd_waitbusy>
     268:	8a e0       	ldi	r24, 0x0A	; 10
     26a:	8a 95       	dec	r24
     26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_waitbusy+0x8>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     26e:	d2 cf       	rjmp	.-92     	; 0x214 <lcd_read.constprop.0>

00000270 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     270:	cf 93       	push	r28
     272:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     274:	f6 df       	rcall	.-20     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	8c 2f       	mov	r24, r28
}
     27a:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     27c:	98 cf       	rjmp	.-208    	; 0x1ae <lcd_write>

0000027e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     27e:	cf 93       	push	r28
     280:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     282:	ef df       	rcall	.-34     	; 0x262 <lcd_waitbusy>
    lcd_write(data,1);
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	8c 2f       	mov	r24, r28
}
     288:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
     28a:	91 cf       	rjmp	.-222    	; 0x1ae <lcd_write>

0000028c <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     28c:	cf 93       	push	r28
     28e:	c8 2f       	mov	r28, r24
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     290:	66 23       	and	r22, r22
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_gotoxy+0x14>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     294:	e6 df       	rcall	.-52     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	80 ec       	ldi	r24, 0xC0	; 192
     29a:	8c 0f       	add	r24, r28
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     29c:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     29e:	87 cf       	rjmp	.-242    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2a0:	e0 df       	rcall	.-64     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	8c 0f       	add	r24, r28
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     2a8:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     2aa:	81 cf       	rjmp	.-254    	; 0x1ae <lcd_write>

000002ac <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     2ac:	da df       	rcall	.-76     	; 0x262 <lcd_waitbusy>
}
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	08 95       	ret

000002b2 <lcd_clrscr>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2b2:	d7 df       	rcall	.-82     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	7a cf       	rjmp	.-268    	; 0x1ae <lcd_write>

000002ba <lcd_home>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2ba:	d3 df       	rcall	.-90     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	76 cf       	rjmp	.-276    	; 0x1ae <lcd_write>

000002c2 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     2c2:	cf 93       	push	r28
     2c4:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     2c6:	cd df       	rcall	.-102    	; 0x262 <lcd_waitbusy>
    if (c=='\n')
     2c8:	ca 30       	cpi	r28, 0x0A	; 10
     2ca:	21 f0       	breq	.+8      	; 0x2d4 <lcd_putc+0x12>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
     2d0:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2d2:	6d cf       	rjmp	.-294    	; 0x1ae <lcd_write>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2d4:	80 34       	cpi	r24, 0x40	; 64
     2d6:	30 f0       	brcs	.+12     	; 0x2e4 <lcd_putc+0x22>
     2d8:	c0 e8       	ldi	r28, 0x80	; 128
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2da:	c3 df       	rcall	.-122    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8c 2f       	mov	r24, r28
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     2e0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     2e2:	65 cf       	rjmp	.-310    	; 0x1ae <lcd_write>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2e4:	c0 ec       	ldi	r28, 0xC0	; 192
     2e6:	f9 cf       	rjmp	.-14     	; 0x2da <lcd_putc+0x18>

000002e8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
     2ec:	ec 01       	movw	r28, r24
     2ee:	21 96       	adiw	r28, 0x01	; 1
     2f0:	fc 01       	movw	r30, r24
     2f2:	80 81       	ld	r24, Z
     2f4:	88 23       	and	r24, r24
     2f6:	21 f0       	breq	.+8      	; 0x300 <lcd_puts+0x18>
        lcd_putc(c);
     2f8:	e4 df       	rcall	.-56     	; 0x2c2 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     2fa:	89 91       	ld	r24, Y+
     2fc:	81 11       	cpse	r24, r1
     2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     30a:	ec 01       	movw	r28, r24
     30c:	21 96       	adiw	r28, 0x01	; 1
     30e:	fc 01       	movw	r30, r24
     310:	84 91       	lpm	r24, Z
     312:	88 23       	and	r24, r24
     314:	31 f0       	breq	.+12     	; 0x322 <lcd_puts_p+0x1c>
        lcd_putc(c);
     316:	d5 df       	rcall	.-86     	; 0x2c2 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     318:	fe 01       	movw	r30, r28
     31a:	84 91       	lpm	r24, Z
     31c:	21 96       	adiw	r28, 0x01	; 1
     31e:	81 11       	cpse	r24, r1
     320:	fa cf       	rjmp	.-12     	; 0x316 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     328:	cf 93       	push	r28
     32a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     32c:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     32e:	bf 9a       	sbi	0x17, 7	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     330:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     332:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     334:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     336:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     338:	be 9a       	sbi	0x17, 6	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	e0 ea       	ldi	r30, 0xA0	; 160
     33c:	fc e8       	ldi	r31, 0x8C	; 140
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <lcd_init+0x16>
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     342:	c4 9a       	sbi	0x18, 4	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     344:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     346:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	9a 95       	dec	r25
     34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init+0x22>
    lcd_e_delay();
    lcd_e_low();
     34e:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     350:	e0 eb       	ldi	r30, 0xB0	; 176
     352:	f6 e3       	ldi	r31, 0x36	; 54
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0x2c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     358:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	9a 95       	dec	r25
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init+0x34>
    lcd_e_delay();
    lcd_e_low();
     360:	c2 98       	cbi	0x18, 2	; 24
     362:	9a ea       	ldi	r25, 0xAA	; 170
     364:	9a 95       	dec	r25
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd_init+0x3c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     368:	c2 9a       	sbi	0x18, 2	; 24
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9a 95       	dec	r25
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x44>
    lcd_e_delay();
    lcd_e_low();
     370:	c2 98       	cbi	0x18, 2	; 24
     372:	9a ea       	ldi	r25, 0xAA	; 170
     374:	9a 95       	dec	r25
     376:	f1 f7       	brne	.-4      	; 0x374 <lcd_init+0x4c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     378:	c3 98       	cbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     37a:	c2 9a       	sbi	0x18, 2	; 24
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	9a 95       	dec	r25
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x56>
    lcd_e_delay();
    lcd_e_low();
     382:	c2 98       	cbi	0x18, 2	; 24
     384:	9a ea       	ldi	r25, 0xAA	; 170
     386:	9a 95       	dec	r25
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init+0x5e>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     38a:	6b df       	rcall	.-298    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	0e df       	rcall	.-484    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     392:	67 df       	rcall	.-306    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	0a df       	rcall	.-492    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     39a:	63 df       	rcall	.-314    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	06 df       	rcall	.-500    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     3a2:	5f df       	rcall	.-322    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	02 df       	rcall	.-508    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     3aa:	5b df       	rcall	.-330    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	8c 2f       	mov	r24, r28
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */

}/* lcd_init */
     3b0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     3b2:	fd ce       	rjmp	.-518    	; 0x1ae <lcd_write>

000003b4 <filter_adc>:

}

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     3b4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     3b6:	36 99       	sbic	0x06, 6	; 6
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <filter_adc+0x2>
	adc_value = ADCW; //Store ADC value
     3ba:	a4 b1       	in	r26, 0x04	; 4
     3bc:	b5 b1       	in	r27, 0x05	; 5
	unsigned long tmp_value = 0;
	unsigned long sample = 0;

	while (sample < no_of_samples) {
		adc_value = (adc_read());
		tmp_value = (tmp_value + ((unsigned long) (adc_value * adc_value)));
     3be:	9d 01       	movw	r18, r26
     3c0:	71 d8       	rcall	.-3870   	; 0xfffff4a4 <__eeprom_end+0xff7ef4a4>
		sample++;
	}

	adc_value = (tmp_value / no_of_samples);
	tmp_value = (sqrt(adc_value));
     3c2:	a8 d8       	rcall	.-3760   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     3c4:	11 d9       	rcall	.-3550   	; 0xfffff5e8 <__eeprom_end+0xff7ef5e8>
     3c6:	7a d8       	rcall	.-3852   	; 0xfffff4bc <__eeprom_end+0xff7ef4bc>
	return tmp_value;

}
     3c8:	08 95       	ret

000003ca <adc_read>:

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     3ca:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     3cc:	36 99       	sbic	0x06, 6	; 6
     3ce:	fe cf       	rjmp	.-4      	; 0x3cc <adc_read+0x2>
	adc_value = ADCW; //Store ADC value
     3d0:	64 b1       	in	r22, 0x04	; 4
     3d2:	75 b1       	in	r23, 0x05	; 5
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
	return adc_value;
}
     3d8:	08 95       	ret

000003da <LCDWriteStringXY>:

void LCDWriteStringXY(int x, int y, const char *s) {
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	96 2f       	mov	r25, r22
     3e0:	ea 01       	movw	r28, r20
	lcd_gotoxy(y - 1, x - 1);
     3e2:	6f ef       	ldi	r22, 0xFF	; 255
     3e4:	68 0f       	add	r22, r24
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	89 0f       	add	r24, r25
     3ea:	50 df       	rcall	.-352    	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     3ec:	ce 01       	movw	r24, r28
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
     3f2:	7a cf       	rjmp	.-268    	; 0x2e8 <lcd_puts>

000003f4 <__vector_3>:
}

//led setup interrupt 250us
ISR (TIMER2_COMP_vect)  // timer2 interrupt
{
     3f4:	1f 92       	push	r1
     3f6:	0f 92       	push	r0
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	0f 92       	push	r0
     3fc:	11 24       	eor	r1, r1
     3fe:	2f 93       	push	r18
     400:	3f 93       	push	r19
     402:	4f 93       	push	r20
     404:	5f 93       	push	r21
     406:	6f 93       	push	r22
     408:	7f 93       	push	r23
     40a:	8f 93       	push	r24
     40c:	9f 93       	push	r25
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
	TCNT0 += 6;
     412:	82 b7       	in	r24, 0x32	; 50
     414:	8a 5f       	subi	r24, 0xFA	; 250
     416:	82 bf       	out	0x32, r24	; 50
	//toggle led1
	if (led1Up) {
     418:	80 91 6a 00 	lds	r24, 0x006A
     41c:	90 91 6b 00 	lds	r25, 0x006B
     420:	89 2b       	or	r24, r25
     422:	09 f0       	breq	.+2      	; 0x426 <__vector_3+0x32>
     424:	5f c0       	rjmp	.+190    	; 0x4e4 <__stack+0x85>
			led1Up = 0;
		} else {
			led1Count++;
		}
	} else if (!led1Up) {
		if (led1Count == led1Counterdn[preset]) {
     426:	80 91 0c 01 	lds	r24, 0x010C
     42a:	90 91 0d 01 	lds	r25, 0x010D
     42e:	20 91 12 01 	lds	r18, 0x0112
     432:	30 91 13 01 	lds	r19, 0x0113
     436:	ac 01       	movw	r20, r24
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	fa 01       	movw	r30, r20
     43e:	ea 56       	subi	r30, 0x6A	; 106
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	60 81       	ld	r22, Z
     444:	71 81       	ldd	r23, Z+1	; 0x01
     446:	62 17       	cp	r22, r18
     448:	73 07       	cpc	r23, r19
     44a:	09 f4       	brne	.+2      	; 0x44e <__vector_3+0x5a>
     44c:	e0 c0       	rjmp	.+448    	; 0x60e <__stack+0x1af>
			if (led1Counterup[preset] != 0)
				sbi(PORTD, PD2);
			led1Count = 0;
			led1Up = 1;
		} else {
			led1Count++;
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	30 93 13 01 	sts	0x0113, r19
     456:	20 93 12 01 	sts	0x0112, r18
		}
	}

	//toggle led2
	if (led2Up) {
     45a:	20 91 68 00 	lds	r18, 0x0068
     45e:	30 91 69 00 	lds	r19, 0x0069
     462:	23 2b       	or	r18, r19
     464:	09 f4       	brne	.+2      	; 0x468 <__stack+0x9>
     466:	69 c0       	rjmp	.+210    	; 0x53a <__stack+0xdb>
		if (led2Count == led2Counterup[preset]) {
     468:	20 91 0e 01 	lds	r18, 0x010E
     46c:	30 91 0f 01 	lds	r19, 0x010F
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	fc 01       	movw	r30, r24
     476:	e2 54       	subi	r30, 0x42	; 66
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	40 81       	ld	r20, Z
     47c:	51 81       	ldd	r21, Z+1	; 0x01
     47e:	42 17       	cp	r20, r18
     480:	53 07       	cpc	r21, r19
     482:	09 f4       	brne	.+2      	; 0x486 <__stack+0x27>
     484:	ad c0       	rjmp	.+346    	; 0x5e0 <__stack+0x181>
			if (led2Counterup[preset] != 0)
				sbi(PORTD, PD3);
			led2Count = 0;
			led2Up = 1;
		} else {
			led2Count++;
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	30 93 0f 01 	sts	0x010F, r19
     48e:	20 93 0e 01 	sts	0x010E, r18
		}
	}

	//toggle led3
	if (led3Up) {
     492:	20 91 6c 00 	lds	r18, 0x006C
     496:	30 91 6d 00 	lds	r19, 0x006D
     49a:	23 2b       	or	r18, r19
     49c:	09 f0       	breq	.+2      	; 0x4a0 <__stack+0x41>
     49e:	75 c0       	rjmp	.+234    	; 0x58a <__stack+0x12b>
			led3Up = 0;
		} else {
			led3Count++;
		}
	} else if (!led3Up) {
		if (led3Count == led3Counterdn[preset]) {
     4a0:	20 91 10 01 	lds	r18, 0x0110
     4a4:	30 91 11 01 	lds	r19, 0x0111
     4a8:	fc 01       	movw	r30, r24
     4aa:	e2 59       	subi	r30, 0x92	; 146
     4ac:	ff 4f       	sbci	r31, 0xFF	; 255
     4ae:	40 81       	ld	r20, Z
     4b0:	51 81       	ldd	r21, Z+1	; 0x01
     4b2:	42 17       	cp	r20, r18
     4b4:	53 07       	cpc	r21, r19
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__stack+0x5b>
     4b8:	c1 c0       	rjmp	.+386    	; 0x63c <__stack+0x1dd>
			if (led3Counterup[preset] != 0)
				sbi(PORTD, PD4);
			led3Count = 0;
			led3Up = 1;
		} else {
			led3Count++;
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	30 93 11 01 	sts	0x0111, r19
     4c2:	20 93 10 01 	sts	0x0110, r18
		}
	}
}
     4c6:	ff 91       	pop	r31
     4c8:	ef 91       	pop	r30
     4ca:	9f 91       	pop	r25
     4cc:	8f 91       	pop	r24
     4ce:	7f 91       	pop	r23
     4d0:	6f 91       	pop	r22
     4d2:	5f 91       	pop	r21
     4d4:	4f 91       	pop	r20
     4d6:	3f 91       	pop	r19
     4d8:	2f 91       	pop	r18
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti
ISR (TIMER2_COMP_vect)  // timer2 interrupt
{
	TCNT0 += 6;
	//toggle led1
	if (led1Up) {
		if (led1Count != led1Counterup[preset]) {
     4e4:	80 91 0c 01 	lds	r24, 0x010C
     4e8:	90 91 0d 01 	lds	r25, 0x010D
     4ec:	9c 01       	movw	r18, r24
     4ee:	22 0f       	add	r18, r18
     4f0:	33 1f       	adc	r19, r19
     4f2:	f9 01       	movw	r30, r18
     4f4:	ee 52       	subi	r30, 0x2E	; 46
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	40 81       	ld	r20, Z
     4fa:	51 81       	ldd	r21, Z+1	; 0x01
     4fc:	60 91 12 01 	lds	r22, 0x0112
     500:	70 91 13 01 	lds	r23, 0x0113
     504:	46 17       	cp	r20, r22
     506:	57 07       	cpc	r21, r23
     508:	09 f4       	brne	.+2      	; 0x50c <__stack+0xad>
     50a:	63 c0       	rjmp	.+198    	; 0x5d2 <__stack+0x173>
			if (led1Counterdn[preset] != 0)
     50c:	f9 01       	movw	r30, r18
     50e:	ea 56       	subi	r30, 0x6A	; 106
     510:	ff 4f       	sbci	r31, 0xFF	; 255
     512:	20 81       	ld	r18, Z
     514:	31 81       	ldd	r19, Z+1	; 0x01
     516:	23 2b       	or	r18, r19
     518:	09 f0       	breq	.+2      	; 0x51c <__stack+0xbd>
     51a:	55 c0       	rjmp	.+170    	; 0x5c6 <__stack+0x167>
				cbi(PORTD, PD2);
			led1Count = 0;
     51c:	10 92 13 01 	sts	0x0113, r1
     520:	10 92 12 01 	sts	0x0112, r1
			led1Up = 0;
     524:	10 92 6b 00 	sts	0x006B, r1
     528:	10 92 6a 00 	sts	0x006A, r1
			led1Count++;
		}
	}

	//toggle led2
	if (led2Up) {
     52c:	20 91 68 00 	lds	r18, 0x0068
     530:	30 91 69 00 	lds	r19, 0x0069
     534:	23 2b       	or	r18, r19
     536:	09 f0       	breq	.+2      	; 0x53a <__stack+0xdb>
     538:	97 cf       	rjmp	.-210    	; 0x468 <__stack+0x9>
			led2Up = 0;
		} else {
			led2Count++;
		}
	} else if (!led2Up) {
		if (led2Count == led2Counterdn[preset]) {
     53a:	20 91 0e 01 	lds	r18, 0x010E
     53e:	30 91 0f 01 	lds	r19, 0x010F
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	fc 01       	movw	r30, r24
     548:	ee 57       	subi	r30, 0x7E	; 126
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	40 81       	ld	r20, Z
     54e:	51 81       	ldd	r21, Z+1	; 0x01
     550:	42 17       	cp	r20, r18
     552:	53 07       	cpc	r21, r19
     554:	09 f0       	breq	.+2      	; 0x558 <__stack+0xf9>
     556:	97 cf       	rjmp	.-210    	; 0x486 <__stack+0x27>
			if (led2Counterup[preset] != 0)
     558:	fc 01       	movw	r30, r24
     55a:	e2 54       	subi	r30, 0x42	; 66
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	20 81       	ld	r18, Z
     560:	31 81       	ldd	r19, Z+1	; 0x01
     562:	23 2b       	or	r18, r19
     564:	39 f0       	breq	.+14     	; 0x574 <__stack+0x115>
				sbi(PORTD, PD3);
     566:	93 9a       	sbi	0x12, 3	; 18
     568:	80 91 0c 01 	lds	r24, 0x010C
     56c:	90 91 0d 01 	lds	r25, 0x010D
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
			led2Count = 0;
     574:	10 92 0f 01 	sts	0x010F, r1
     578:	10 92 0e 01 	sts	0x010E, r1
			led2Up = 1;
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	30 93 69 00 	sts	0x0069, r19
     584:	20 93 68 00 	sts	0x0068, r18
     588:	84 cf       	rjmp	.-248    	; 0x492 <__stack+0x33>
		}
	}

	//toggle led3
	if (led3Up) {
		if (led3Count == led3Counterup[preset]) {
     58a:	20 91 10 01 	lds	r18, 0x0110
     58e:	30 91 11 01 	lds	r19, 0x0111
     592:	fc 01       	movw	r30, r24
     594:	e6 55       	subi	r30, 0x56	; 86
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	40 81       	ld	r20, Z
     59a:	51 81       	ldd	r21, Z+1	; 0x01
     59c:	42 17       	cp	r20, r18
     59e:	53 07       	cpc	r21, r19
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <__stack+0x145>
     5a2:	8b cf       	rjmp	.-234    	; 0x4ba <__stack+0x5b>
			if (led3Counterdn[preset] != 0)
     5a4:	fc 01       	movw	r30, r24
     5a6:	e2 59       	subi	r30, 0x92	; 146
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <__stack+0x155>
				cbi(PORTD, PD4);
     5b2:	94 98       	cbi	0x12, 4	; 18
			led3Count = 0;
     5b4:	10 92 11 01 	sts	0x0111, r1
     5b8:	10 92 10 01 	sts	0x0110, r1
			led3Up = 0;
     5bc:	10 92 6d 00 	sts	0x006D, r1
     5c0:	10 92 6c 00 	sts	0x006C, r1
     5c4:	80 cf       	rjmp	.-256    	; 0x4c6 <__stack+0x67>
	TCNT0 += 6;
	//toggle led1
	if (led1Up) {
		if (led1Count != led1Counterup[preset]) {
			if (led1Counterdn[preset] != 0)
				cbi(PORTD, PD2);
     5c6:	92 98       	cbi	0x12, 2	; 18
     5c8:	80 91 0c 01 	lds	r24, 0x010C
     5cc:	90 91 0d 01 	lds	r25, 0x010D
     5d0:	a5 cf       	rjmp	.-182    	; 0x51c <__stack+0xbd>
			led1Count = 0;
			led1Up = 0;
		} else {
			led1Count++;
     5d2:	4f 5f       	subi	r20, 0xFF	; 255
     5d4:	5f 4f       	sbci	r21, 0xFF	; 255
     5d6:	50 93 13 01 	sts	0x0113, r21
     5da:	40 93 12 01 	sts	0x0112, r20
     5de:	a6 cf       	rjmp	.-180    	; 0x52c <__stack+0xcd>
	}

	//toggle led2
	if (led2Up) {
		if (led2Count == led2Counterup[preset]) {
			if (led2Counterdn[preset] != 0)
     5e0:	fc 01       	movw	r30, r24
     5e2:	ee 57       	subi	r30, 0x7E	; 126
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	20 81       	ld	r18, Z
     5e8:	31 81       	ldd	r19, Z+1	; 0x01
     5ea:	23 2b       	or	r18, r19
     5ec:	39 f0       	breq	.+14     	; 0x5fc <__stack+0x19d>
				cbi(PORTD, PD3);
     5ee:	93 98       	cbi	0x12, 3	; 18
     5f0:	80 91 0c 01 	lds	r24, 0x010C
     5f4:	90 91 0d 01 	lds	r25, 0x010D
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
			led2Count = 0;
     5fc:	10 92 0f 01 	sts	0x010F, r1
     600:	10 92 0e 01 	sts	0x010E, r1
			led2Up = 0;
     604:	10 92 69 00 	sts	0x0069, r1
     608:	10 92 68 00 	sts	0x0068, r1
     60c:	42 cf       	rjmp	.-380    	; 0x492 <__stack+0x33>
		} else {
			led1Count++;
		}
	} else if (!led1Up) {
		if (led1Count == led1Counterdn[preset]) {
			if (led1Counterup[preset] != 0)
     60e:	fa 01       	movw	r30, r20
     610:	ee 52       	subi	r30, 0x2E	; 46
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	20 81       	ld	r18, Z
     616:	31 81       	ldd	r19, Z+1	; 0x01
     618:	23 2b       	or	r18, r19
     61a:	29 f0       	breq	.+10     	; 0x626 <__stack+0x1c7>
				sbi(PORTD, PD2);
     61c:	92 9a       	sbi	0x12, 2	; 18
     61e:	80 91 0c 01 	lds	r24, 0x010C
     622:	90 91 0d 01 	lds	r25, 0x010D
			led1Count = 0;
     626:	10 92 13 01 	sts	0x0113, r1
     62a:	10 92 12 01 	sts	0x0112, r1
			led1Up = 1;
     62e:	21 e0       	ldi	r18, 0x01	; 1
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	30 93 6b 00 	sts	0x006B, r19
     636:	20 93 6a 00 	sts	0x006A, r18
     63a:	78 cf       	rjmp	.-272    	; 0x52c <__stack+0xcd>
		} else {
			led3Count++;
		}
	} else if (!led3Up) {
		if (led3Count == led3Counterdn[preset]) {
			if (led3Counterup[preset] != 0)
     63c:	fc 01       	movw	r30, r24
     63e:	e6 55       	subi	r30, 0x56	; 86
     640:	ff 4f       	sbci	r31, 0xFF	; 255
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	89 2b       	or	r24, r25
     648:	09 f0       	breq	.+2      	; 0x64c <__stack+0x1ed>
				sbi(PORTD, PD4);
     64a:	94 9a       	sbi	0x12, 4	; 18
			led3Count = 0;
     64c:	10 92 11 01 	sts	0x0111, r1
     650:	10 92 10 01 	sts	0x0110, r1
			led3Up = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	90 93 6d 00 	sts	0x006D, r25
     65c:	80 93 6c 00 	sts	0x006C, r24
     660:	32 cf       	rjmp	.-412    	; 0x4c6 <__stack+0x67>

00000662 <__vector_6>:
			led3Count++;
		}
	}
}

ISR (TIMER1_COMPA_vect) {
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	2f 93       	push	r18
     66e:	3f 93       	push	r19
     670:	4f 93       	push	r20
     672:	5f 93       	push	r21
     674:	6f 93       	push	r22
     676:	7f 93       	push	r23
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
     67c:	af 93       	push	r26
     67e:	bf 93       	push	r27
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31

	seconds++;
     684:	80 91 fa 00 	lds	r24, 0x00FA
     688:	90 91 fb 00 	lds	r25, 0x00FB
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	90 93 fb 00 	sts	0x00FB, r25
     692:	80 93 fa 00 	sts	0x00FA, r24
	if(seconds == 60){
     696:	cc 97       	sbiw	r24, 0x3c	; 60
     698:	a9 f1       	breq	.+106    	; 0x704 <__vector_6+0xa2>
     69a:	80 91 f8 00 	lds	r24, 0x00F8
     69e:	90 91 f9 00 	lds	r25, 0x00F9
		minutes++;
		seconds=0;
	}
	if(minutes == 60){
     6a2:	cc 97       	sbiw	r24, 0x3c	; 60
     6a4:	69 f4       	brne	.+26     	; 0x6c0 <__vector_6+0x5e>
		hours++;
     6a6:	80 91 f6 00 	lds	r24, 0x00F6
     6aa:	90 91 f7 00 	lds	r25, 0x00F7
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	90 93 f7 00 	sts	0x00F7, r25
     6b4:	80 93 f6 00 	sts	0x00F6, r24
		minutes=0;
     6b8:	10 92 f9 00 	sts	0x00F9, r1
     6bc:	10 92 f8 00 	sts	0x00F8, r1
	}

	avg = 0;
     6c0:	10 92 06 01 	sts	0x0106, r1
     6c4:	10 92 07 01 	sts	0x0107, r1
     6c8:	10 92 08 01 	sts	0x0108, r1
     6cc:	10 92 09 01 	sts	0x0109, r1
	avg = filter_adc();
     6d0:	71 de       	rcall	.-798    	; 0x3b4 <filter_adc>
     6d2:	60 93 06 01 	sts	0x0106, r22
     6d6:	70 93 07 01 	sts	0x0107, r23
     6da:	80 93 08 01 	sts	0x0108, r24
     6de:	90 93 09 01 	sts	0x0109, r25

}
     6e2:	ff 91       	pop	r31
     6e4:	ef 91       	pop	r30
     6e6:	bf 91       	pop	r27
     6e8:	af 91       	pop	r26
     6ea:	9f 91       	pop	r25
     6ec:	8f 91       	pop	r24
     6ee:	7f 91       	pop	r23
     6f0:	6f 91       	pop	r22
     6f2:	5f 91       	pop	r21
     6f4:	4f 91       	pop	r20
     6f6:	3f 91       	pop	r19
     6f8:	2f 91       	pop	r18
     6fa:	0f 90       	pop	r0
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	0f 90       	pop	r0
     700:	1f 90       	pop	r1
     702:	18 95       	reti

ISR (TIMER1_COMPA_vect) {

	seconds++;
	if(seconds == 60){
		minutes++;
     704:	80 91 f8 00 	lds	r24, 0x00F8
     708:	90 91 f9 00 	lds	r25, 0x00F9
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	90 93 f9 00 	sts	0x00F9, r25
     712:	80 93 f8 00 	sts	0x00F8, r24
		seconds=0;
     716:	10 92 fb 00 	sts	0x00FB, r1
     71a:	10 92 fa 00 	sts	0x00FA, r1
     71e:	c1 cf       	rjmp	.-126    	; 0x6a2 <__vector_6+0x40>

00000720 <resetcounters>:
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     720:	10 92 13 01 	sts	0x0113, r1
     724:	10 92 12 01 	sts	0x0112, r1
	led2Count = 0;
     728:	10 92 0f 01 	sts	0x010F, r1
     72c:	10 92 0e 01 	sts	0x010E, r1
	led3Count = 0;
     730:	10 92 11 01 	sts	0x0111, r1
     734:	10 92 10 01 	sts	0x0110, r1
	led1Up = 0;
     738:	10 92 6b 00 	sts	0x006B, r1
     73c:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     740:	10 92 69 00 	sts	0x0069, r1
     744:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     748:	10 92 6d 00 	sts	0x006D, r1
     74c:	10 92 6c 00 	sts	0x006C, r1
     750:	08 95       	ret

00000752 <updateLCD>:
}

void updateLCD(){
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
	snprintf(disp_avg, 4, "%lu", avg);
     75c:	80 91 09 01 	lds	r24, 0x0109
     760:	8f 93       	push	r24
     762:	80 91 08 01 	lds	r24, 0x0108
     766:	8f 93       	push	r24
     768:	80 91 07 01 	lds	r24, 0x0107
     76c:	8f 93       	push	r24
     76e:	80 91 06 01 	lds	r24, 0x0106
     772:	8f 93       	push	r24
     774:	86 ee       	ldi	r24, 0xE6	; 230
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	1f 92       	push	r1
     77e:	84 e0       	ldi	r24, 0x04	; 4
     780:	8f 93       	push	r24
     782:	80 91 a4 01 	lds	r24, 0x01A4
     786:	8f 93       	push	r24
     788:	80 91 a3 01 	lds	r24, 0x01A3
     78c:	8f 93       	push	r24
     78e:	a9 d8       	rcall	.-3758   	; 0xfffff8e2 <__eeprom_end+0xff7ef8e2>

	snprintf(disp_seconds, 3, "%d", seconds);
     790:	80 91 fb 00 	lds	r24, 0x00FB
     794:	8f 93       	push	r24
     796:	80 91 fa 00 	lds	r24, 0x00FA
     79a:	8f 93       	push	r24
     79c:	ca ee       	ldi	r28, 0xEA	; 234
     79e:	d0 e0       	ldi	r29, 0x00	; 0
     7a0:	df 93       	push	r29
     7a2:	cf 93       	push	r28
     7a4:	1f 92       	push	r1
     7a6:	13 e0       	ldi	r17, 0x03	; 3
     7a8:	1f 93       	push	r17
     7aa:	80 91 a2 01 	lds	r24, 0x01A2
     7ae:	8f 93       	push	r24
     7b0:	80 91 a1 01 	lds	r24, 0x01A1
     7b4:	8f 93       	push	r24
     7b6:	95 d8       	rcall	.-3798   	; 0xfffff8e2 <__eeprom_end+0xff7ef8e2>
	snprintf(disp_minutes, 3, "%d", minutes);
     7b8:	80 91 f9 00 	lds	r24, 0x00F9
     7bc:	8f 93       	push	r24
     7be:	80 91 f8 00 	lds	r24, 0x00F8
     7c2:	8f 93       	push	r24
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	1f 92       	push	r1
     7ca:	1f 93       	push	r17
     7cc:	80 91 a8 01 	lds	r24, 0x01A8
     7d0:	8f 93       	push	r24
     7d2:	80 91 a7 01 	lds	r24, 0x01A7
     7d6:	8f 93       	push	r24
     7d8:	84 d8       	rcall	.-3832   	; 0xfffff8e2 <__eeprom_end+0xff7ef8e2>
	snprintf(disp_hours, 3, "%d", hours);
     7da:	80 91 f7 00 	lds	r24, 0x00F7
     7de:	8f 93       	push	r24
     7e0:	80 91 f6 00 	lds	r24, 0x00F6
     7e4:	8f 93       	push	r24
     7e6:	df 93       	push	r29
     7e8:	cf 93       	push	r28
     7ea:	1f 92       	push	r1
     7ec:	1f 93       	push	r17
     7ee:	80 91 9f 01 	lds	r24, 0x019F
     7f2:	8f 93       	push	r24
     7f4:	80 91 9e 01 	lds	r24, 0x019E
     7f8:	8f 93       	push	r24
     7fa:	73 d8       	rcall	.-3866   	; 0xfffff8e2 <__eeprom_end+0xff7ef8e2>
	lcd_clrscr();
     7fc:	8d b7       	in	r24, 0x3d	; 61
     7fe:	9e b7       	in	r25, 0x3e	; 62
     800:	82 96       	adiw	r24, 0x22	; 34
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	9e bf       	out	0x3e, r25	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	8d bf       	out	0x3d, r24	; 61
     80c:	52 dd       	rcall	.-1372   	; 0x2b2 <lcd_clrscr>
	LCDWriteStringXY(1, 1, disp_hours);
     80e:	00 91 9e 01 	lds	r16, 0x019E
     812:	10 91 9f 01 	lds	r17, 0x019F
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	38 dd       	rcall	.-1424   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     81c:	c8 01       	movw	r24, r16
     81e:	64 dd       	rcall	.-1336   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	33 dd       	rcall	.-1434   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     826:	8d ee       	ldi	r24, 0xED	; 237
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	5e dd       	rcall	.-1348   	; 0x2e8 <lcd_puts>
	snprintf(disp_minutes, 3, "%d", minutes);
	snprintf(disp_hours, 3, "%d", hours);
	lcd_clrscr();
	LCDWriteStringXY(1, 1, disp_hours);
	LCDWriteStringXY(1, 3, ":");
	LCDWriteStringXY(1, 4, disp_minutes);
     82c:	00 91 a7 01 	lds	r16, 0x01A7
     830:	10 91 a8 01 	lds	r17, 0x01A8
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	29 dd       	rcall	.-1454   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     83a:	c8 01       	movw	r24, r16
     83c:	55 dd       	rcall	.-1366   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	85 e0       	ldi	r24, 0x05	; 5
     842:	24 dd       	rcall	.-1464   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     844:	8d ee       	ldi	r24, 0xED	; 237
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	4f dd       	rcall	.-1378   	; 0x2e8 <lcd_puts>
	lcd_clrscr();
	LCDWriteStringXY(1, 1, disp_hours);
	LCDWriteStringXY(1, 3, ":");
	LCDWriteStringXY(1, 4, disp_minutes);
	LCDWriteStringXY(1, 6, ":");
	LCDWriteStringXY(1, 7, disp_seconds);
     84a:	00 91 a1 01 	lds	r16, 0x01A1
     84e:	10 91 a2 01 	lds	r17, 0x01A2
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	86 e0       	ldi	r24, 0x06	; 6
     856:	1a dd       	rcall	.-1484   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     858:	c8 01       	movw	r24, r16
     85a:	46 dd       	rcall	.-1396   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(1, 3, ":");
	LCDWriteStringXY(1, 4, disp_minutes);
	LCDWriteStringXY(1, 6, ":");
	LCDWriteStringXY(1, 7, disp_seconds);

	snprintf(disp_preset, 2, "%d", preset);
     85c:	80 91 0d 01 	lds	r24, 0x010D
     860:	8f 93       	push	r24
     862:	80 91 0c 01 	lds	r24, 0x010C
     866:	8f 93       	push	r24
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	1f 92       	push	r1
     86e:	f2 e0       	ldi	r31, 0x02	; 2
     870:	ff 2e       	mov	r15, r31
     872:	ff 92       	push	r15
     874:	80 91 a6 01 	lds	r24, 0x01A6
     878:	8f 93       	push	r24
     87a:	80 91 a5 01 	lds	r24, 0x01A5
     87e:	8f 93       	push	r24
     880:	30 d8       	rcall	.-4000   	; 0xfffff8e2 <__eeprom_end+0xff7ef8e2>
	LCDWriteStringXY(1, 10, disp_preset);
     882:	00 91 a5 01 	lds	r16, 0x01A5
     886:	10 91 a6 01 	lds	r17, 0x01A6
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	89 e0       	ldi	r24, 0x09	; 9
     88e:	fe dc       	rcall	.-1540   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     890:	c8 01       	movw	r24, r16
     892:	2a dd       	rcall	.-1452   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	f9 dc       	rcall	.-1550   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     89a:	8f ee       	ldi	r24, 0xEF	; 239
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	24 dd       	rcall	.-1464   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(1, 7, disp_seconds);

	snprintf(disp_preset, 2, "%d", preset);
	LCDWriteStringXY(1, 10, disp_preset);
	LCDWriteStringXY(1, 11, "/");
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
     8a0:	80 91 9b 01 	lds	r24, 0x019B
     8a4:	8f 93       	push	r24
     8a6:	80 91 9a 01 	lds	r24, 0x019A
     8aa:	8f 93       	push	r24
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	1f 92       	push	r1
     8b2:	ff 92       	push	r15
     8b4:	80 91 a0 01 	lds	r24, 0x01A0
     8b8:	1f 92       	push	r1
     8ba:	8f 93       	push	r24
     8bc:	12 d8       	rcall	.-4060   	; 0xfffff8e2 <__eeprom_end+0xff7ef8e2>
	LCDWriteStringXY(1, 12, disp_maxpreset);
     8be:	c0 91 a0 01 	lds	r28, 0x01A0
     8c2:	d0 e0       	ldi	r29, 0x00	; 0
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	8b e0       	ldi	r24, 0x0B	; 11
     8c8:	e1 dc       	rcall	.-1598   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     8ca:	ce 01       	movw	r24, r28
     8cc:	0d dd       	rcall	.-1510   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(1, 10, disp_preset);
	LCDWriteStringXY(1, 11, "/");
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
	LCDWriteStringXY(1, 12, disp_maxpreset);

	LCDWriteStringXY(1, 14, progcode);
     8ce:	c0 91 a9 01 	lds	r28, 0x01A9
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	8d e0       	ldi	r24, 0x0D	; 13
     8d8:	d9 dc       	rcall	.-1614   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     8da:	ce 01       	movw	r24, r28
     8dc:	05 dd       	rcall	.-1526   	; 0x2e8 <lcd_puts>
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
	LCDWriteStringXY(1, 12, disp_maxpreset);

	LCDWriteStringXY(1, 14, progcode);

	LCDWriteStringXY(2, 6, disp_avg);
     8de:	c0 91 a3 01 	lds	r28, 0x01A3
     8e2:	d0 91 a4 01 	lds	r29, 0x01A4
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	85 e0       	ldi	r24, 0x05	; 5
     8ea:	d0 dc       	rcall	.-1632   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     8ec:	8d b7       	in	r24, 0x3d	; 61
     8ee:	9e b7       	in	r25, 0x3e	; 62
     8f0:	40 96       	adiw	r24, 0x10	; 16
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	9e bf       	out	0x3e, r25	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	8d bf       	out	0x3d, r24	; 61
     8fc:	ce 01       	movw	r24, r28
	LCDWriteStringXY(1, 12, disp_maxpreset);

	LCDWriteStringXY(1, 14, progcode);

	LCDWriteStringXY(2, 6, disp_avg);
}
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
     908:	ef cc       	rjmp	.-1570   	; 0x2e8 <lcd_puts>

0000090a <main>:
char progcode;

int doLCD = 0;

int main() {
	maxpreset = 9;
     90a:	89 e0       	ldi	r24, 0x09	; 9
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	90 93 9b 01 	sts	0x019B, r25
     912:	80 93 9a 01 	sts	0x019A, r24
	progcode="Z";
     916:	81 ef       	ldi	r24, 0xF1	; 241
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	80 93 a9 01 	sts	0x01A9, r24
	disp_avg = malloc(6 * sizeof(char));
     91e:	86 e0       	ldi	r24, 0x06	; 6
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	b8 d6       	rcall	.+3440   	; 0x1694 <malloc>
     924:	90 93 a4 01 	sts	0x01A4, r25
     928:	80 93 a3 01 	sts	0x01A3, r24
	disp_preset = malloc(2 * sizeof(char));
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	b1 d6       	rcall	.+3426   	; 0x1694 <malloc>
     932:	90 93 a6 01 	sts	0x01A6, r25
     936:	80 93 a5 01 	sts	0x01A5, r24
	disp_maxpreset = malloc(2 * sizeof(char));
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	aa d6       	rcall	.+3412   	; 0x1694 <malloc>
     940:	80 93 a0 01 	sts	0x01A0, r24

	disp_seconds = malloc(3 * sizeof(char));
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a5 d6       	rcall	.+3402   	; 0x1694 <malloc>
     94a:	90 93 a2 01 	sts	0x01A2, r25
     94e:	80 93 a1 01 	sts	0x01A1, r24
	disp_minutes = malloc(3 * sizeof(char));
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	9e d6       	rcall	.+3388   	; 0x1694 <malloc>
     958:	90 93 a8 01 	sts	0x01A8, r25
     95c:	80 93 a7 01 	sts	0x01A7, r24
	disp_hours = malloc(3 * sizeof(char));
     960:	83 e0       	ldi	r24, 0x03	; 3
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	97 d6       	rcall	.+3374   	; 0x1694 <malloc>
     966:	90 93 9f 01 	sts	0x019F, r25
     96a:	80 93 9e 01 	sts	0x019E, r24

	message = malloc(6 * sizeof(char));
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 d6       	rcall	.+3360   	; 0x1694 <malloc>
     974:	90 93 9d 01 	sts	0x019D, r25
     978:	80 93 9c 01 	sts	0x019C, r24
	avg = 0;
     97c:	10 92 06 01 	sts	0x0106, r1
     980:	10 92 07 01 	sts	0x0107, r1
     984:	10 92 08 01 	sts	0x0108, r1
     988:	10 92 09 01 	sts	0x0109, r1
	lastAvg = 0;
     98c:	10 92 02 01 	sts	0x0102, r1
     990:	10 92 03 01 	sts	0x0103, r1
     994:	10 92 04 01 	sts	0x0104, r1
     998:	10 92 05 01 	sts	0x0105, r1
	return 0;
}

static void setup() {

	DDRD = 0xff; //PORTD as OUTPUT
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00; //All pins of PORTD LOW
     9a0:	12 ba       	out	0x12, r1	; 18

	DDRC &= ~(1 << PC0);
     9a2:	a0 98       	cbi	0x14, 0	; 20
	DDRC &= ~(1 << PC1);
     9a4:	a1 98       	cbi	0x14, 1	; 20

	lcd_init(LCD_DISP_ON);
     9a6:	8c e0       	ldi	r24, 0x0C	; 12
     9a8:	bf dc       	rcall	.-1666   	; 0x328 <lcd_init>
	uartInit();
     9aa:	29 d4       	rcall	.+2130   	; 0x11fe <uartInit>
	rprintfInit(uartSendByte);
     9ac:	8d e4       	ldi	r24, 0x4D	; 77
     9ae:	99 e0       	ldi	r25, 0x09	; 9
     9b0:	69 d1       	rcall	.+722    	; 0xc84 <rprintfInit>

	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS0);
     9b2:	85 e8       	ldi	r24, 0x85	; 133
     9b4:	86 b9       	out	0x06, r24	; 6
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
	ADMUX = 0x05; // ADC input channel set to PC5
     9b6:	85 e0       	ldi	r24, 0x05	; 5
     9b8:	87 b9       	out	0x07, r24	; 7

	//LED timer interrupts
	OCR2 = 32;
     9ba:	80 e2       	ldi	r24, 0x20	; 32
     9bc:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1 << WGM21); // Set to CTC Mode
     9be:	85 b5       	in	r24, 0x25	; 37
     9c0:	88 60       	ori	r24, 0x08	; 8
     9c2:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2); //Set interrupt on compare match
     9c4:	89 b7       	in	r24, 0x39	; 57
     9c6:	80 68       	ori	r24, 0x80	; 128
     9c8:	89 bf       	out	0x39, r24	; 57
	TCCR2 |= (1 << CS21); // set prescaler to 64 and starts PWM
     9ca:	85 b5       	in	r24, 0x25	; 37
     9cc:	82 60       	ori	r24, 0x02	; 2
     9ce:	85 bd       	out	0x25, r24	; 37


	//LCD timer interrupt
	OCR1A = 7930;
     9d0:	8a ef       	ldi	r24, 0xFA	; 250
     9d2:	9e e1       	ldi	r25, 0x1E	; 30
     9d4:	9b bd       	out	0x2b, r25	; 43
     9d6:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << WGM12);
     9d8:	8e b5       	in	r24, 0x2e	; 46
     9da:	88 60       	ori	r24, 0x08	; 8
     9dc:	8e bd       	out	0x2e, r24	; 46
	// Mode 4, CTC on OCR1A
	TIMSK |= (1 << OCIE1A);
     9de:	89 b7       	in	r24, 0x39	; 57
     9e0:	80 61       	ori	r24, 0x10	; 16
     9e2:	89 bf       	out	0x39, r24	; 57
	//Set interrupt on compare match
	TCCR1B |= (1 << CS12) | (1 << CS10);
     9e4:	8e b5       	in	r24, 0x2e	; 46
     9e6:	85 60       	ori	r24, 0x05	; 5
     9e8:	8e bd       	out	0x2e, r24	; 46
	// set prescaler to 1024 and start the timer


	sei();
     9ea:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9ec:	80 e2       	ldi	r24, 0x20	; 32
     9ee:	9e e4       	ldi	r25, 0x4E	; 78
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <main+0xe6>
	setup();

	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
			butUpPressed = 1;
     9f4:	cc 24       	eor	r12, r12
     9f6:	c3 94       	inc	r12
     9f8:	d1 2c       	mov	r13, r1
     9fa:	c0 e4       	ldi	r28, 0x40	; 64
     9fc:	dc e9       	ldi	r29, 0x9C	; 156
     9fe:	c7 c0       	rjmp	.+398    	; 0xb8e <main+0x284>
	lastAvg = 0;
	setup();

	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
     a00:	80 91 00 01 	lds	r24, 0x0100
     a04:	90 91 01 01 	lds	r25, 0x0101
     a08:	89 2b       	or	r24, r25
     a0a:	09 f0       	breq	.+2      	; 0xa0e <main+0x104>
     a0c:	c2 c0       	rjmp	.+388    	; 0xb92 <main+0x288>
			butUpPressed = 1;
     a0e:	d0 92 01 01 	sts	0x0101, r13
     a12:	c0 92 00 01 	sts	0x0100, r12
			if (preset < 9) {
     a16:	80 91 0c 01 	lds	r24, 0x010C
     a1a:	90 91 0d 01 	lds	r25, 0x010D
     a1e:	89 30       	cpi	r24, 0x09	; 9
     a20:	91 05       	cpc	r25, r1
     a22:	ec f4       	brge	.+58     	; 0xa5e <main+0x154>
				preset++;
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	90 93 0d 01 	sts	0x010D, r25
     a2a:	80 93 0c 01 	sts	0x010C, r24
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     a2e:	10 92 13 01 	sts	0x0113, r1
     a32:	10 92 12 01 	sts	0x0112, r1
	led2Count = 0;
     a36:	10 92 0f 01 	sts	0x010F, r1
     a3a:	10 92 0e 01 	sts	0x010E, r1
	led3Count = 0;
     a3e:	10 92 11 01 	sts	0x0111, r1
     a42:	10 92 10 01 	sts	0x0110, r1
	led1Up = 0;
     a46:	10 92 6b 00 	sts	0x006B, r1
     a4a:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     a4e:	10 92 69 00 	sts	0x0069, r1
     a52:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     a56:	10 92 6d 00 	sts	0x006D, r1
     a5a:	10 92 6c 00 	sts	0x006C, r1
				resetcounters();
			}
		} else {
			butUpPressed = 0;
		}
		if ((PINC & (1 << PC1)) && butDnPressed == 0) {
     a5e:	99 9b       	sbis	0x13, 1	; 19
     a60:	9e c0       	rjmp	.+316    	; 0xb9e <main+0x294>
     a62:	80 91 fe 00 	lds	r24, 0x00FE
     a66:	90 91 ff 00 	lds	r25, 0x00FF
     a6a:	89 2b       	or	r24, r25
     a6c:	09 f0       	breq	.+2      	; 0xa70 <main+0x166>
     a6e:	97 c0       	rjmp	.+302    	; 0xb9e <main+0x294>
			butDnPressed = 1;
     a70:	d0 92 ff 00 	sts	0x00FF, r13
     a74:	c0 92 fe 00 	sts	0x00FE, r12
			if (preset > 0) {
     a78:	80 91 0c 01 	lds	r24, 0x010C
     a7c:	90 91 0d 01 	lds	r25, 0x010D
     a80:	18 16       	cp	r1, r24
     a82:	19 06       	cpc	r1, r25
     a84:	ec f4       	brge	.+58     	; 0xac0 <main+0x1b6>
				preset--;
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	90 93 0d 01 	sts	0x010D, r25
     a8c:	80 93 0c 01 	sts	0x010C, r24
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     a90:	10 92 13 01 	sts	0x0113, r1
     a94:	10 92 12 01 	sts	0x0112, r1
	led2Count = 0;
     a98:	10 92 0f 01 	sts	0x010F, r1
     a9c:	10 92 0e 01 	sts	0x010E, r1
	led3Count = 0;
     aa0:	10 92 11 01 	sts	0x0111, r1
     aa4:	10 92 10 01 	sts	0x0110, r1
	led1Up = 0;
     aa8:	10 92 6b 00 	sts	0x006B, r1
     aac:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     ab0:	10 92 69 00 	sts	0x0069, r1
     ab4:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     ab8:	10 92 6d 00 	sts	0x006D, r1
     abc:	10 92 6c 00 	sts	0x006C, r1
			}
		} else {
			butDnPressed = 0;
		}

		if (avg != lastAvg) {
     ac0:	40 91 06 01 	lds	r20, 0x0106
     ac4:	50 91 07 01 	lds	r21, 0x0107
     ac8:	60 91 08 01 	lds	r22, 0x0108
     acc:	70 91 09 01 	lds	r23, 0x0109
     ad0:	80 91 02 01 	lds	r24, 0x0102
     ad4:	90 91 03 01 	lds	r25, 0x0103
     ad8:	a0 91 04 01 	lds	r26, 0x0104
     adc:	b0 91 05 01 	lds	r27, 0x0105
     ae0:	48 17       	cp	r20, r24
     ae2:	59 07       	cpc	r21, r25
     ae4:	6a 07       	cpc	r22, r26
     ae6:	7b 07       	cpc	r23, r27
     ae8:	f9 f0       	breq	.+62     	; 0xb28 <main+0x21e>
			rprintfChar('L');
     aea:	8c e4       	ldi	r24, 0x4C	; 76
     aec:	d0 d0       	rcall	.+416    	; 0xc8e <rprintfChar>
			rprintfNum(10, 4, FALSE, '0', avg);
     aee:	e0 90 06 01 	lds	r14, 0x0106
     af2:	f0 90 07 01 	lds	r15, 0x0107
     af6:	00 91 08 01 	lds	r16, 0x0108
     afa:	10 91 09 01 	lds	r17, 0x0109
     afe:	20 e3       	ldi	r18, 0x30	; 48
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	64 e0       	ldi	r22, 0x04	; 4
     b04:	8a e0       	ldi	r24, 0x0A	; 10
     b06:	cf d1       	rcall	.+926    	; 0xea6 <rprintfNum>
			lastAvg = avg;
     b08:	80 91 06 01 	lds	r24, 0x0106
     b0c:	90 91 07 01 	lds	r25, 0x0107
     b10:	a0 91 08 01 	lds	r26, 0x0108
     b14:	b0 91 09 01 	lds	r27, 0x0109
     b18:	80 93 02 01 	sts	0x0102, r24
     b1c:	90 93 03 01 	sts	0x0103, r25
     b20:	a0 93 04 01 	sts	0x0104, r26
     b24:	b0 93 05 01 	sts	0x0105, r27
		}

		if (preset != lastpreset) {
     b28:	20 91 0c 01 	lds	r18, 0x010C
     b2c:	30 91 0d 01 	lds	r19, 0x010D
     b30:	80 91 0a 01 	lds	r24, 0x010A
     b34:	90 91 0b 01 	lds	r25, 0x010B
     b38:	28 17       	cp	r18, r24
     b3a:	39 07       	cpc	r19, r25
     b3c:	b9 f0       	breq	.+46     	; 0xb6c <main+0x262>
			rprintfChar('P');
     b3e:	80 e5       	ldi	r24, 0x50	; 80
     b40:	a6 d0       	rcall	.+332    	; 0xc8e <rprintfChar>
			rprintfNum(10, 4, FALSE, '0', preset);
     b42:	e0 90 0c 01 	lds	r14, 0x010C
     b46:	f0 90 0d 01 	lds	r15, 0x010D
     b4a:	00 27       	eor	r16, r16
     b4c:	f7 fc       	sbrc	r15, 7
     b4e:	00 95       	com	r16
     b50:	10 2f       	mov	r17, r16
     b52:	20 e3       	ldi	r18, 0x30	; 48
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	64 e0       	ldi	r22, 0x04	; 4
     b58:	8a e0       	ldi	r24, 0x0A	; 10
     b5a:	a5 d1       	rcall	.+842    	; 0xea6 <rprintfNum>
			lastpreset = preset;
     b5c:	80 91 0c 01 	lds	r24, 0x010C
     b60:	90 91 0d 01 	lds	r25, 0x010D
     b64:	90 93 0b 01 	sts	0x010B, r25
     b68:	80 93 0a 01 	sts	0x010A, r24
		}

		//read preset from PC
		if (!uartReceiveBufferIsEmpty()) {
     b6c:	d1 d3       	rcall	.+1954   	; 0x1310 <uartReceiveBufferIsEmpty>
     b6e:	88 23       	and	r24, r24
     b70:	d9 f0       	breq	.+54     	; 0xba8 <main+0x29e>
				}
			}

		}

		doLCD++;
     b72:	80 91 f4 00 	lds	r24, 0x00F4
     b76:	90 91 f5 00 	lds	r25, 0x00F5
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	90 93 f5 00 	sts	0x00F5, r25
     b80:	80 93 f4 00 	sts	0x00F4, r24
		if(doLCD == 25){
     b84:	49 97       	sbiw	r24, 0x19	; 25
     b86:	09 f1       	breq	.+66     	; 0xbca <main+0x2c0>
     b88:	ce 01       	movw	r24, r28
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <main+0x280>
	lastAvg = 0;
	setup();

	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
     b8e:	98 99       	sbic	0x13, 0	; 19
     b90:	37 cf       	rjmp	.-402    	; 0xa00 <main+0xf6>
			if (preset < 9) {
				preset++;
				resetcounters();
			}
		} else {
			butUpPressed = 0;
     b92:	10 92 01 01 	sts	0x0101, r1
     b96:	10 92 00 01 	sts	0x0100, r1
		}
		if ((PINC & (1 << PC1)) && butDnPressed == 0) {
     b9a:	99 99       	sbic	0x13, 1	; 19
     b9c:	62 cf       	rjmp	.-316    	; 0xa62 <main+0x158>
			if (preset > 0) {
				preset--;
				resetcounters();
			}
		} else {
			butDnPressed = 0;
     b9e:	10 92 ff 00 	sts	0x00FF, r1
     ba2:	10 92 fe 00 	sts	0x00FE, r1
     ba6:	8c cf       	rjmp	.-232    	; 0xac0 <main+0x1b6>
			lastpreset = preset;
		}

		//read preset from PC
		if (!uartReceiveBufferIsEmpty()) {
			pc_read = uartGetByte();
     ba8:	9b d3       	rcall	.+1846   	; 0x12e0 <uartGetByte>
     baa:	90 93 fd 00 	sts	0x00FD, r25
     bae:	80 93 fc 00 	sts	0x00FC, r24
			if (pc_read != -1){
     bb2:	8f 3f       	cpi	r24, 0xFF	; 255
     bb4:	2f ef       	ldi	r18, 0xFF	; 255
     bb6:	92 07       	cpc	r25, r18
     bb8:	e1 f2       	breq	.-72     	; 0xb72 <main+0x268>
				if(pc_read >= 0 && pc_read < 10){
     bba:	8a 30       	cpi	r24, 0x0A	; 10
     bbc:	91 05       	cpc	r25, r1
     bbe:	58 f4       	brcc	.+22     	; 0xbd6 <main+0x2cc>
					preset = pc_read;
     bc0:	90 93 0d 01 	sts	0x010D, r25
     bc4:	80 93 0c 01 	sts	0x010C, r24
     bc8:	d4 cf       	rjmp	.-88     	; 0xb72 <main+0x268>

		}

		doLCD++;
		if(doLCD == 25){
			updateLCD();
     bca:	c3 dd       	rcall	.-1146   	; 0x752 <updateLCD>
			doLCD = 0;
     bcc:	10 92 f5 00 	sts	0x00F5, r1
     bd0:	10 92 f4 00 	sts	0x00F4, r1
     bd4:	d9 cf       	rjmp	.-78     	; 0xb88 <main+0x27e>
		if (!uartReceiveBufferIsEmpty()) {
			pc_read = uartGetByte();
			if (pc_read != -1){
				if(pc_read >= 0 && pc_read < 10){
					preset = pc_read;
				}else if(pc_read == '#'){
     bd6:	83 32       	cpi	r24, 0x23	; 35
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <main+0x2d4>
     bdc:	4d c0       	rjmp	.+154    	; 0xc78 <main+0x36e>
					maxpreset = uartGetByte();
				}else if(pc_read == '$'){
     bde:	84 97       	sbiw	r24, 0x24	; 36
     be0:	41 f6       	brne	.-112    	; 0xb72 <main+0x268>
					presettomodify = uartGetByte();
     be2:	7e d3       	rcall	.+1788   	; 0x12e0 <uartGetByte>
     be4:	8c 01       	movw	r16, r24
     be6:	90 93 67 00 	sts	0x0067, r25
     bea:	80 93 66 00 	sts	0x0066, r24
					led1Counterup[presettomodify] = uartGetByte();
     bee:	78 d3       	rcall	.+1776   	; 0x12e0 <uartGetByte>
     bf0:	f8 01       	movw	r30, r16
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	ee 52       	subi	r30, 0x2E	; 46
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	91 83       	std	Z+1, r25	; 0x01
     bfc:	80 83       	st	Z, r24
					led2Counterup[presettomodify] = uartGetByte();
     bfe:	00 91 66 00 	lds	r16, 0x0066
     c02:	10 91 67 00 	lds	r17, 0x0067
     c06:	6c d3       	rcall	.+1752   	; 0x12e0 <uartGetByte>
     c08:	f8 01       	movw	r30, r16
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e2 54       	subi	r30, 0x42	; 66
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	91 83       	std	Z+1, r25	; 0x01
     c14:	80 83       	st	Z, r24
					led3Counterup[presettomodify] = uartGetByte();
     c16:	00 91 66 00 	lds	r16, 0x0066
     c1a:	10 91 67 00 	lds	r17, 0x0067
     c1e:	60 d3       	rcall	.+1728   	; 0x12e0 <uartGetByte>
     c20:	f8 01       	movw	r30, r16
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	e6 55       	subi	r30, 0x56	; 86
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24

					led1Counterdn[presettomodify] = uartGetByte();
     c2e:	00 91 66 00 	lds	r16, 0x0066
     c32:	10 91 67 00 	lds	r17, 0x0067
     c36:	54 d3       	rcall	.+1704   	; 0x12e0 <uartGetByte>
     c38:	f8 01       	movw	r30, r16
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	ea 56       	subi	r30, 0x6A	; 106
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	91 83       	std	Z+1, r25	; 0x01
     c44:	80 83       	st	Z, r24
					led2Counterdn[presettomodify] = uartGetByte();
     c46:	00 91 66 00 	lds	r16, 0x0066
     c4a:	10 91 67 00 	lds	r17, 0x0067
     c4e:	48 d3       	rcall	.+1680   	; 0x12e0 <uartGetByte>
     c50:	f8 01       	movw	r30, r16
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	ee 57       	subi	r30, 0x7E	; 126
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	80 83       	st	Z, r24
					led3Counterdn[presettomodify] = uartGetByte();
     c5e:	00 91 66 00 	lds	r16, 0x0066
     c62:	10 91 67 00 	lds	r17, 0x0067
     c66:	3c d3       	rcall	.+1656   	; 0x12e0 <uartGetByte>
     c68:	f8 01       	movw	r30, r16
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	e2 59       	subi	r30, 0x92	; 146
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	91 83       	std	Z+1, r25	; 0x01
     c74:	80 83       	st	Z, r24
     c76:	7d cf       	rjmp	.-262    	; 0xb72 <main+0x268>
			pc_read = uartGetByte();
			if (pc_read != -1){
				if(pc_read >= 0 && pc_read < 10){
					preset = pc_read;
				}else if(pc_read == '#'){
					maxpreset = uartGetByte();
     c78:	33 d3       	rcall	.+1638   	; 0x12e0 <uartGetByte>
     c7a:	90 93 9b 01 	sts	0x019B, r25
     c7e:	80 93 9a 01 	sts	0x019A, r24
     c82:	77 cf       	rjmp	.-274    	; 0xb72 <main+0x268>

00000c84 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     c84:	90 93 17 01 	sts	0x0117, r25
     c88:	80 93 16 01 	sts	0x0116, r24
     c8c:	08 95       	ret

00000c8e <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     c8e:	cf 93       	push	r28
     c90:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     c92:	8a 30       	cpi	r24, 0x0A	; 10
     c94:	39 f0       	breq	.+14     	; 0xca4 <rprintfChar+0x16>
		rputchar('\r');
	// send character
	rputchar(c);
     c96:	e0 91 16 01 	lds	r30, 0x0116
     c9a:	f0 91 17 01 	lds	r31, 0x0117
     c9e:	8c 2f       	mov	r24, r28
}
     ca0:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     ca2:	09 94       	ijmp
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     ca4:	e0 91 16 01 	lds	r30, 0x0116
     ca8:	f0 91 17 01 	lds	r31, 0x0117
     cac:	8d e0       	ldi	r24, 0x0D	; 13
     cae:	09 95       	icall
	// send character
	rputchar(c);
     cb0:	e0 91 16 01 	lds	r30, 0x0116
     cb4:	f0 91 17 01 	lds	r31, 0x0117
     cb8:	8c 2f       	mov	r24, r28
}
     cba:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     cbc:	09 94       	ijmp

00000cbe <rprintfStr>:
}

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	c9 f0       	breq	.+50     	; 0xcfa <rprintfStr+0x3c>

	// print the string until a null-terminator
	while (*str)
     cc8:	fc 01       	movw	r30, r24
     cca:	10 81       	ld	r17, Z
     ccc:	11 23       	and	r17, r17
     cce:	a9 f0       	breq	.+42     	; 0xcfa <rprintfStr+0x3c>
     cd0:	ec 01       	movw	r28, r24
     cd2:	21 96       	adiw	r28, 0x01	; 1
     cd4:	09 c0       	rjmp	.+18     	; 0xce8 <rprintfStr+0x2a>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     cd6:	e0 91 16 01 	lds	r30, 0x0116
     cda:	f0 91 17 01 	lds	r31, 0x0117
     cde:	81 2f       	mov	r24, r17
     ce0:	09 95       	icall
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     ce2:	19 91       	ld	r17, Y+
     ce4:	11 23       	and	r17, r17
     ce6:	49 f0       	breq	.+18     	; 0xcfa <rprintfStr+0x3c>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     ce8:	1a 30       	cpi	r17, 0x0A	; 10
     cea:	a9 f7       	brne	.-22     	; 0xcd6 <rprintfStr+0x18>
		rputchar('\r');
     cec:	e0 91 16 01 	lds	r30, 0x0116
     cf0:	f0 91 17 01 	lds	r31, 0x0117
     cf4:	8d e0       	ldi	r24, 0x0D	; 13
     cf6:	09 95       	icall
     cf8:	ee cf       	rjmp	.-36     	; 0xcd6 <rprintfStr+0x18>
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	08 95       	ret

00000d02 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	1f 92       	push	r1
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	a9 f1       	breq	.+106    	; 0xd88 <rprintfStrLen+0x86>
     d1e:	fc 01       	movw	r30, r24
     d20:	68 0f       	add	r22, r24
     d22:	79 1f       	adc	r23, r25
     d24:	08 c0       	rjmp	.+16     	; 0xd36 <rprintfStrLen+0x34>
     d26:	6f 01       	movw	r12, r30
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	c8 1a       	sub	r12, r24
     d2c:	d8 0a       	sbc	r13, r24
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	29 f0       	breq	.+10     	; 0xd3e <rprintfStrLen+0x3c>
     d34:	f6 01       	movw	r30, r12
     d36:	6f 01       	movw	r12, r30
     d38:	e6 17       	cp	r30, r22
     d3a:	f7 07       	cpc	r31, r23
     d3c:	a1 f7       	brne	.-24     	; 0xd26 <rprintfStrLen+0x24>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     d3e:	e1 14       	cp	r14, r1
     d40:	f1 04       	cpc	r15, r1
     d42:	11 f1       	breq	.+68     	; 0xd88 <rprintfStrLen+0x86>
     d44:	00 e0       	ldi	r16, 0x00	; 0
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <rprintfStrLen+0x68>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
			rprintfChar(*str++);
     d4a:	bf ef       	ldi	r27, 0xFF	; 255
     d4c:	cb 1a       	sub	r12, r27
     d4e:	db 0a       	sbc	r13, r27
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     d50:	9a 30       	cpi	r25, 0x0A	; 10
     d52:	21 f1       	breq	.+72     	; 0xd9c <rprintfStrLen+0x9a>
		rputchar('\r');
	// send character
	rputchar(c);
     d54:	e0 91 16 01 	lds	r30, 0x0116
     d58:	f0 91 17 01 	lds	r31, 0x0117
     d5c:	89 2f       	mov	r24, r25
     d5e:	09 95       	icall
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     d60:	0f 5f       	subi	r16, 0xFF	; 255
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	0e 15       	cp	r16, r14
     d66:	1f 05       	cpc	r17, r15
     d68:	79 f0       	breq	.+30     	; 0xd88 <rprintfStrLen+0x86>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     d6a:	d6 01       	movw	r26, r12
     d6c:	9c 91       	ld	r25, X
     d6e:	91 11       	cpse	r25, r1
     d70:	ec cf       	rjmp	.-40     	; 0xd4a <rprintfStrLen+0x48>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     d72:	e0 91 16 01 	lds	r30, 0x0116
     d76:	f0 91 17 01 	lds	r31, 0x0117
     d7a:	80 e2       	ldi	r24, 0x20	; 32
     d7c:	09 95       	icall
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     d7e:	0f 5f       	subi	r16, 0xFF	; 255
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	0e 15       	cp	r16, r14
     d84:	1f 05       	cpc	r17, r15
     d86:	89 f7       	brne	.-30     	; 0xd6a <rprintfStrLen+0x68>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     d88:	0f 90       	pop	r0
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	08 95       	ret
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     d9c:	e0 91 16 01 	lds	r30, 0x0116
     da0:	f0 91 17 01 	lds	r31, 0x0117
     da4:	8d e0       	ldi	r24, 0x0D	; 13
     da6:	99 83       	std	Y+1, r25	; 0x01
     da8:	09 95       	icall
     daa:	99 81       	ldd	r25, Y+1	; 0x01
     dac:	d3 cf       	rjmp	.-90     	; 0xd54 <rprintfStrLen+0x52>

00000dae <rprintfProgStr>:
}

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const char str[])
{
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	d9 f0       	breq	.+54     	; 0xdee <rprintfProgStr+0x40>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     db8:	ec 01       	movw	r28, r24
     dba:	21 96       	adiw	r28, 0x01	; 1
     dbc:	fc 01       	movw	r30, r24
     dbe:	14 91       	lpm	r17, Z
     dc0:	11 11       	cpse	r17, r1
     dc2:	0c c0       	rjmp	.+24     	; 0xddc <rprintfProgStr+0x2e>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <rprintfProgStr+0x40>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     dc6:	e0 91 16 01 	lds	r30, 0x0116
     dca:	f0 91 17 01 	lds	r31, 0x0117
     dce:	81 2f       	mov	r24, r17
     dd0:	09 95       	icall

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     dd2:	fe 01       	movw	r30, r28
     dd4:	14 91       	lpm	r17, Z
     dd6:	21 96       	adiw	r28, 0x01	; 1
     dd8:	11 23       	and	r17, r17
     dda:	49 f0       	breq	.+18     	; 0xdee <rprintfProgStr+0x40>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     ddc:	1a 30       	cpi	r17, 0x0A	; 10
     dde:	99 f7       	brne	.-26     	; 0xdc6 <rprintfProgStr+0x18>
		rputchar('\r');
     de0:	e0 91 16 01 	lds	r30, 0x0116
     de4:	f0 91 17 01 	lds	r31, 0x0117
     de8:	8d e0       	ldi	r24, 0x0D	; 13
     dea:	09 95       	icall
     dec:	ec cf       	rjmp	.-40     	; 0xdc6 <rprintfProgStr+0x18>
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	08 95       	ret

00000df6 <rprintfCRLF>:
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     df6:	e0 91 16 01 	lds	r30, 0x0116
     dfa:	f0 91 17 01 	lds	r31, 0x0117
     dfe:	8d e0       	ldi	r24, 0x0D	; 13
     e00:	09 95       	icall
	// send character
	rputchar(c);
     e02:	e0 91 16 01 	lds	r30, 0x0116
     e06:	f0 91 17 01 	lds	r31, 0x0117
     e0a:	8a e0       	ldi	r24, 0x0A	; 10
     e0c:	09 94       	ijmp

00000e0e <rprintfu04>:
}

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data)
{
     e0e:	cf 93       	push	r28
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     e10:	8f 70       	andi	r24, 0x0F	; 15
     e12:	e8 2f       	mov	r30, r24
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	ea 5d       	subi	r30, 0xDA	; 218
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	c4 91       	lpm	r28, Z
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     e1c:	ca 30       	cpi	r28, 0x0A	; 10
     e1e:	39 f0       	breq	.+14     	; 0xe2e <rprintfu04+0x20>
		rputchar('\r');
	// send character
	rputchar(c);
     e20:	e0 91 16 01 	lds	r30, 0x0116
     e24:	f0 91 17 01 	lds	r31, 0x0117
     e28:	8c 2f       	mov	r24, r28
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
}
     e2a:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     e2c:	09 94       	ijmp
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     e2e:	e0 91 16 01 	lds	r30, 0x0116
     e32:	f0 91 17 01 	lds	r31, 0x0117
     e36:	8d e0       	ldi	r24, 0x0D	; 13
     e38:	09 95       	icall
	// send character
	rputchar(c);
     e3a:	e0 91 16 01 	lds	r30, 0x0116
     e3e:	f0 91 17 01 	lds	r31, 0x0117
     e42:	8c 2f       	mov	r24, r28
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
}
     e44:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     e46:	09 94       	ijmp

00000e48 <rprintfu08>:
}

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     e48:	cf 93       	push	r28
     e4a:	c8 2f       	mov	r28, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     e4c:	82 95       	swap	r24
     e4e:	8f 70       	andi	r24, 0x0F	; 15
     e50:	de df       	rcall	.-68     	; 0xe0e <rprintfu04>
	rprintfu04(data);
     e52:	8c 2f       	mov	r24, r28
}
     e54:	cf 91       	pop	r28
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
     e56:	db cf       	rjmp	.-74     	; 0xe0e <rprintfu04>

00000e58 <rprintfu16>:
}

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	1f 92       	push	r1
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	18 2f       	mov	r17, r24
// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
     e66:	89 2f       	mov	r24, r25
     e68:	82 95       	swap	r24
     e6a:	8f 70       	andi	r24, 0x0F	; 15
     e6c:	99 83       	std	Y+1, r25	; 0x01
     e6e:	cf df       	rcall	.-98     	; 0xe0e <rprintfu04>
	rprintfu04(data);
     e70:	99 81       	ldd	r25, Y+1	; 0x01
     e72:	89 2f       	mov	r24, r25
     e74:	cc df       	rcall	.-104    	; 0xe0e <rprintfu04>
// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
     e76:	81 2f       	mov	r24, r17
     e78:	82 95       	swap	r24
     e7a:	8f 70       	andi	r24, 0x0F	; 15
     e7c:	c8 df       	rcall	.-112    	; 0xe0e <rprintfu04>
	rprintfu04(data);
     e7e:	81 2f       	mov	r24, r17
void rprintfu16(unsigned short data)
{
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
}
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
     e88:	c2 cf       	rjmp	.-124    	; 0xe0e <rprintfu04>

00000e8a <rprintfu32>:
}

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	6b 01       	movw	r12, r22
     e94:	7c 01       	movw	r14, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     e96:	c7 01       	movw	r24, r14
     e98:	df df       	rcall	.-66     	; 0xe58 <rprintfu16>
	rprintfu16(data);
     e9a:	c6 01       	movw	r24, r12
}
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
	// print 32-bit hex value
	rprintfu16(data>>16);
	rprintfu16(data);
     ea4:	d9 cf       	rjmp	.-78     	; 0xe58 <rprintfu16>

00000ea6 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     ea6:	3f 92       	push	r3
     ea8:	4f 92       	push	r4
     eaa:	5f 92       	push	r5
     eac:	6f 92       	push	r6
     eae:	7f 92       	push	r7
     eb0:	8f 92       	push	r8
     eb2:	9f 92       	push	r9
     eb4:	af 92       	push	r10
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	a9 97       	sbiw	r28, 0x29	; 41
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	36 2e       	mov	r3, r22
     eda:	72 2e       	mov	r7, r18
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     edc:	44 23       	and	r20, r20
     ede:	11 f0       	breq	.+4      	; 0xee4 <rprintfNum+0x3e>
     ee0:	17 fd       	sbrc	r17, 7
     ee2:	9f c0       	rjmp	.+318    	; 0x1022 <rprintfNum+0x17c>
	{
		x = -n;
	}
	else
	{
	 	x = n;
     ee4:	47 01       	movw	r8, r14
     ee6:	58 01       	movw	r10, r16
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     ee8:	dd 24       	eor	r13, r13
     eea:	d3 94       	inc	r13
     eec:	41 11       	cpse	r20, r1
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <rprintfNum+0x4c>
     ef0:	d1 2c       	mov	r13, r1
     ef2:	cc 24       	eor	r12, r12
     ef4:	ca 94       	dec	r12
     ef6:	c3 0c       	add	r12, r3
     ef8:	cd 18       	sub	r12, r13
  	p = buf + sizeof (buf);
  	*--p = '\0';
     efa:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	29 a3       	std	Y+33, r18	; 0x21
     f06:	3a a3       	std	Y+34, r19	; 0x22
     f08:	4b a3       	std	Y+35, r20	; 0x23
     f0a:	5c a3       	std	Y+36, r21	; 0x24
     f0c:	c5 01       	movw	r24, r10
     f0e:	b4 01       	movw	r22, r8
     f10:	a7 d2       	rcall	.+1358   	; 0x1460 <__udivmodsi4>
     f12:	fb 01       	movw	r30, r22
     f14:	ef 70       	andi	r30, 0x0F	; 15
     f16:	ff 27       	eor	r31, r31
     f18:	ea 5d       	subi	r30, 0xDA	; 218
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	64 91       	lpm	r22, Z
     f1e:	6f 8f       	std	Y+31, r22	; 0x1f
     f20:	c5 01       	movw	r24, r10
     f22:	b4 01       	movw	r22, r8
     f24:	29 a1       	ldd	r18, Y+33	; 0x21
     f26:	3a a1       	ldd	r19, Y+34	; 0x22
     f28:	4b a1       	ldd	r20, Y+35	; 0x23
     f2a:	5c a1       	ldd	r21, Y+36	; 0x24
     f2c:	99 d2       	rcall	.+1330   	; 0x1460 <__udivmodsi4>
     f2e:	49 01       	movw	r8, r18
     f30:	5a 01       	movw	r10, r20
     f32:	2e 01       	movw	r4, r28
     f34:	3e e1       	ldi	r19, 0x1E	; 30
     f36:	43 0e       	add	r4, r19
     f38:	51 1c       	adc	r5, r1
     f3a:	ed a2       	std	Y+37, r14	; 0x25
     f3c:	fe a2       	std	Y+38, r15	; 0x26
     f3e:	0f a3       	std	Y+39, r16	; 0x27
     f40:	18 a7       	std	Y+40, r17	; 0x28
     f42:	0c 2d       	mov	r16, r12
     f44:	1c 2d       	mov	r17, r12
     f46:	6d 2c       	mov	r6, r13
     f48:	c9 a0       	ldd	r12, Y+33	; 0x21
     f4a:	da a0       	ldd	r13, Y+34	; 0x22
     f4c:	eb a0       	ldd	r14, Y+35	; 0x23
     f4e:	fc a0       	ldd	r15, Y+36	; 0x24
	// calculate remaining digits
	while(count--)
     f50:	17 c0       	rjmp	.+46     	; 0xf80 <rprintfNum+0xda>
	{
		if(x != 0)
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     f52:	c5 01       	movw	r24, r10
     f54:	b4 01       	movw	r22, r8
     f56:	a7 01       	movw	r20, r14
     f58:	96 01       	movw	r18, r12
     f5a:	82 d2       	rcall	.+1284   	; 0x1460 <__udivmodsi4>
     f5c:	fb 01       	movw	r30, r22
     f5e:	ef 70       	andi	r30, 0x0F	; 15
     f60:	ff 27       	eor	r31, r31
     f62:	ea 5d       	subi	r30, 0xDA	; 218
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	64 91       	lpm	r22, Z
     f68:	f2 01       	movw	r30, r4
     f6a:	60 83       	st	Z, r22
     f6c:	c5 01       	movw	r24, r10
     f6e:	b4 01       	movw	r22, r8
     f70:	a7 01       	movw	r20, r14
     f72:	96 01       	movw	r18, r12
     f74:	75 d2       	rcall	.+1258   	; 0x1460 <__udivmodsi4>
     f76:	49 01       	movw	r8, r18
     f78:	5a 01       	movw	r10, r20
     f7a:	f1 e0       	ldi	r31, 0x01	; 1
     f7c:	4f 1a       	sub	r4, r31
     f7e:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     f80:	11 50       	subi	r17, 0x01	; 1
     f82:	40 f0       	brcs	.+16     	; 0xf94 <rprintfNum+0xee>
	{
		if(x != 0)
     f84:	81 14       	cp	r8, r1
     f86:	91 04       	cpc	r9, r1
     f88:	a1 04       	cpc	r10, r1
     f8a:	b1 04       	cpc	r11, r1
     f8c:	11 f7       	brne	.-60     	; 0xf52 <rprintfNum+0xac>
			*--p = hexchar(x%base); x /= base;
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     f8e:	f2 01       	movw	r30, r4
     f90:	70 82       	st	Z, r7
     f92:	f3 cf       	rjmp	.-26     	; 0xf7a <rprintfNum+0xd4>
     f94:	c0 2e       	mov	r12, r16
     f96:	ed a0       	ldd	r14, Y+37	; 0x25
     f98:	fe a0       	ldd	r15, Y+38	; 0x26
     f9a:	0f a1       	ldd	r16, Y+39	; 0x27
     f9c:	18 a5       	ldd	r17, Y+40	; 0x28
     f9e:	fe 01       	movw	r30, r28
     fa0:	7f 96       	adiw	r30, 0x1f	; 31
     fa2:	ec 19       	sub	r30, r12
     fa4:	f1 09       	sbc	r31, r1
		}
	}

	// apply signed notation if requested
	if( isSigned )
     fa6:	66 20       	and	r6, r6
     fa8:	49 f0       	breq	.+18     	; 0xfbc <rprintfNum+0x116>
	{
		if(n < 0)
     faa:	17 fd       	sbrc	r17, 7
     fac:	42 c0       	rjmp	.+132    	; 0x1032 <rprintfNum+0x18c>
		{
   			*--p = '-';
		}
		else if(n > 0)
     fae:	ef 28       	or	r14, r15
     fb0:	e0 2a       	or	r14, r16
     fb2:	e1 2a       	or	r14, r17
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <rprintfNum+0x112>
     fb6:	40 c0       	rjmp	.+128    	; 0x1038 <rprintfNum+0x192>
		{
	   		*--p = '+';
     fb8:	8b e2       	ldi	r24, 0x2B	; 43
     fba:	82 93       	st	-Z, r24
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     fbc:	33 20       	and	r3, r3
     fbe:	c9 f0       	breq	.+50     	; 0xff2 <rprintfNum+0x14c>
     fc0:	8f 01       	movw	r16, r30
     fc2:	f3 2c       	mov	r15, r3
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <rprintfNum+0x130>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     fc6:	e0 91 16 01 	lds	r30, 0x0116
     fca:	f0 91 17 01 	lds	r31, 0x0117
     fce:	89 2f       	mov	r24, r25
     fd0:	09 95       	icall
     fd2:	fa 94       	dec	r15
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     fd4:	71 f0       	breq	.+28     	; 0xff2 <rprintfNum+0x14c>
	{
		rprintfChar(*p++);
     fd6:	f8 01       	movw	r30, r16
     fd8:	91 91       	ld	r25, Z+
     fda:	8f 01       	movw	r16, r30
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     fdc:	9a 30       	cpi	r25, 0x0A	; 10
     fde:	99 f7       	brne	.-26     	; 0xfc6 <rprintfNum+0x120>
		rputchar('\r');
     fe0:	e0 91 16 01 	lds	r30, 0x0116
     fe4:	f0 91 17 01 	lds	r31, 0x0117
     fe8:	8d e0       	ldi	r24, 0x0D	; 13
     fea:	99 a7       	std	Y+41, r25	; 0x29
     fec:	09 95       	icall
     fee:	99 a5       	ldd	r25, Y+41	; 0x29
     ff0:	ea cf       	rjmp	.-44     	; 0xfc6 <rprintfNum+0x120>
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
     ff2:	a9 96       	adiw	r28, 0x29	; 41
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	bf 90       	pop	r11
    1010:	af 90       	pop	r10
    1012:	9f 90       	pop	r9
    1014:	8f 90       	pop	r8
    1016:	7f 90       	pop	r7
    1018:	6f 90       	pop	r6
    101a:	5f 90       	pop	r5
    101c:	4f 90       	pop	r4
    101e:	3f 90       	pop	r3
    1020:	08 95       	ret
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
	{
		x = -n;
    1022:	88 24       	eor	r8, r8
    1024:	99 24       	eor	r9, r9
    1026:	54 01       	movw	r10, r8
    1028:	8e 18       	sub	r8, r14
    102a:	9f 08       	sbc	r9, r15
    102c:	a0 0a       	sbc	r10, r16
    102e:	b1 0a       	sbc	r11, r17
    1030:	5b cf       	rjmp	.-330    	; 0xee8 <rprintfNum+0x42>
	// apply signed notation if requested
	if( isSigned )
	{
		if(n < 0)
		{
   			*--p = '-';
    1032:	8d e2       	ldi	r24, 0x2D	; 45
    1034:	82 93       	st	-Z, r24
    1036:	c2 cf       	rjmp	.-124    	; 0xfbc <rprintfNum+0x116>
		{
	   		*--p = '+';
		}
		else
		{
	   		*--p = ' ';
    1038:	80 e2       	ldi	r24, 0x20	; 32
    103a:	82 93       	st	-Z, r24
    103c:	bf cf       	rjmp	.-130    	; 0xfbc <rprintfNum+0x116>

0000103e <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    103e:	6f 92       	push	r6
    1040:	7f 92       	push	r7
    1042:	8f 92       	push	r8
    1044:	9f 92       	push	r9
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	1f 92       	push	r1
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	7a 88       	ldd	r7, Y+18	; 0x12
    1062:	cb 88       	ldd	r12, Y+19	; 0x13
    1064:	dc 88       	ldd	r13, Y+20	; 0x14
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
    1066:	4e 01       	movw	r8, r28
    1068:	85 e1       	ldi	r24, 0x15	; 21
    106a:	88 0e       	add	r8, r24
    106c:	91 1c       	adc	r9, r1
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    106e:	77 20       	and	r7, r7
    1070:	a9 f0       	breq	.+42     	; 0x109c <rprintf1RamRom+0x5e>
    1072:	86 01       	movw	r16, r12
    1074:	0f 5f       	subi	r16, 0xFF	; 255
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	f6 01       	movw	r30, r12
    107a:	94 91       	lpm	r25, Z
    107c:	95 32       	cpi	r25, 0x25	; 37
    107e:	49 f1       	breq	.+82     	; 0x10d2 <rprintf1RamRom+0x94>
		{	// Until '%' or '\0'
			if (!format_flag)
    1080:	99 23       	and	r25, r25
    1082:	a9 f0       	breq	.+42     	; 0x10ae <rprintf1RamRom+0x70>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
    1084:	9a 30       	cpi	r25, 0x0A	; 10
    1086:	09 f4       	brne	.+2      	; 0x108a <rprintf1RamRom+0x4c>
    1088:	6f c0       	rjmp	.+222    	; 0x1168 <rprintf1RamRom+0x12a>
		rputchar('\r');
	// send character
	rputchar(c);
    108a:	e0 91 16 01 	lds	r30, 0x0116
    108e:	f0 91 17 01 	lds	r31, 0x0117
    1092:	89 2f       	mov	r24, r25
    1094:	09 95       	icall
    1096:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    1098:	71 10       	cpse	r7, r1
    109a:	eb cf       	rjmp	.-42     	; 0x1072 <rprintf1RamRom+0x34>
    109c:	f6 01       	movw	r30, r12
    109e:	90 81       	ld	r25, Z
    10a0:	95 32       	cpi	r25, 0x25	; 37
    10a2:	91 f1       	breq	.+100    	; 0x1108 <rprintf1RamRom+0xca>
    10a4:	86 01       	movw	r16, r12
    10a6:	0f 5f       	subi	r16, 0xFF	; 255
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
		{	// Until '%' or '\0'
			if (!format_flag)
    10aa:	91 11       	cpse	r25, r1
    10ac:	eb cf       	rjmp	.-42     	; 0x1084 <rprintf1RamRom+0x46>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	9f 90       	pop	r9
    10ca:	8f 90       	pop	r8
    10cc:	7f 90       	pop	r7
    10ce:	6f 90       	pop	r6
    10d0:	08 95       	ret
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    10d2:	f2 e0       	ldi	r31, 0x02	; 2
    10d4:	cf 0e       	add	r12, r31
    10d6:	d1 1c       	adc	r13, r1
    10d8:	f8 01       	movw	r30, r16
    10da:	04 91       	lpm	r16, Z
    10dc:	04 36       	cpi	r16, 0x64	; 100
    10de:	d9 f0       	breq	.+54     	; 0x1116 <rprintf1RamRom+0xd8>
    10e0:	08 37       	cpi	r16, 0x78	; 120
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <rprintf1RamRom+0xa8>
    10e4:	4a c0       	rjmp	.+148    	; 0x117a <rprintf1RamRom+0x13c>
    10e6:	03 36       	cpi	r16, 0x63	; 99
    10e8:	29 f4       	brne	.+10     	; 0x10f4 <rprintf1RamRom+0xb6>
		{
			case 'c': format_flag = va_arg(ap,int);
    10ea:	f4 01       	movw	r30, r8
    10ec:	00 81       	ld	r16, Z
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	89 0e       	add	r8, r25
    10f2:	91 1c       	adc	r9, r1
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
    10f4:	0a 30       	cpi	r16, 0x0A	; 10
    10f6:	09 f4       	brne	.+2      	; 0x10fa <rprintf1RamRom+0xbc>
    10f8:	5d c0       	rjmp	.+186    	; 0x11b4 <rprintf1RamRom+0x176>
		rputchar('\r');
	// send character
	rputchar(c);
    10fa:	e0 91 16 01 	lds	r30, 0x0116
    10fe:	f0 91 17 01 	lds	r31, 0x0117
    1102:	80 2f       	mov	r24, r16
    1104:	09 95       	icall
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
    1106:	b3 cf       	rjmp	.-154    	; 0x106e <rprintf1RamRom+0x30>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1108:	f6 01       	movw	r30, r12
    110a:	01 81       	ldd	r16, Z+1	; 0x01
    110c:	c6 01       	movw	r24, r12
    110e:	02 96       	adiw	r24, 0x02	; 2
    1110:	6c 01       	movw	r12, r24
    1112:	04 36       	cpi	r16, 0x64	; 100
    1114:	29 f7       	brne	.-54     	; 0x10e0 <rprintf1RamRom+0xa2>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1116:	f4 01       	movw	r30, r8
    1118:	e0 80       	ld	r14, Z
    111a:	f1 80       	ldd	r15, Z+1	; 0x01
    111c:	e2 e0       	ldi	r30, 0x02	; 2
    111e:	8e 0e       	add	r8, r30
    1120:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
    1122:	f7 fc       	sbrc	r15, 7
    1124:	4e c0       	rjmp	.+156    	; 0x11c2 <rprintf1RamRom+0x184>
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    1126:	80 e1       	ldi	r24, 0x10	; 16
    1128:	e8 16       	cp	r14, r24
    112a:	87 e2       	ldi	r24, 0x27	; 39
    112c:	f8 06       	cpc	r15, r24
    112e:	08 f0       	brcs	.+2      	; 0x1132 <rprintf1RamRom+0xf4>
    1130:	52 c0       	rjmp	.+164    	; 0x11d6 <rprintf1RamRom+0x198>
    1132:	43 e0       	ldi	r20, 0x03	; 3
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	08 ee       	ldi	r16, 0xE8	; 232
    1138:	13 e0       	ldi	r17, 0x03	; 3
    113a:	e0 16       	cp	r14, r16
    113c:	f1 06       	cpc	r15, r17
    113e:	80 f4       	brcc	.+32     	; 0x1160 <rprintf1RamRom+0x122>
    1140:	98 01       	movw	r18, r16
    1142:	ad ec       	ldi	r26, 0xCD	; 205
    1144:	bc ec       	ldi	r27, 0xCC	; 204
    1146:	ae d1       	rcall	.+860    	; 0x14a4 <__umulhisi3>
    1148:	8c 01       	movw	r16, r24
    114a:	16 95       	lsr	r17
    114c:	07 95       	ror	r16
    114e:	16 95       	lsr	r17
    1150:	07 95       	ror	r16
    1152:	16 95       	lsr	r17
    1154:	07 95       	ror	r16
    1156:	41 50       	subi	r20, 0x01	; 1
    1158:	51 09       	sbc	r21, r1
    115a:	41 15       	cp	r20, r1
    115c:	51 05       	cpc	r21, r1
    115e:	69 f7       	brne	.-38     	; 0x113a <rprintf1RamRom+0xfc>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	a2 2e       	mov	r10, r18
    1164:	b1 2c       	mov	r11, r1
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <rprintf1RamRom+0x152>
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
    1168:	e0 91 16 01 	lds	r30, 0x0116
    116c:	f0 91 17 01 	lds	r31, 0x0117
    1170:	8d e0       	ldi	r24, 0x0D	; 13
    1172:	99 83       	std	Y+1, r25	; 0x01
    1174:	09 95       	icall
    1176:	99 81       	ldd	r25, Y+1	; 0x01
    1178:	88 cf       	rjmp	.-240    	; 0x108a <rprintf1RamRom+0x4c>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    117a:	f4 01       	movw	r30, r8
    117c:	e0 80       	ld	r14, Z
    117e:	f1 80       	ldd	r15, Z+1	; 0x01
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	8f 0e       	add	r8, r31
    1184:	91 1c       	adc	r9, r1
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
    1186:	80 e1       	ldi	r24, 0x10	; 16
    1188:	a8 2e       	mov	r10, r24
    118a:	b1 2c       	mov	r11, r1
    118c:	00 e0       	ldi	r16, 0x00	; 0
    118e:	10 e1       	ldi	r17, 0x10	; 16
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1190:	c7 01       	movw	r24, r14
    1192:	b8 01       	movw	r22, r16
    1194:	51 d1       	rcall	.+674    	; 0x1438 <__udivmodhi4>
    1196:	68 2e       	mov	r6, r24
    1198:	86 2f       	mov	r24, r22
    119a:	99 83       	std	Y+1, r25	; 0x01
    119c:	38 de       	rcall	.-912    	; 0xe0e <rprintfu04>
				u_val %= div_val;
    119e:	e6 2c       	mov	r14, r6
    11a0:	99 81       	ldd	r25, Y+1	; 0x01
    11a2:	f9 2e       	mov	r15, r25
				div_val /= base;
    11a4:	c8 01       	movw	r24, r16
    11a6:	b5 01       	movw	r22, r10
    11a8:	47 d1       	rcall	.+654    	; 0x1438 <__udivmodhi4>
    11aa:	8b 01       	movw	r16, r22
			} while (div_val);
    11ac:	61 15       	cp	r22, r1
    11ae:	71 05       	cpc	r23, r1
    11b0:	79 f7       	brne	.-34     	; 0x1190 <rprintf1RamRom+0x152>
    11b2:	5d cf       	rjmp	.-326    	; 0x106e <rprintf1RamRom+0x30>
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
    11b4:	e0 91 16 01 	lds	r30, 0x0116
    11b8:	f0 91 17 01 	lds	r31, 0x0117
    11bc:	8d e0       	ldi	r24, 0x0D	; 13
    11be:	09 95       	icall
    11c0:	9c cf       	rjmp	.-200    	; 0x10fa <rprintf1RamRom+0xbc>
			u_val = va_arg(ap,int);
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
    11c2:	f1 94       	neg	r15
    11c4:	e1 94       	neg	r14
    11c6:	f1 08       	sbc	r15, r1
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
    11c8:	e0 91 16 01 	lds	r30, 0x0116
    11cc:	f0 91 17 01 	lds	r31, 0x0117
    11d0:	8d e2       	ldi	r24, 0x2D	; 45
    11d2:	09 95       	icall
    11d4:	a8 cf       	rjmp	.-176    	; 0x1126 <rprintf1RamRom+0xe8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    11d6:	9a e0       	ldi	r25, 0x0A	; 10
    11d8:	a9 2e       	mov	r10, r25
    11da:	b1 2c       	mov	r11, r1
    11dc:	00 e1       	ldi	r16, 0x10	; 16
    11de:	17 e2       	ldi	r17, 0x27	; 39
    11e0:	d7 cf       	rjmp	.-82     	; 0x1190 <rprintf1RamRom+0x152>

000011e2 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, uartRxData, UART_RX_BUFFER_SIZE);
    11e2:	40 e4       	ldi	r20, 0x40	; 64
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	6a e5       	ldi	r22, 0x5A	; 90
    11e8:	71 e0       	ldi	r23, 0x01	; 1
    11ea:	8b ea       	ldi	r24, 0xAB	; 171
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	40 d7       	rcall	.+3712   	; 0x2070 <__data_load_end+0x15c>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, uartTxData, UART_TX_BUFFER_SIZE);
    11f0:	40 e4       	ldi	r20, 0x40	; 64
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	6a e1       	ldi	r22, 0x1A	; 26
    11f6:	71 e0       	ldi	r23, 0x01	; 1
    11f8:	84 eb       	ldi	r24, 0xB4	; 180
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	39 c7       	rjmp	.+3698   	; 0x2070 <__data_load_end+0x15c>

000011fe <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
    11fe:	f1 df       	rcall	.-30     	; 0x11e2 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
    1200:	10 92 19 01 	sts	0x0119, r1
    1204:	10 92 18 01 	sts	0x0118, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1208:	88 ed       	ldi	r24, 0xD8	; 216
    120a:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
    120c:	87 e6       	ldi	r24, 0x67	; 103
    120e:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    1210:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
    1212:	8f ef       	ldi	r24, 0xFF	; 255
    1214:	80 93 aa 01 	sts	0x01AA, r24
	uartBufferedTx = FALSE;
    1218:	10 92 b3 01 	sts	0x01B3, r1
	// clear overflow count
	uartRxOverflow = 0;
    121c:	10 92 bd 01 	sts	0x01BD, r1
    1220:	10 92 bc 01 	sts	0x01BC, r1
	// enable interrupts
	sei();
    1224:	78 94       	sei
    1226:	08 95       	ret

00001228 <uartSetRxHandler>:

// redirects received data to a user function
void uartSetRxHandler(void (*rx_func)(unsigned char c))
{
	// set the receive interrupt to run the supplied user function
	UartRxFunc = rx_func;
    1228:	90 93 19 01 	sts	0x0119, r25
    122c:	80 93 18 01 	sts	0x0118, r24
    1230:	08 95       	ret

00001232 <uartSetBaudRate>:
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	8b 01       	movw	r16, r22
    1238:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    123a:	60 5c       	subi	r22, 0xC0	; 192
    123c:	7d 4b       	sbci	r23, 0xBD	; 189
    123e:	80 4f       	sbci	r24, 0xF0	; 240
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	66 0f       	add	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	a9 01       	movw	r20, r18
    125c:	98 01       	movw	r18, r16
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	44 1f       	adc	r20, r20
    1264:	55 1f       	adc	r21, r21
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	44 1f       	adc	r20, r20
    126c:	55 1f       	adc	r21, r21
    126e:	22 0f       	add	r18, r18
    1270:	33 1f       	adc	r19, r19
    1272:	44 1f       	adc	r20, r20
    1274:	55 1f       	adc	r21, r21
    1276:	22 0f       	add	r18, r18
    1278:	33 1f       	adc	r19, r19
    127a:	44 1f       	adc	r20, r20
    127c:	55 1f       	adc	r21, r21
    127e:	f0 d0       	rcall	.+480    	; 0x1460 <__udivmodsi4>
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
    1284:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    1286:	30 bd       	out	0x20, r19	; 32
	#endif
}
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <uartGetRxBuffer>:
// returns the receive buffer structure 
cBuffer* uartGetRxBuffer(void)
{
	// return rx buffer pointer
	return &uartRxBuffer;
}
    128e:	8b ea       	ldi	r24, 0xAB	; 171
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	08 95       	ret

00001294 <uartGetTxBuffer>:
// returns the transmit buffer structure 
cBuffer* uartGetTxBuffer(void)
{
	// return tx buffer pointer
	return &uartTxBuffer;
}
    1294:	84 eb       	ldi	r24, 0xB4	; 180
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	08 95       	ret

0000129a <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    129a:	90 91 aa 01 	lds	r25, 0x01AA
    129e:	99 23       	and	r25, r25
    12a0:	e1 f3       	breq	.-8      	; 0x129a <uartSendByte>
	// send byte
	outb(UDR, txData);
    12a2:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    12a4:	10 92 aa 01 	sts	0x01AA, r1
    12a8:	08 95       	ret

000012aa <uartReceiveByte>:
		return -1;
}

// gets a byte (if available) from the uart receive buffer
u08 uartReceiveByte(u08* rxData)
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
	// make sure we have a receive buffer
	if(uartRxBuffer.size)
    12b0:	20 91 ad 01 	lds	r18, 0x01AD
    12b4:	30 91 ae 01 	lds	r19, 0x01AE
    12b8:	23 2b       	or	r18, r19
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <uartReceiveByte+0x1e>
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
    12bc:	80 91 af 01 	lds	r24, 0x01AF
    12c0:	90 91 b0 01 	lds	r25, 0x01B0
    12c4:	89 2b       	or	r24, r25
    12c6:	21 f4       	brne	.+8      	; 0x12d0 <uartReceiveByte+0x26>
		}
	}
	else
	{
		// no buffer
		return FALSE;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer);
    12d0:	8b ea       	ldi	r24, 0xAB	; 171
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	da d6       	rcall	.+3508   	; 0x208a <__data_load_end+0x176>
    12d6:	88 83       	st	Y, r24
			return TRUE;
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		// no buffer
		return FALSE;
	}
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <uartGetByte>:
	uartReadyTx = FALSE;
}

// gets a single byte from the uart receive buffer (getchar-style)
int uartGetByte(void)
{
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	1f 92       	push	r1
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	if(uartReceiveByte(&c))
    12ea:	ce 01       	movw	r24, r28
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	dd df       	rcall	.-70     	; 0x12aa <uartReceiveByte>
    12f0:	88 23       	and	r24, r24
    12f2:	31 f0       	breq	.+12     	; 0x1300 <uartGetByte+0x20>
		return c;
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	90 e0       	ldi	r25, 0x00	; 0
	else
		return -1;
}
    12f8:	0f 90       	pop	r0
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret
{
	u08 c;
	if(uartReceiveByte(&c))
		return c;
	else
		return -1;
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	9f ef       	ldi	r25, 0xFF	; 255
    1304:	f9 cf       	rjmp	.-14     	; 0x12f8 <uartGetByte+0x18>

00001306 <uartFlushReceiveBuffer>:
void uartFlushReceiveBuffer(void)
{
	// flush all data from receive buffer
	//bufferFlush(&uartRxBuffer);
	// same effect as above
	uartRxBuffer.datalength = 0;
    1306:	10 92 b0 01 	sts	0x01B0, r1
    130a:	10 92 af 01 	sts	0x01AF, r1
    130e:	08 95       	ret

00001310 <uartReceiveBufferIsEmpty>:
}

// return true if uart receive buffer is empty
u08 uartReceiveBufferIsEmpty(void)
{
	if(uartRxBuffer.datalength == 0)
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	20 91 af 01 	lds	r18, 0x01AF
    1316:	30 91 b0 01 	lds	r19, 0x01B0
    131a:	23 2b       	or	r18, r19
    131c:	09 f0       	breq	.+2      	; 0x1320 <uartReceiveBufferIsEmpty+0x10>
    131e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
    1320:	81 95       	neg	r24
    1322:	08 95       	ret

00001324 <uartAddToTxBuffer>:

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
    1324:	68 2f       	mov	r22, r24
    1326:	84 eb       	ldi	r24, 0xB4	; 180
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	09 c7       	rjmp	.+3602   	; 0x213e <__data_load_end+0x22a>

0000132c <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	80 93 b3 01 	sts	0x01B3, r24
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
    1332:	84 eb       	ldi	r24, 0xB4	; 180
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	a9 d6       	rcall	.+3410   	; 0x208a <__data_load_end+0x176>

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    1338:	90 91 aa 01 	lds	r25, 0x01AA
    133c:	99 23       	and	r25, r25
    133e:	e1 f3       	breq	.-8      	; 0x1338 <uartSendTxBuffer+0xc>
	// send byte
	outb(UDR, txData);
    1340:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    1342:	10 92 aa 01 	sts	0x01AA, r1
    1346:	08 95       	ret

00001348 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    136a:	80 91 b3 01 	lds	r24, 0x01B3
    136e:	88 23       	and	r24, r24
    1370:	61 f0       	breq	.+24     	; 0x138a <__vector_13+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    1372:	80 91 b8 01 	lds	r24, 0x01B8
    1376:	90 91 b9 01 	lds	r25, 0x01B9
    137a:	89 2b       	or	r24, r25
    137c:	d1 f4       	brne	.+52     	; 0x13b2 <__vector_13+0x6a>
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    137e:	10 92 b3 01 	sts	0x01B3, r1
			// return to ready state
			uartReadyTx = TRUE;
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	80 93 aa 01 	sts	0x01AA, r24
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <__vector_13+0x48>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	80 93 aa 01 	sts	0x01AA, r24
	}
}
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    13b2:	84 eb       	ldi	r24, 0xB4	; 180
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	69 d6       	rcall	.+3282   	; 0x208a <__data_load_end+0x176>
    13b8:	8c b9       	out	0x0c, r24	; 12
    13ba:	ea cf       	rjmp	.-44     	; 0x1390 <__vector_13+0x48>

000013bc <__vector_11>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    13de:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
    13e0:	20 91 18 01 	lds	r18, 0x0118
    13e4:	30 91 19 01 	lds	r19, 0x0119
    13e8:	23 2b       	or	r18, r19
    13ea:	b1 f0       	breq	.+44     	; 0x1418 <__vector_11+0x5c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    13ec:	e0 91 18 01 	lds	r30, 0x0118
    13f0:	f0 91 19 01 	lds	r31, 0x0119
    13f4:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	bf 91       	pop	r27
    13fc:	af 91       	pop	r26
    13fe:	9f 91       	pop	r25
    1400:	8f 91       	pop	r24
    1402:	7f 91       	pop	r23
    1404:	6f 91       	pop	r22
    1406:	5f 91       	pop	r21
    1408:	4f 91       	pop	r20
    140a:	3f 91       	pop	r19
    140c:	2f 91       	pop	r18
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    1418:	68 2f       	mov	r22, r24
    141a:	8b ea       	ldi	r24, 0xAB	; 171
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	8f d6       	rcall	.+3358   	; 0x213e <__data_load_end+0x22a>
    1420:	81 11       	cpse	r24, r1
    1422:	e9 cf       	rjmp	.-46     	; 0x13f6 <__vector_11+0x3a>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    1424:	80 91 bc 01 	lds	r24, 0x01BC
    1428:	90 91 bd 01 	lds	r25, 0x01BD
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	90 93 bd 01 	sts	0x01BD, r25
    1432:	80 93 bc 01 	sts	0x01BC, r24
    1436:	df cf       	rjmp	.-66     	; 0x13f6 <__vector_11+0x3a>

00001438 <__udivmodhi4>:
    1438:	aa 1b       	sub	r26, r26
    143a:	bb 1b       	sub	r27, r27
    143c:	51 e1       	ldi	r21, 0x11	; 17
    143e:	07 c0       	rjmp	.+14     	; 0x144e <__udivmodhi4_ep>

00001440 <__udivmodhi4_loop>:
    1440:	aa 1f       	adc	r26, r26
    1442:	bb 1f       	adc	r27, r27
    1444:	a6 17       	cp	r26, r22
    1446:	b7 07       	cpc	r27, r23
    1448:	10 f0       	brcs	.+4      	; 0x144e <__udivmodhi4_ep>
    144a:	a6 1b       	sub	r26, r22
    144c:	b7 0b       	sbc	r27, r23

0000144e <__udivmodhi4_ep>:
    144e:	88 1f       	adc	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	5a 95       	dec	r21
    1454:	a9 f7       	brne	.-22     	; 0x1440 <__udivmodhi4_loop>
    1456:	80 95       	com	r24
    1458:	90 95       	com	r25
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	08 95       	ret

00001460 <__udivmodsi4>:
    1460:	a1 e2       	ldi	r26, 0x21	; 33
    1462:	1a 2e       	mov	r1, r26
    1464:	aa 1b       	sub	r26, r26
    1466:	bb 1b       	sub	r27, r27
    1468:	fd 01       	movw	r30, r26
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <__udivmodsi4_ep>

0000146c <__udivmodsi4_loop>:
    146c:	aa 1f       	adc	r26, r26
    146e:	bb 1f       	adc	r27, r27
    1470:	ee 1f       	adc	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	a2 17       	cp	r26, r18
    1476:	b3 07       	cpc	r27, r19
    1478:	e4 07       	cpc	r30, r20
    147a:	f5 07       	cpc	r31, r21
    147c:	20 f0       	brcs	.+8      	; 0x1486 <__udivmodsi4_ep>
    147e:	a2 1b       	sub	r26, r18
    1480:	b3 0b       	sbc	r27, r19
    1482:	e4 0b       	sbc	r30, r20
    1484:	f5 0b       	sbc	r31, r21

00001486 <__udivmodsi4_ep>:
    1486:	66 1f       	adc	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	1a 94       	dec	r1
    1490:	69 f7       	brne	.-38     	; 0x146c <__udivmodsi4_loop>
    1492:	60 95       	com	r22
    1494:	70 95       	com	r23
    1496:	80 95       	com	r24
    1498:	90 95       	com	r25
    149a:	9b 01       	movw	r18, r22
    149c:	ac 01       	movw	r20, r24
    149e:	bd 01       	movw	r22, r26
    14a0:	cf 01       	movw	r24, r30
    14a2:	08 95       	ret

000014a4 <__umulhisi3>:
    14a4:	a2 9f       	mul	r26, r18
    14a6:	b0 01       	movw	r22, r0
    14a8:	b3 9f       	mul	r27, r19
    14aa:	c0 01       	movw	r24, r0
    14ac:	a3 9f       	mul	r26, r19
    14ae:	01 d0       	rcall	.+2      	; 0x14b2 <__umulhisi3+0xe>
    14b0:	b2 9f       	mul	r27, r18
    14b2:	70 0d       	add	r23, r0
    14b4:	81 1d       	adc	r24, r1
    14b6:	11 24       	eor	r1, r1
    14b8:	91 1d       	adc	r25, r1
    14ba:	08 95       	ret

000014bc <__fixunssfsi>:
    14bc:	70 d0       	rcall	.+224    	; 0x159e <__fp_splitA>
    14be:	88 f0       	brcs	.+34     	; 0x14e2 <__fixunssfsi+0x26>
    14c0:	9f 57       	subi	r25, 0x7F	; 127
    14c2:	90 f0       	brcs	.+36     	; 0x14e8 <__fixunssfsi+0x2c>
    14c4:	b9 2f       	mov	r27, r25
    14c6:	99 27       	eor	r25, r25
    14c8:	b7 51       	subi	r27, 0x17	; 23
    14ca:	a0 f0       	brcs	.+40     	; 0x14f4 <__fixunssfsi+0x38>
    14cc:	d1 f0       	breq	.+52     	; 0x1502 <__fixunssfsi+0x46>
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	1a f0       	brmi	.+6      	; 0x14de <__fixunssfsi+0x22>
    14d8:	ba 95       	dec	r27
    14da:	c9 f7       	brne	.-14     	; 0x14ce <__fixunssfsi+0x12>
    14dc:	12 c0       	rjmp	.+36     	; 0x1502 <__fixunssfsi+0x46>
    14de:	b1 30       	cpi	r27, 0x01	; 1
    14e0:	81 f0       	breq	.+32     	; 0x1502 <__fixunssfsi+0x46>
    14e2:	77 d0       	rcall	.+238    	; 0x15d2 <__fp_zero>
    14e4:	b1 e0       	ldi	r27, 0x01	; 1
    14e6:	08 95       	ret
    14e8:	74 c0       	rjmp	.+232    	; 0x15d2 <__fp_zero>
    14ea:	67 2f       	mov	r22, r23
    14ec:	78 2f       	mov	r23, r24
    14ee:	88 27       	eor	r24, r24
    14f0:	b8 5f       	subi	r27, 0xF8	; 248
    14f2:	39 f0       	breq	.+14     	; 0x1502 <__fixunssfsi+0x46>
    14f4:	b9 3f       	cpi	r27, 0xF9	; 249
    14f6:	cc f3       	brlt	.-14     	; 0x14ea <__fixunssfsi+0x2e>
    14f8:	86 95       	lsr	r24
    14fa:	77 95       	ror	r23
    14fc:	67 95       	ror	r22
    14fe:	b3 95       	inc	r27
    1500:	d9 f7       	brne	.-10     	; 0x14f8 <__fixunssfsi+0x3c>
    1502:	3e f4       	brtc	.+14     	; 0x1512 <__fixunssfsi+0x56>
    1504:	90 95       	com	r25
    1506:	80 95       	com	r24
    1508:	70 95       	com	r23
    150a:	61 95       	neg	r22
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	08 95       	ret

00001514 <__floatunsisf>:
    1514:	e8 94       	clt
    1516:	09 c0       	rjmp	.+18     	; 0x152a <__floatsisf+0x12>

00001518 <__floatsisf>:
    1518:	97 fb       	bst	r25, 7
    151a:	3e f4       	brtc	.+14     	; 0x152a <__floatsisf+0x12>
    151c:	90 95       	com	r25
    151e:	80 95       	com	r24
    1520:	70 95       	com	r23
    1522:	61 95       	neg	r22
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	99 23       	and	r25, r25
    152c:	a9 f0       	breq	.+42     	; 0x1558 <__floatsisf+0x40>
    152e:	f9 2f       	mov	r31, r25
    1530:	96 e9       	ldi	r25, 0x96	; 150
    1532:	bb 27       	eor	r27, r27
    1534:	93 95       	inc	r25
    1536:	f6 95       	lsr	r31
    1538:	87 95       	ror	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b7 95       	ror	r27
    1540:	f1 11       	cpse	r31, r1
    1542:	f8 cf       	rjmp	.-16     	; 0x1534 <__floatsisf+0x1c>
    1544:	fa f4       	brpl	.+62     	; 0x1584 <__floatsisf+0x6c>
    1546:	bb 0f       	add	r27, r27
    1548:	11 f4       	brne	.+4      	; 0x154e <__floatsisf+0x36>
    154a:	60 ff       	sbrs	r22, 0
    154c:	1b c0       	rjmp	.+54     	; 0x1584 <__floatsisf+0x6c>
    154e:	6f 5f       	subi	r22, 0xFF	; 255
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	16 c0       	rjmp	.+44     	; 0x1584 <__floatsisf+0x6c>
    1558:	88 23       	and	r24, r24
    155a:	11 f0       	breq	.+4      	; 0x1560 <__floatsisf+0x48>
    155c:	96 e9       	ldi	r25, 0x96	; 150
    155e:	11 c0       	rjmp	.+34     	; 0x1582 <__floatsisf+0x6a>
    1560:	77 23       	and	r23, r23
    1562:	21 f0       	breq	.+8      	; 0x156c <__floatsisf+0x54>
    1564:	9e e8       	ldi	r25, 0x8E	; 142
    1566:	87 2f       	mov	r24, r23
    1568:	76 2f       	mov	r23, r22
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <__floatsisf+0x5e>
    156c:	66 23       	and	r22, r22
    156e:	71 f0       	breq	.+28     	; 0x158c <__floatsisf+0x74>
    1570:	96 e8       	ldi	r25, 0x86	; 134
    1572:	86 2f       	mov	r24, r22
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	2a f0       	brmi	.+10     	; 0x1584 <__floatsisf+0x6c>
    157a:	9a 95       	dec	r25
    157c:	66 0f       	add	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	88 1f       	adc	r24, r24
    1582:	da f7       	brpl	.-10     	; 0x157a <__floatsisf+0x62>
    1584:	88 0f       	add	r24, r24
    1586:	96 95       	lsr	r25
    1588:	87 95       	ror	r24
    158a:	97 f9       	bld	r25, 7
    158c:	08 95       	ret

0000158e <__fp_split3>:
    158e:	57 fd       	sbrc	r21, 7
    1590:	90 58       	subi	r25, 0x80	; 128
    1592:	44 0f       	add	r20, r20
    1594:	55 1f       	adc	r21, r21
    1596:	59 f0       	breq	.+22     	; 0x15ae <__fp_splitA+0x10>
    1598:	5f 3f       	cpi	r21, 0xFF	; 255
    159a:	71 f0       	breq	.+28     	; 0x15b8 <__fp_splitA+0x1a>
    159c:	47 95       	ror	r20

0000159e <__fp_splitA>:
    159e:	88 0f       	add	r24, r24
    15a0:	97 fb       	bst	r25, 7
    15a2:	99 1f       	adc	r25, r25
    15a4:	61 f0       	breq	.+24     	; 0x15be <__fp_splitA+0x20>
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	79 f0       	breq	.+30     	; 0x15c8 <__fp_splitA+0x2a>
    15aa:	87 95       	ror	r24
    15ac:	08 95       	ret
    15ae:	12 16       	cp	r1, r18
    15b0:	13 06       	cpc	r1, r19
    15b2:	14 06       	cpc	r1, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	f2 cf       	rjmp	.-28     	; 0x159c <__fp_split3+0xe>
    15b8:	46 95       	lsr	r20
    15ba:	f1 df       	rcall	.-30     	; 0x159e <__fp_splitA>
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <__fp_splitA+0x30>
    15be:	16 16       	cp	r1, r22
    15c0:	17 06       	cpc	r1, r23
    15c2:	18 06       	cpc	r1, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	f1 cf       	rjmp	.-30     	; 0x15aa <__fp_splitA+0xc>
    15c8:	86 95       	lsr	r24
    15ca:	71 05       	cpc	r23, r1
    15cc:	61 05       	cpc	r22, r1
    15ce:	08 94       	sec
    15d0:	08 95       	ret

000015d2 <__fp_zero>:
    15d2:	e8 94       	clt

000015d4 <__fp_szero>:
    15d4:	bb 27       	eor	r27, r27
    15d6:	66 27       	eor	r22, r22
    15d8:	77 27       	eor	r23, r23
    15da:	cb 01       	movw	r24, r22
    15dc:	97 f9       	bld	r25, 7
    15de:	08 95       	ret
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <__fp_szero+0x12>
    15e2:	0e f4       	brtc	.+2      	; 0x15e6 <__fp_szero+0x12>
    15e4:	4d c0       	rjmp	.+154    	; 0x1680 <__fp_nan>
    15e6:	3e c0       	rjmp	.+124    	; 0x1664 <__fp_mpack>

000015e8 <sqrt>:
    15e8:	da df       	rcall	.-76     	; 0x159e <__fp_splitA>
    15ea:	d0 f3       	brcs	.-12     	; 0x15e0 <__fp_szero+0xc>
    15ec:	99 23       	and	r25, r25
    15ee:	d9 f3       	breq	.-10     	; 0x15e6 <__fp_szero+0x12>
    15f0:	ce f3       	brts	.-14     	; 0x15e4 <__fp_szero+0x10>
    15f2:	9f 57       	subi	r25, 0x7F	; 127
    15f4:	55 0b       	sbc	r21, r21
    15f6:	87 ff       	sbrs	r24, 7
    15f8:	46 d0       	rcall	.+140    	; 0x1686 <__fp_norm2>
    15fa:	00 24       	eor	r0, r0
    15fc:	a0 e6       	ldi	r26, 0x60	; 96
    15fe:	40 ea       	ldi	r20, 0xA0	; 160
    1600:	90 01       	movw	r18, r0
    1602:	80 58       	subi	r24, 0x80	; 128
    1604:	56 95       	lsr	r21
    1606:	97 95       	ror	r25
    1608:	28 f4       	brcc	.+10     	; 0x1614 <sqrt+0x2c>
    160a:	80 5c       	subi	r24, 0xC0	; 192
    160c:	66 0f       	add	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	20 f0       	brcs	.+8      	; 0x161c <sqrt+0x34>
    1614:	26 17       	cp	r18, r22
    1616:	37 07       	cpc	r19, r23
    1618:	48 07       	cpc	r20, r24
    161a:	30 f4       	brcc	.+12     	; 0x1628 <sqrt+0x40>
    161c:	62 1b       	sub	r22, r18
    161e:	73 0b       	sbc	r23, r19
    1620:	84 0b       	sbc	r24, r20
    1622:	20 29       	or	r18, r0
    1624:	31 29       	or	r19, r1
    1626:	4a 2b       	or	r20, r26
    1628:	a6 95       	lsr	r26
    162a:	17 94       	ror	r1
    162c:	07 94       	ror	r0
    162e:	20 25       	eor	r18, r0
    1630:	31 25       	eor	r19, r1
    1632:	4a 27       	eor	r20, r26
    1634:	58 f7       	brcc	.-42     	; 0x160c <sqrt+0x24>
    1636:	66 0f       	add	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	20 f0       	brcs	.+8      	; 0x1646 <sqrt+0x5e>
    163e:	26 17       	cp	r18, r22
    1640:	37 07       	cpc	r19, r23
    1642:	48 07       	cpc	r20, r24
    1644:	30 f4       	brcc	.+12     	; 0x1652 <sqrt+0x6a>
    1646:	62 0b       	sbc	r22, r18
    1648:	73 0b       	sbc	r23, r19
    164a:	84 0b       	sbc	r24, r20
    164c:	20 0d       	add	r18, r0
    164e:	31 1d       	adc	r19, r1
    1650:	41 1d       	adc	r20, r1
    1652:	a0 95       	com	r26
    1654:	81 f7       	brne	.-32     	; 0x1636 <sqrt+0x4e>
    1656:	b9 01       	movw	r22, r18
    1658:	84 2f       	mov	r24, r20
    165a:	91 58       	subi	r25, 0x81	; 129
    165c:	88 0f       	add	r24, r24
    165e:	96 95       	lsr	r25
    1660:	87 95       	ror	r24
    1662:	08 95       	ret

00001664 <__fp_mpack>:
    1664:	9f 3f       	cpi	r25, 0xFF	; 255
    1666:	31 f0       	breq	.+12     	; 0x1674 <__fp_mpack_finite+0xc>

00001668 <__fp_mpack_finite>:
    1668:	91 50       	subi	r25, 0x01	; 1
    166a:	20 f4       	brcc	.+8      	; 0x1674 <__fp_mpack_finite+0xc>
    166c:	87 95       	ror	r24
    166e:	77 95       	ror	r23
    1670:	67 95       	ror	r22
    1672:	b7 95       	ror	r27
    1674:	88 0f       	add	r24, r24
    1676:	91 1d       	adc	r25, r1
    1678:	96 95       	lsr	r25
    167a:	87 95       	ror	r24
    167c:	97 f9       	bld	r25, 7
    167e:	08 95       	ret

00001680 <__fp_nan>:
    1680:	9f ef       	ldi	r25, 0xFF	; 255
    1682:	80 ec       	ldi	r24, 0xC0	; 192
    1684:	08 95       	ret

00001686 <__fp_norm2>:
    1686:	91 50       	subi	r25, 0x01	; 1
    1688:	50 40       	sbci	r21, 0x00	; 0
    168a:	66 0f       	add	r22, r22
    168c:	77 1f       	adc	r23, r23
    168e:	88 1f       	adc	r24, r24
    1690:	d2 f7       	brpl	.-12     	; 0x1686 <__fp_norm2>
    1692:	08 95       	ret

00001694 <malloc>:
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	82 30       	cpi	r24, 0x02	; 2
    169a:	91 05       	cpc	r25, r1
    169c:	10 f4       	brcc	.+4      	; 0x16a2 <malloc+0xe>
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	e0 91 c0 01 	lds	r30, 0x01C0
    16a6:	f0 91 c1 01 	lds	r31, 0x01C1
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	a0 e0       	ldi	r26, 0x00	; 0
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	39 f1       	breq	.+78     	; 0x1704 <malloc+0x70>
    16b6:	40 81       	ld	r20, Z
    16b8:	51 81       	ldd	r21, Z+1	; 0x01
    16ba:	48 17       	cp	r20, r24
    16bc:	59 07       	cpc	r21, r25
    16be:	b8 f0       	brcs	.+46     	; 0x16ee <malloc+0x5a>
    16c0:	48 17       	cp	r20, r24
    16c2:	59 07       	cpc	r21, r25
    16c4:	71 f4       	brne	.+28     	; 0x16e2 <malloc+0x4e>
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	10 97       	sbiw	r26, 0x00	; 0
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <malloc+0x44>
    16ce:	13 96       	adiw	r26, 0x03	; 3
    16d0:	9c 93       	st	X, r25
    16d2:	8e 93       	st	-X, r24
    16d4:	12 97       	sbiw	r26, 0x02	; 2
    16d6:	2c c0       	rjmp	.+88     	; 0x1730 <malloc+0x9c>
    16d8:	90 93 c1 01 	sts	0x01C1, r25
    16dc:	80 93 c0 01 	sts	0x01C0, r24
    16e0:	27 c0       	rjmp	.+78     	; 0x1730 <malloc+0x9c>
    16e2:	21 15       	cp	r18, r1
    16e4:	31 05       	cpc	r19, r1
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <malloc+0x60>
    16e8:	42 17       	cp	r20, r18
    16ea:	53 07       	cpc	r21, r19
    16ec:	18 f0       	brcs	.+6      	; 0x16f4 <malloc+0x60>
    16ee:	a9 01       	movw	r20, r18
    16f0:	db 01       	movw	r26, r22
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <malloc+0x62>
    16f4:	ef 01       	movw	r28, r30
    16f6:	9a 01       	movw	r18, r20
    16f8:	bd 01       	movw	r22, r26
    16fa:	df 01       	movw	r26, r30
    16fc:	02 80       	ldd	r0, Z+2	; 0x02
    16fe:	f3 81       	ldd	r31, Z+3	; 0x03
    1700:	e0 2d       	mov	r30, r0
    1702:	d7 cf       	rjmp	.-82     	; 0x16b2 <malloc+0x1e>
    1704:	21 15       	cp	r18, r1
    1706:	31 05       	cpc	r19, r1
    1708:	f9 f0       	breq	.+62     	; 0x1748 <malloc+0xb4>
    170a:	28 1b       	sub	r18, r24
    170c:	39 0b       	sbc	r19, r25
    170e:	24 30       	cpi	r18, 0x04	; 4
    1710:	31 05       	cpc	r19, r1
    1712:	80 f4       	brcc	.+32     	; 0x1734 <malloc+0xa0>
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	9b 81       	ldd	r25, Y+3	; 0x03
    1718:	61 15       	cp	r22, r1
    171a:	71 05       	cpc	r23, r1
    171c:	21 f0       	breq	.+8      	; 0x1726 <malloc+0x92>
    171e:	fb 01       	movw	r30, r22
    1720:	93 83       	std	Z+3, r25	; 0x03
    1722:	82 83       	std	Z+2, r24	; 0x02
    1724:	04 c0       	rjmp	.+8      	; 0x172e <malloc+0x9a>
    1726:	90 93 c1 01 	sts	0x01C1, r25
    172a:	80 93 c0 01 	sts	0x01C0, r24
    172e:	fe 01       	movw	r30, r28
    1730:	32 96       	adiw	r30, 0x02	; 2
    1732:	44 c0       	rjmp	.+136    	; 0x17bc <malloc+0x128>
    1734:	fe 01       	movw	r30, r28
    1736:	e2 0f       	add	r30, r18
    1738:	f3 1f       	adc	r31, r19
    173a:	81 93       	st	Z+, r24
    173c:	91 93       	st	Z+, r25
    173e:	22 50       	subi	r18, 0x02	; 2
    1740:	31 09       	sbc	r19, r1
    1742:	39 83       	std	Y+1, r19	; 0x01
    1744:	28 83       	st	Y, r18
    1746:	3a c0       	rjmp	.+116    	; 0x17bc <malloc+0x128>
    1748:	20 91 be 01 	lds	r18, 0x01BE
    174c:	30 91 bf 01 	lds	r19, 0x01BF
    1750:	23 2b       	or	r18, r19
    1752:	41 f4       	brne	.+16     	; 0x1764 <malloc+0xd0>
    1754:	20 91 62 00 	lds	r18, 0x0062
    1758:	30 91 63 00 	lds	r19, 0x0063
    175c:	30 93 bf 01 	sts	0x01BF, r19
    1760:	20 93 be 01 	sts	0x01BE, r18
    1764:	20 91 60 00 	lds	r18, 0x0060
    1768:	30 91 61 00 	lds	r19, 0x0061
    176c:	21 15       	cp	r18, r1
    176e:	31 05       	cpc	r19, r1
    1770:	41 f4       	brne	.+16     	; 0x1782 <malloc+0xee>
    1772:	2d b7       	in	r18, 0x3d	; 61
    1774:	3e b7       	in	r19, 0x3e	; 62
    1776:	40 91 64 00 	lds	r20, 0x0064
    177a:	50 91 65 00 	lds	r21, 0x0065
    177e:	24 1b       	sub	r18, r20
    1780:	35 0b       	sbc	r19, r21
    1782:	e0 91 be 01 	lds	r30, 0x01BE
    1786:	f0 91 bf 01 	lds	r31, 0x01BF
    178a:	e2 17       	cp	r30, r18
    178c:	f3 07       	cpc	r31, r19
    178e:	a0 f4       	brcc	.+40     	; 0x17b8 <malloc+0x124>
    1790:	2e 1b       	sub	r18, r30
    1792:	3f 0b       	sbc	r19, r31
    1794:	28 17       	cp	r18, r24
    1796:	39 07       	cpc	r19, r25
    1798:	78 f0       	brcs	.+30     	; 0x17b8 <malloc+0x124>
    179a:	ac 01       	movw	r20, r24
    179c:	4e 5f       	subi	r20, 0xFE	; 254
    179e:	5f 4f       	sbci	r21, 0xFF	; 255
    17a0:	24 17       	cp	r18, r20
    17a2:	35 07       	cpc	r19, r21
    17a4:	48 f0       	brcs	.+18     	; 0x17b8 <malloc+0x124>
    17a6:	4e 0f       	add	r20, r30
    17a8:	5f 1f       	adc	r21, r31
    17aa:	50 93 bf 01 	sts	0x01BF, r21
    17ae:	40 93 be 01 	sts	0x01BE, r20
    17b2:	81 93       	st	Z+, r24
    17b4:	91 93       	st	Z+, r25
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <malloc+0x128>
    17b8:	e0 e0       	ldi	r30, 0x00	; 0
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	cf 01       	movw	r24, r30
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <free>:
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	09 f4       	brne	.+2      	; 0x17ce <free+0xa>
    17cc:	87 c0       	rjmp	.+270    	; 0x18dc <free+0x118>
    17ce:	fc 01       	movw	r30, r24
    17d0:	32 97       	sbiw	r30, 0x02	; 2
    17d2:	13 82       	std	Z+3, r1	; 0x03
    17d4:	12 82       	std	Z+2, r1	; 0x02
    17d6:	c0 91 c0 01 	lds	r28, 0x01C0
    17da:	d0 91 c1 01 	lds	r29, 0x01C1
    17de:	20 97       	sbiw	r28, 0x00	; 0
    17e0:	81 f4       	brne	.+32     	; 0x1802 <free+0x3e>
    17e2:	20 81       	ld	r18, Z
    17e4:	31 81       	ldd	r19, Z+1	; 0x01
    17e6:	28 0f       	add	r18, r24
    17e8:	39 1f       	adc	r19, r25
    17ea:	80 91 be 01 	lds	r24, 0x01BE
    17ee:	90 91 bf 01 	lds	r25, 0x01BF
    17f2:	82 17       	cp	r24, r18
    17f4:	93 07       	cpc	r25, r19
    17f6:	79 f5       	brne	.+94     	; 0x1856 <free+0x92>
    17f8:	f0 93 bf 01 	sts	0x01BF, r31
    17fc:	e0 93 be 01 	sts	0x01BE, r30
    1800:	6d c0       	rjmp	.+218    	; 0x18dc <free+0x118>
    1802:	de 01       	movw	r26, r28
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	ae 17       	cp	r26, r30
    180a:	bf 07       	cpc	r27, r31
    180c:	50 f4       	brcc	.+20     	; 0x1822 <free+0x5e>
    180e:	12 96       	adiw	r26, 0x02	; 2
    1810:	4d 91       	ld	r20, X+
    1812:	5c 91       	ld	r21, X
    1814:	13 97       	sbiw	r26, 0x03	; 3
    1816:	9d 01       	movw	r18, r26
    1818:	41 15       	cp	r20, r1
    181a:	51 05       	cpc	r21, r1
    181c:	09 f1       	breq	.+66     	; 0x1860 <free+0x9c>
    181e:	da 01       	movw	r26, r20
    1820:	f3 cf       	rjmp	.-26     	; 0x1808 <free+0x44>
    1822:	b3 83       	std	Z+3, r27	; 0x03
    1824:	a2 83       	std	Z+2, r26	; 0x02
    1826:	40 81       	ld	r20, Z
    1828:	51 81       	ldd	r21, Z+1	; 0x01
    182a:	84 0f       	add	r24, r20
    182c:	95 1f       	adc	r25, r21
    182e:	8a 17       	cp	r24, r26
    1830:	9b 07       	cpc	r25, r27
    1832:	71 f4       	brne	.+28     	; 0x1850 <free+0x8c>
    1834:	8d 91       	ld	r24, X+
    1836:	9c 91       	ld	r25, X
    1838:	11 97       	sbiw	r26, 0x01	; 1
    183a:	84 0f       	add	r24, r20
    183c:	95 1f       	adc	r25, r21
    183e:	02 96       	adiw	r24, 0x02	; 2
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
    1844:	12 96       	adiw	r26, 0x02	; 2
    1846:	8d 91       	ld	r24, X+
    1848:	9c 91       	ld	r25, X
    184a:	13 97       	sbiw	r26, 0x03	; 3
    184c:	93 83       	std	Z+3, r25	; 0x03
    184e:	82 83       	std	Z+2, r24	; 0x02
    1850:	21 15       	cp	r18, r1
    1852:	31 05       	cpc	r19, r1
    1854:	29 f4       	brne	.+10     	; 0x1860 <free+0x9c>
    1856:	f0 93 c1 01 	sts	0x01C1, r31
    185a:	e0 93 c0 01 	sts	0x01C0, r30
    185e:	3e c0       	rjmp	.+124    	; 0x18dc <free+0x118>
    1860:	d9 01       	movw	r26, r18
    1862:	13 96       	adiw	r26, 0x03	; 3
    1864:	fc 93       	st	X, r31
    1866:	ee 93       	st	-X, r30
    1868:	12 97       	sbiw	r26, 0x02	; 2
    186a:	4d 91       	ld	r20, X+
    186c:	5d 91       	ld	r21, X+
    186e:	a4 0f       	add	r26, r20
    1870:	b5 1f       	adc	r27, r21
    1872:	ea 17       	cp	r30, r26
    1874:	fb 07       	cpc	r31, r27
    1876:	79 f4       	brne	.+30     	; 0x1896 <free+0xd2>
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	84 0f       	add	r24, r20
    187e:	95 1f       	adc	r25, r21
    1880:	02 96       	adiw	r24, 0x02	; 2
    1882:	d9 01       	movw	r26, r18
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	9c 93       	st	X, r25
    1888:	8e 93       	st	-X, r24
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	13 96       	adiw	r26, 0x03	; 3
    1890:	9c 93       	st	X, r25
    1892:	8e 93       	st	-X, r24
    1894:	12 97       	sbiw	r26, 0x02	; 2
    1896:	e0 e0       	ldi	r30, 0x00	; 0
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <free+0xe4>
    18a2:	fe 01       	movw	r30, r28
    18a4:	ec 01       	movw	r28, r24
    18a6:	f9 cf       	rjmp	.-14     	; 0x189a <free+0xd6>
    18a8:	ce 01       	movw	r24, r28
    18aa:	02 96       	adiw	r24, 0x02	; 2
    18ac:	28 81       	ld	r18, Y
    18ae:	39 81       	ldd	r19, Y+1	; 0x01
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	20 91 be 01 	lds	r18, 0x01BE
    18b8:	30 91 bf 01 	lds	r19, 0x01BF
    18bc:	28 17       	cp	r18, r24
    18be:	39 07       	cpc	r19, r25
    18c0:	69 f4       	brne	.+26     	; 0x18dc <free+0x118>
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <free+0x10c>
    18c6:	10 92 c1 01 	sts	0x01C1, r1
    18ca:	10 92 c0 01 	sts	0x01C0, r1
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <free+0x110>
    18d0:	13 82       	std	Z+3, r1	; 0x03
    18d2:	12 82       	std	Z+2, r1	; 0x02
    18d4:	d0 93 bf 01 	sts	0x01BF, r29
    18d8:	c0 93 be 01 	sts	0x01BE, r28
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <snprintf>:
    18e2:	ae e0       	ldi	r26, 0x0E	; 14
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e6 e7       	ldi	r30, 0x76	; 118
    18e8:	fc e0       	ldi	r31, 0x0C	; 12
    18ea:	9f c2       	rjmp	.+1342   	; 0x1e2a <__prologue_saves__+0x1c>
    18ec:	0d 89       	ldd	r16, Y+21	; 0x15
    18ee:	1e 89       	ldd	r17, Y+22	; 0x16
    18f0:	8f 89       	ldd	r24, Y+23	; 0x17
    18f2:	98 8d       	ldd	r25, Y+24	; 0x18
    18f4:	26 e0       	ldi	r18, 0x06	; 6
    18f6:	2c 83       	std	Y+4, r18	; 0x04
    18f8:	1a 83       	std	Y+2, r17	; 0x02
    18fa:	09 83       	std	Y+1, r16	; 0x01
    18fc:	97 ff       	sbrs	r25, 7
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <snprintf+0x22>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e8       	ldi	r25, 0x80	; 128
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9e 83       	std	Y+6, r25	; 0x06
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	ae 01       	movw	r20, r28
    190c:	45 5e       	subi	r20, 0xE5	; 229
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	69 8d       	ldd	r22, Y+25	; 0x19
    1912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1914:	ce 01       	movw	r24, r28
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	11 d0       	rcall	.+34     	; 0x193c <vfprintf>
    191a:	4d 81       	ldd	r20, Y+5	; 0x05
    191c:	5e 81       	ldd	r21, Y+6	; 0x06
    191e:	57 fd       	sbrc	r21, 7
    1920:	0a c0       	rjmp	.+20     	; 0x1936 <snprintf+0x54>
    1922:	2f 81       	ldd	r18, Y+7	; 0x07
    1924:	38 85       	ldd	r19, Y+8	; 0x08
    1926:	42 17       	cp	r20, r18
    1928:	53 07       	cpc	r21, r19
    192a:	0c f4       	brge	.+2      	; 0x192e <snprintf+0x4c>
    192c:	9a 01       	movw	r18, r20
    192e:	f8 01       	movw	r30, r16
    1930:	e2 0f       	add	r30, r18
    1932:	f3 1f       	adc	r31, r19
    1934:	10 82       	st	Z, r1
    1936:	2e 96       	adiw	r28, 0x0e	; 14
    1938:	e4 e0       	ldi	r30, 0x04	; 4
    193a:	93 c2       	rjmp	.+1318   	; 0x1e62 <__epilogue_restores__+0x1c>

0000193c <vfprintf>:
    193c:	ac e0       	ldi	r26, 0x0C	; 12
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e3 ea       	ldi	r30, 0xA3	; 163
    1942:	fc e0       	ldi	r31, 0x0C	; 12
    1944:	64 c2       	rjmp	.+1224   	; 0x1e0e <__prologue_saves__>
    1946:	7c 01       	movw	r14, r24
    1948:	6b 01       	movw	r12, r22
    194a:	8a 01       	movw	r16, r20
    194c:	fc 01       	movw	r30, r24
    194e:	17 82       	std	Z+7, r1	; 0x07
    1950:	16 82       	std	Z+6, r1	; 0x06
    1952:	83 81       	ldd	r24, Z+3	; 0x03
    1954:	81 ff       	sbrs	r24, 1
    1956:	b0 c1       	rjmp	.+864    	; 0x1cb8 <vfprintf+0x37c>
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	4c 01       	movw	r8, r24
    195e:	f7 01       	movw	r30, r14
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	f6 01       	movw	r30, r12
    1964:	93 fd       	sbrc	r25, 3
    1966:	85 91       	lpm	r24, Z+
    1968:	93 ff       	sbrs	r25, 3
    196a:	81 91       	ld	r24, Z+
    196c:	6f 01       	movw	r12, r30
    196e:	88 23       	and	r24, r24
    1970:	09 f4       	brne	.+2      	; 0x1974 <vfprintf+0x38>
    1972:	9e c1       	rjmp	.+828    	; 0x1cb0 <vfprintf+0x374>
    1974:	85 32       	cpi	r24, 0x25	; 37
    1976:	39 f4       	brne	.+14     	; 0x1986 <vfprintf+0x4a>
    1978:	93 fd       	sbrc	r25, 3
    197a:	85 91       	lpm	r24, Z+
    197c:	93 ff       	sbrs	r25, 3
    197e:	81 91       	ld	r24, Z+
    1980:	6f 01       	movw	r12, r30
    1982:	85 32       	cpi	r24, 0x25	; 37
    1984:	21 f4       	brne	.+8      	; 0x198e <vfprintf+0x52>
    1986:	b7 01       	movw	r22, r14
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	b1 d1       	rcall	.+866    	; 0x1cee <fputc>
    198c:	e8 cf       	rjmp	.-48     	; 0x195e <vfprintf+0x22>
    198e:	51 2c       	mov	r5, r1
    1990:	31 2c       	mov	r3, r1
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	20 32       	cpi	r18, 0x20	; 32
    1996:	a0 f4       	brcc	.+40     	; 0x19c0 <vfprintf+0x84>
    1998:	8b 32       	cpi	r24, 0x2B	; 43
    199a:	69 f0       	breq	.+26     	; 0x19b6 <vfprintf+0x7a>
    199c:	30 f4       	brcc	.+12     	; 0x19aa <vfprintf+0x6e>
    199e:	80 32       	cpi	r24, 0x20	; 32
    19a0:	59 f0       	breq	.+22     	; 0x19b8 <vfprintf+0x7c>
    19a2:	83 32       	cpi	r24, 0x23	; 35
    19a4:	69 f4       	brne	.+26     	; 0x19c0 <vfprintf+0x84>
    19a6:	20 61       	ori	r18, 0x10	; 16
    19a8:	2c c0       	rjmp	.+88     	; 0x1a02 <vfprintf+0xc6>
    19aa:	8d 32       	cpi	r24, 0x2D	; 45
    19ac:	39 f0       	breq	.+14     	; 0x19bc <vfprintf+0x80>
    19ae:	80 33       	cpi	r24, 0x30	; 48
    19b0:	39 f4       	brne	.+14     	; 0x19c0 <vfprintf+0x84>
    19b2:	21 60       	ori	r18, 0x01	; 1
    19b4:	26 c0       	rjmp	.+76     	; 0x1a02 <vfprintf+0xc6>
    19b6:	22 60       	ori	r18, 0x02	; 2
    19b8:	24 60       	ori	r18, 0x04	; 4
    19ba:	23 c0       	rjmp	.+70     	; 0x1a02 <vfprintf+0xc6>
    19bc:	28 60       	ori	r18, 0x08	; 8
    19be:	21 c0       	rjmp	.+66     	; 0x1a02 <vfprintf+0xc6>
    19c0:	27 fd       	sbrc	r18, 7
    19c2:	27 c0       	rjmp	.+78     	; 0x1a12 <vfprintf+0xd6>
    19c4:	30 ed       	ldi	r19, 0xD0	; 208
    19c6:	38 0f       	add	r19, r24
    19c8:	3a 30       	cpi	r19, 0x0A	; 10
    19ca:	78 f4       	brcc	.+30     	; 0x19ea <vfprintf+0xae>
    19cc:	26 ff       	sbrs	r18, 6
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <vfprintf+0xa0>
    19d0:	fa e0       	ldi	r31, 0x0A	; 10
    19d2:	5f 9e       	mul	r5, r31
    19d4:	30 0d       	add	r19, r0
    19d6:	11 24       	eor	r1, r1
    19d8:	53 2e       	mov	r5, r19
    19da:	13 c0       	rjmp	.+38     	; 0x1a02 <vfprintf+0xc6>
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
    19de:	38 9e       	mul	r3, r24
    19e0:	30 0d       	add	r19, r0
    19e2:	11 24       	eor	r1, r1
    19e4:	33 2e       	mov	r3, r19
    19e6:	20 62       	ori	r18, 0x20	; 32
    19e8:	0c c0       	rjmp	.+24     	; 0x1a02 <vfprintf+0xc6>
    19ea:	8e 32       	cpi	r24, 0x2E	; 46
    19ec:	21 f4       	brne	.+8      	; 0x19f6 <vfprintf+0xba>
    19ee:	26 fd       	sbrc	r18, 6
    19f0:	5f c1       	rjmp	.+702    	; 0x1cb0 <vfprintf+0x374>
    19f2:	20 64       	ori	r18, 0x40	; 64
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <vfprintf+0xc6>
    19f6:	8c 36       	cpi	r24, 0x6C	; 108
    19f8:	11 f4       	brne	.+4      	; 0x19fe <vfprintf+0xc2>
    19fa:	20 68       	ori	r18, 0x80	; 128
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <vfprintf+0xc6>
    19fe:	88 36       	cpi	r24, 0x68	; 104
    1a00:	41 f4       	brne	.+16     	; 0x1a12 <vfprintf+0xd6>
    1a02:	f6 01       	movw	r30, r12
    1a04:	93 fd       	sbrc	r25, 3
    1a06:	85 91       	lpm	r24, Z+
    1a08:	93 ff       	sbrs	r25, 3
    1a0a:	81 91       	ld	r24, Z+
    1a0c:	6f 01       	movw	r12, r30
    1a0e:	81 11       	cpse	r24, r1
    1a10:	c1 cf       	rjmp	.-126    	; 0x1994 <vfprintf+0x58>
    1a12:	98 2f       	mov	r25, r24
    1a14:	9f 7d       	andi	r25, 0xDF	; 223
    1a16:	95 54       	subi	r25, 0x45	; 69
    1a18:	93 30       	cpi	r25, 0x03	; 3
    1a1a:	28 f4       	brcc	.+10     	; 0x1a26 <vfprintf+0xea>
    1a1c:	0c 5f       	subi	r16, 0xFC	; 252
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	ff e3       	ldi	r31, 0x3F	; 63
    1a22:	f9 83       	std	Y+1, r31	; 0x01
    1a24:	0d c0       	rjmp	.+26     	; 0x1a40 <vfprintf+0x104>
    1a26:	83 36       	cpi	r24, 0x63	; 99
    1a28:	31 f0       	breq	.+12     	; 0x1a36 <vfprintf+0xfa>
    1a2a:	83 37       	cpi	r24, 0x73	; 115
    1a2c:	71 f0       	breq	.+28     	; 0x1a4a <vfprintf+0x10e>
    1a2e:	83 35       	cpi	r24, 0x53	; 83
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <vfprintf+0xf8>
    1a32:	57 c0       	rjmp	.+174    	; 0x1ae2 <vfprintf+0x1a6>
    1a34:	21 c0       	rjmp	.+66     	; 0x1a78 <vfprintf+0x13c>
    1a36:	f8 01       	movw	r30, r16
    1a38:	80 81       	ld	r24, Z
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	0e 5f       	subi	r16, 0xFE	; 254
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	44 24       	eor	r4, r4
    1a42:	43 94       	inc	r4
    1a44:	51 2c       	mov	r5, r1
    1a46:	54 01       	movw	r10, r8
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <vfprintf+0x136>
    1a4a:	38 01       	movw	r6, r16
    1a4c:	f2 e0       	ldi	r31, 0x02	; 2
    1a4e:	6f 0e       	add	r6, r31
    1a50:	71 1c       	adc	r7, r1
    1a52:	f8 01       	movw	r30, r16
    1a54:	a0 80       	ld	r10, Z
    1a56:	b1 80       	ldd	r11, Z+1	; 0x01
    1a58:	26 ff       	sbrs	r18, 6
    1a5a:	03 c0       	rjmp	.+6      	; 0x1a62 <vfprintf+0x126>
    1a5c:	65 2d       	mov	r22, r5
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <vfprintf+0x12a>
    1a62:	6f ef       	ldi	r22, 0xFF	; 255
    1a64:	7f ef       	ldi	r23, 0xFF	; 255
    1a66:	c5 01       	movw	r24, r10
    1a68:	2c 87       	std	Y+12, r18	; 0x0c
    1a6a:	36 d1       	rcall	.+620    	; 0x1cd8 <strnlen>
    1a6c:	2c 01       	movw	r4, r24
    1a6e:	83 01       	movw	r16, r6
    1a70:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a72:	2f 77       	andi	r18, 0x7F	; 127
    1a74:	22 2e       	mov	r2, r18
    1a76:	16 c0       	rjmp	.+44     	; 0x1aa4 <vfprintf+0x168>
    1a78:	38 01       	movw	r6, r16
    1a7a:	f2 e0       	ldi	r31, 0x02	; 2
    1a7c:	6f 0e       	add	r6, r31
    1a7e:	71 1c       	adc	r7, r1
    1a80:	f8 01       	movw	r30, r16
    1a82:	a0 80       	ld	r10, Z
    1a84:	b1 80       	ldd	r11, Z+1	; 0x01
    1a86:	26 ff       	sbrs	r18, 6
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <vfprintf+0x154>
    1a8a:	65 2d       	mov	r22, r5
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <vfprintf+0x158>
    1a90:	6f ef       	ldi	r22, 0xFF	; 255
    1a92:	7f ef       	ldi	r23, 0xFF	; 255
    1a94:	c5 01       	movw	r24, r10
    1a96:	2c 87       	std	Y+12, r18	; 0x0c
    1a98:	14 d1       	rcall	.+552    	; 0x1cc2 <strnlen_P>
    1a9a:	2c 01       	movw	r4, r24
    1a9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a9e:	20 68       	ori	r18, 0x80	; 128
    1aa0:	22 2e       	mov	r2, r18
    1aa2:	83 01       	movw	r16, r6
    1aa4:	23 fc       	sbrc	r2, 3
    1aa6:	19 c0       	rjmp	.+50     	; 0x1ada <vfprintf+0x19e>
    1aa8:	83 2d       	mov	r24, r3
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	48 16       	cp	r4, r24
    1aae:	59 06       	cpc	r5, r25
    1ab0:	a0 f4       	brcc	.+40     	; 0x1ada <vfprintf+0x19e>
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	80 e2       	ldi	r24, 0x20	; 32
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	1a d1       	rcall	.+564    	; 0x1cee <fputc>
    1aba:	3a 94       	dec	r3
    1abc:	f5 cf       	rjmp	.-22     	; 0x1aa8 <vfprintf+0x16c>
    1abe:	f5 01       	movw	r30, r10
    1ac0:	27 fc       	sbrc	r2, 7
    1ac2:	85 91       	lpm	r24, Z+
    1ac4:	27 fe       	sbrs	r2, 7
    1ac6:	81 91       	ld	r24, Z+
    1ac8:	5f 01       	movw	r10, r30
    1aca:	b7 01       	movw	r22, r14
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0f d1       	rcall	.+542    	; 0x1cee <fputc>
    1ad0:	31 10       	cpse	r3, r1
    1ad2:	3a 94       	dec	r3
    1ad4:	f1 e0       	ldi	r31, 0x01	; 1
    1ad6:	4f 1a       	sub	r4, r31
    1ad8:	51 08       	sbc	r5, r1
    1ada:	41 14       	cp	r4, r1
    1adc:	51 04       	cpc	r5, r1
    1ade:	79 f7       	brne	.-34     	; 0x1abe <vfprintf+0x182>
    1ae0:	de c0       	rjmp	.+444    	; 0x1c9e <vfprintf+0x362>
    1ae2:	84 36       	cpi	r24, 0x64	; 100
    1ae4:	11 f0       	breq	.+4      	; 0x1aea <vfprintf+0x1ae>
    1ae6:	89 36       	cpi	r24, 0x69	; 105
    1ae8:	31 f5       	brne	.+76     	; 0x1b36 <vfprintf+0x1fa>
    1aea:	f8 01       	movw	r30, r16
    1aec:	27 ff       	sbrs	r18, 7
    1aee:	07 c0       	rjmp	.+14     	; 0x1afe <vfprintf+0x1c2>
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	0c 5f       	subi	r16, 0xFC	; 252
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	08 c0       	rjmp	.+16     	; 0x1b0e <vfprintf+0x1d2>
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	88 27       	eor	r24, r24
    1b04:	77 fd       	sbrc	r23, 7
    1b06:	80 95       	com	r24
    1b08:	98 2f       	mov	r25, r24
    1b0a:	0e 5f       	subi	r16, 0xFE	; 254
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	2f 76       	andi	r18, 0x6F	; 111
    1b10:	b2 2e       	mov	r11, r18
    1b12:	97 ff       	sbrs	r25, 7
    1b14:	09 c0       	rjmp	.+18     	; 0x1b28 <vfprintf+0x1ec>
    1b16:	90 95       	com	r25
    1b18:	80 95       	com	r24
    1b1a:	70 95       	com	r23
    1b1c:	61 95       	neg	r22
    1b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b20:	8f 4f       	sbci	r24, 0xFF	; 255
    1b22:	9f 4f       	sbci	r25, 0xFF	; 255
    1b24:	20 68       	ori	r18, 0x80	; 128
    1b26:	b2 2e       	mov	r11, r18
    1b28:	2a e0       	ldi	r18, 0x0A	; 10
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	a4 01       	movw	r20, r8
    1b2e:	11 d1       	rcall	.+546    	; 0x1d52 <__ultoa_invert>
    1b30:	a8 2e       	mov	r10, r24
    1b32:	a8 18       	sub	r10, r8
    1b34:	43 c0       	rjmp	.+134    	; 0x1bbc <vfprintf+0x280>
    1b36:	85 37       	cpi	r24, 0x75	; 117
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <vfprintf+0x208>
    1b3a:	2f 7e       	andi	r18, 0xEF	; 239
    1b3c:	b2 2e       	mov	r11, r18
    1b3e:	2a e0       	ldi	r18, 0x0A	; 10
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	25 c0       	rjmp	.+74     	; 0x1b8e <vfprintf+0x252>
    1b44:	f2 2f       	mov	r31, r18
    1b46:	f9 7f       	andi	r31, 0xF9	; 249
    1b48:	bf 2e       	mov	r11, r31
    1b4a:	8f 36       	cpi	r24, 0x6F	; 111
    1b4c:	c1 f0       	breq	.+48     	; 0x1b7e <vfprintf+0x242>
    1b4e:	18 f4       	brcc	.+6      	; 0x1b56 <vfprintf+0x21a>
    1b50:	88 35       	cpi	r24, 0x58	; 88
    1b52:	79 f0       	breq	.+30     	; 0x1b72 <vfprintf+0x236>
    1b54:	ad c0       	rjmp	.+346    	; 0x1cb0 <vfprintf+0x374>
    1b56:	80 37       	cpi	r24, 0x70	; 112
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <vfprintf+0x224>
    1b5a:	88 37       	cpi	r24, 0x78	; 120
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <vfprintf+0x22a>
    1b5e:	a8 c0       	rjmp	.+336    	; 0x1cb0 <vfprintf+0x374>
    1b60:	2f 2f       	mov	r18, r31
    1b62:	20 61       	ori	r18, 0x10	; 16
    1b64:	b2 2e       	mov	r11, r18
    1b66:	b4 fe       	sbrs	r11, 4
    1b68:	0d c0       	rjmp	.+26     	; 0x1b84 <vfprintf+0x248>
    1b6a:	8b 2d       	mov	r24, r11
    1b6c:	84 60       	ori	r24, 0x04	; 4
    1b6e:	b8 2e       	mov	r11, r24
    1b70:	09 c0       	rjmp	.+18     	; 0x1b84 <vfprintf+0x248>
    1b72:	24 ff       	sbrs	r18, 4
    1b74:	0a c0       	rjmp	.+20     	; 0x1b8a <vfprintf+0x24e>
    1b76:	9f 2f       	mov	r25, r31
    1b78:	96 60       	ori	r25, 0x06	; 6
    1b7a:	b9 2e       	mov	r11, r25
    1b7c:	06 c0       	rjmp	.+12     	; 0x1b8a <vfprintf+0x24e>
    1b7e:	28 e0       	ldi	r18, 0x08	; 8
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	05 c0       	rjmp	.+10     	; 0x1b8e <vfprintf+0x252>
    1b84:	20 e1       	ldi	r18, 0x10	; 16
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <vfprintf+0x252>
    1b8a:	20 e1       	ldi	r18, 0x10	; 16
    1b8c:	32 e0       	ldi	r19, 0x02	; 2
    1b8e:	f8 01       	movw	r30, r16
    1b90:	b7 fe       	sbrs	r11, 7
    1b92:	07 c0       	rjmp	.+14     	; 0x1ba2 <vfprintf+0x266>
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	0c 5f       	subi	r16, 0xFC	; 252
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <vfprintf+0x272>
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 5f       	subi	r16, 0xFE	; 254
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	a4 01       	movw	r20, r8
    1bb0:	d0 d0       	rcall	.+416    	; 0x1d52 <__ultoa_invert>
    1bb2:	a8 2e       	mov	r10, r24
    1bb4:	a8 18       	sub	r10, r8
    1bb6:	fb 2d       	mov	r31, r11
    1bb8:	ff 77       	andi	r31, 0x7F	; 127
    1bba:	bf 2e       	mov	r11, r31
    1bbc:	b6 fe       	sbrs	r11, 6
    1bbe:	0b c0       	rjmp	.+22     	; 0x1bd6 <vfprintf+0x29a>
    1bc0:	2b 2d       	mov	r18, r11
    1bc2:	2e 7f       	andi	r18, 0xFE	; 254
    1bc4:	a5 14       	cp	r10, r5
    1bc6:	50 f4       	brcc	.+20     	; 0x1bdc <vfprintf+0x2a0>
    1bc8:	b4 fe       	sbrs	r11, 4
    1bca:	0a c0       	rjmp	.+20     	; 0x1be0 <vfprintf+0x2a4>
    1bcc:	b2 fc       	sbrc	r11, 2
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <vfprintf+0x2a4>
    1bd0:	2b 2d       	mov	r18, r11
    1bd2:	2e 7e       	andi	r18, 0xEE	; 238
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <vfprintf+0x2a4>
    1bd6:	7a 2c       	mov	r7, r10
    1bd8:	2b 2d       	mov	r18, r11
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <vfprintf+0x2a6>
    1bdc:	7a 2c       	mov	r7, r10
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <vfprintf+0x2a6>
    1be0:	75 2c       	mov	r7, r5
    1be2:	24 ff       	sbrs	r18, 4
    1be4:	0d c0       	rjmp	.+26     	; 0x1c00 <vfprintf+0x2c4>
    1be6:	fe 01       	movw	r30, r28
    1be8:	ea 0d       	add	r30, r10
    1bea:	f1 1d       	adc	r31, r1
    1bec:	80 81       	ld	r24, Z
    1bee:	80 33       	cpi	r24, 0x30	; 48
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <vfprintf+0x2ba>
    1bf2:	29 7e       	andi	r18, 0xE9	; 233
    1bf4:	09 c0       	rjmp	.+18     	; 0x1c08 <vfprintf+0x2cc>
    1bf6:	22 ff       	sbrs	r18, 2
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <vfprintf+0x2ca>
    1bfa:	73 94       	inc	r7
    1bfc:	73 94       	inc	r7
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <vfprintf+0x2cc>
    1c00:	82 2f       	mov	r24, r18
    1c02:	86 78       	andi	r24, 0x86	; 134
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <vfprintf+0x2cc>
    1c06:	73 94       	inc	r7
    1c08:	23 fd       	sbrc	r18, 3
    1c0a:	12 c0       	rjmp	.+36     	; 0x1c30 <vfprintf+0x2f4>
    1c0c:	20 ff       	sbrs	r18, 0
    1c0e:	06 c0       	rjmp	.+12     	; 0x1c1c <vfprintf+0x2e0>
    1c10:	5a 2c       	mov	r5, r10
    1c12:	73 14       	cp	r7, r3
    1c14:	18 f4       	brcc	.+6      	; 0x1c1c <vfprintf+0x2e0>
    1c16:	53 0c       	add	r5, r3
    1c18:	57 18       	sub	r5, r7
    1c1a:	73 2c       	mov	r7, r3
    1c1c:	73 14       	cp	r7, r3
    1c1e:	60 f4       	brcc	.+24     	; 0x1c38 <vfprintf+0x2fc>
    1c20:	b7 01       	movw	r22, r14
    1c22:	80 e2       	ldi	r24, 0x20	; 32
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	2c 87       	std	Y+12, r18	; 0x0c
    1c28:	62 d0       	rcall	.+196    	; 0x1cee <fputc>
    1c2a:	73 94       	inc	r7
    1c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c2e:	f6 cf       	rjmp	.-20     	; 0x1c1c <vfprintf+0x2e0>
    1c30:	73 14       	cp	r7, r3
    1c32:	10 f4       	brcc	.+4      	; 0x1c38 <vfprintf+0x2fc>
    1c34:	37 18       	sub	r3, r7
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <vfprintf+0x2fe>
    1c38:	31 2c       	mov	r3, r1
    1c3a:	24 ff       	sbrs	r18, 4
    1c3c:	11 c0       	rjmp	.+34     	; 0x1c60 <vfprintf+0x324>
    1c3e:	b7 01       	movw	r22, r14
    1c40:	80 e3       	ldi	r24, 0x30	; 48
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	2c 87       	std	Y+12, r18	; 0x0c
    1c46:	53 d0       	rcall	.+166    	; 0x1cee <fputc>
    1c48:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c4a:	22 ff       	sbrs	r18, 2
    1c4c:	16 c0       	rjmp	.+44     	; 0x1c7a <vfprintf+0x33e>
    1c4e:	21 ff       	sbrs	r18, 1
    1c50:	03 c0       	rjmp	.+6      	; 0x1c58 <vfprintf+0x31c>
    1c52:	88 e5       	ldi	r24, 0x58	; 88
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <vfprintf+0x320>
    1c58:	88 e7       	ldi	r24, 0x78	; 120
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	b7 01       	movw	r22, r14
    1c5e:	0c c0       	rjmp	.+24     	; 0x1c78 <vfprintf+0x33c>
    1c60:	82 2f       	mov	r24, r18
    1c62:	86 78       	andi	r24, 0x86	; 134
    1c64:	51 f0       	breq	.+20     	; 0x1c7a <vfprintf+0x33e>
    1c66:	21 fd       	sbrc	r18, 1
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <vfprintf+0x332>
    1c6a:	80 e2       	ldi	r24, 0x20	; 32
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <vfprintf+0x334>
    1c6e:	8b e2       	ldi	r24, 0x2B	; 43
    1c70:	27 fd       	sbrc	r18, 7
    1c72:	8d e2       	ldi	r24, 0x2D	; 45
    1c74:	b7 01       	movw	r22, r14
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	3a d0       	rcall	.+116    	; 0x1cee <fputc>
    1c7a:	a5 14       	cp	r10, r5
    1c7c:	30 f4       	brcc	.+12     	; 0x1c8a <vfprintf+0x34e>
    1c7e:	b7 01       	movw	r22, r14
    1c80:	80 e3       	ldi	r24, 0x30	; 48
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	34 d0       	rcall	.+104    	; 0x1cee <fputc>
    1c86:	5a 94       	dec	r5
    1c88:	f8 cf       	rjmp	.-16     	; 0x1c7a <vfprintf+0x33e>
    1c8a:	aa 94       	dec	r10
    1c8c:	f4 01       	movw	r30, r8
    1c8e:	ea 0d       	add	r30, r10
    1c90:	f1 1d       	adc	r31, r1
    1c92:	80 81       	ld	r24, Z
    1c94:	b7 01       	movw	r22, r14
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	2a d0       	rcall	.+84     	; 0x1cee <fputc>
    1c9a:	a1 10       	cpse	r10, r1
    1c9c:	f6 cf       	rjmp	.-20     	; 0x1c8a <vfprintf+0x34e>
    1c9e:	33 20       	and	r3, r3
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <vfprintf+0x368>
    1ca2:	5d ce       	rjmp	.-838    	; 0x195e <vfprintf+0x22>
    1ca4:	b7 01       	movw	r22, r14
    1ca6:	80 e2       	ldi	r24, 0x20	; 32
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	21 d0       	rcall	.+66     	; 0x1cee <fputc>
    1cac:	3a 94       	dec	r3
    1cae:	f7 cf       	rjmp	.-18     	; 0x1c9e <vfprintf+0x362>
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	86 81       	ldd	r24, Z+6	; 0x06
    1cb4:	97 81       	ldd	r25, Z+7	; 0x07
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x380>
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	9f ef       	ldi	r25, 0xFF	; 255
    1cbc:	2c 96       	adiw	r28, 0x0c	; 12
    1cbe:	e2 e1       	ldi	r30, 0x12	; 18
    1cc0:	c2 c0       	rjmp	.+388    	; 0x1e46 <__epilogue_restores__>

00001cc2 <strnlen_P>:
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	05 90       	lpm	r0, Z+
    1cc6:	61 50       	subi	r22, 0x01	; 1
    1cc8:	70 40       	sbci	r23, 0x00	; 0
    1cca:	01 10       	cpse	r0, r1
    1ccc:	d8 f7       	brcc	.-10     	; 0x1cc4 <strnlen_P+0x2>
    1cce:	80 95       	com	r24
    1cd0:	90 95       	com	r25
    1cd2:	8e 0f       	add	r24, r30
    1cd4:	9f 1f       	adc	r25, r31
    1cd6:	08 95       	ret

00001cd8 <strnlen>:
    1cd8:	fc 01       	movw	r30, r24
    1cda:	61 50       	subi	r22, 0x01	; 1
    1cdc:	70 40       	sbci	r23, 0x00	; 0
    1cde:	01 90       	ld	r0, Z+
    1ce0:	01 10       	cpse	r0, r1
    1ce2:	d8 f7       	brcc	.-10     	; 0x1cda <strnlen+0x2>
    1ce4:	80 95       	com	r24
    1ce6:	90 95       	com	r25
    1ce8:	8e 0f       	add	r24, r30
    1cea:	9f 1f       	adc	r25, r31
    1cec:	08 95       	ret

00001cee <fputc>:
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	18 2f       	mov	r17, r24
    1cf8:	09 2f       	mov	r16, r25
    1cfa:	eb 01       	movw	r28, r22
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	81 fd       	sbrc	r24, 1
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <fputc+0x1a>
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	20 c0       	rjmp	.+64     	; 0x1d48 <fputc+0x5a>
    1d08:	82 ff       	sbrs	r24, 2
    1d0a:	10 c0       	rjmp	.+32     	; 0x1d2c <fputc+0x3e>
    1d0c:	4e 81       	ldd	r20, Y+6	; 0x06
    1d0e:	5f 81       	ldd	r21, Y+7	; 0x07
    1d10:	2c 81       	ldd	r18, Y+4	; 0x04
    1d12:	3d 81       	ldd	r19, Y+5	; 0x05
    1d14:	42 17       	cp	r20, r18
    1d16:	53 07       	cpc	r21, r19
    1d18:	7c f4       	brge	.+30     	; 0x1d38 <fputc+0x4a>
    1d1a:	e8 81       	ld	r30, Y
    1d1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d1e:	9f 01       	movw	r18, r30
    1d20:	2f 5f       	subi	r18, 0xFF	; 255
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	39 83       	std	Y+1, r19	; 0x01
    1d26:	28 83       	st	Y, r18
    1d28:	10 83       	st	Z, r17
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <fputc+0x4a>
    1d2c:	e8 85       	ldd	r30, Y+8	; 0x08
    1d2e:	f9 85       	ldd	r31, Y+9	; 0x09
    1d30:	81 2f       	mov	r24, r17
    1d32:	09 95       	icall
    1d34:	89 2b       	or	r24, r25
    1d36:	29 f7       	brne	.-54     	; 0x1d02 <fputc+0x14>
    1d38:	2e 81       	ldd	r18, Y+6	; 0x06
    1d3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d3c:	2f 5f       	subi	r18, 0xFF	; 255
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	3f 83       	std	Y+7, r19	; 0x07
    1d42:	2e 83       	std	Y+6, r18	; 0x06
    1d44:	81 2f       	mov	r24, r17
    1d46:	90 2f       	mov	r25, r16
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	08 95       	ret

00001d52 <__ultoa_invert>:
    1d52:	fa 01       	movw	r30, r20
    1d54:	aa 27       	eor	r26, r26
    1d56:	28 30       	cpi	r18, 0x08	; 8
    1d58:	51 f1       	breq	.+84     	; 0x1dae <__ultoa_invert+0x5c>
    1d5a:	20 31       	cpi	r18, 0x10	; 16
    1d5c:	81 f1       	breq	.+96     	; 0x1dbe <__ultoa_invert+0x6c>
    1d5e:	e8 94       	clt
    1d60:	6f 93       	push	r22
    1d62:	6e 7f       	andi	r22, 0xFE	; 254
    1d64:	6e 5f       	subi	r22, 0xFE	; 254
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	af 4f       	sbci	r26, 0xFF	; 255
    1d6e:	b1 e0       	ldi	r27, 0x01	; 1
    1d70:	3e d0       	rcall	.+124    	; 0x1dee <__ultoa_invert+0x9c>
    1d72:	b4 e0       	ldi	r27, 0x04	; 4
    1d74:	3c d0       	rcall	.+120    	; 0x1dee <__ultoa_invert+0x9c>
    1d76:	67 0f       	add	r22, r23
    1d78:	78 1f       	adc	r23, r24
    1d7a:	89 1f       	adc	r24, r25
    1d7c:	9a 1f       	adc	r25, r26
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	68 0f       	add	r22, r24
    1d82:	79 1f       	adc	r23, r25
    1d84:	8a 1f       	adc	r24, r26
    1d86:	91 1d       	adc	r25, r1
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	6a 0f       	add	r22, r26
    1d8c:	71 1d       	adc	r23, r1
    1d8e:	81 1d       	adc	r24, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	a1 1d       	adc	r26, r1
    1d94:	20 d0       	rcall	.+64     	; 0x1dd6 <__ultoa_invert+0x84>
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__ultoa_invert+0x48>
    1d98:	68 94       	set
    1d9a:	3f 91       	pop	r19
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	26 9f       	mul	r18, r22
    1da0:	11 24       	eor	r1, r1
    1da2:	30 19       	sub	r19, r0
    1da4:	30 5d       	subi	r19, 0xD0	; 208
    1da6:	31 93       	st	Z+, r19
    1da8:	de f6       	brtc	.-74     	; 0x1d60 <__ultoa_invert+0xe>
    1daa:	cf 01       	movw	r24, r30
    1dac:	08 95       	ret
    1dae:	46 2f       	mov	r20, r22
    1db0:	47 70       	andi	r20, 0x07	; 7
    1db2:	40 5d       	subi	r20, 0xD0	; 208
    1db4:	41 93       	st	Z+, r20
    1db6:	b3 e0       	ldi	r27, 0x03	; 3
    1db8:	0f d0       	rcall	.+30     	; 0x1dd8 <__ultoa_invert+0x86>
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__ultoa_invert+0x5c>
    1dbc:	f6 cf       	rjmp	.-20     	; 0x1daa <__ultoa_invert+0x58>
    1dbe:	46 2f       	mov	r20, r22
    1dc0:	4f 70       	andi	r20, 0x0F	; 15
    1dc2:	40 5d       	subi	r20, 0xD0	; 208
    1dc4:	4a 33       	cpi	r20, 0x3A	; 58
    1dc6:	18 f0       	brcs	.+6      	; 0x1dce <__ultoa_invert+0x7c>
    1dc8:	49 5d       	subi	r20, 0xD9	; 217
    1dca:	31 fd       	sbrc	r19, 1
    1dcc:	40 52       	subi	r20, 0x20	; 32
    1dce:	41 93       	st	Z+, r20
    1dd0:	02 d0       	rcall	.+4      	; 0x1dd6 <__ultoa_invert+0x84>
    1dd2:	a9 f7       	brne	.-22     	; 0x1dbe <__ultoa_invert+0x6c>
    1dd4:	ea cf       	rjmp	.-44     	; 0x1daa <__ultoa_invert+0x58>
    1dd6:	b4 e0       	ldi	r27, 0x04	; 4
    1dd8:	a6 95       	lsr	r26
    1dda:	97 95       	ror	r25
    1ddc:	87 95       	ror	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	ba 95       	dec	r27
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <__ultoa_invert+0x86>
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 05       	cpc	r22, r1
    1dea:	71 05       	cpc	r23, r1
    1dec:	08 95       	ret
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	0a 2e       	mov	r0, r26
    1df4:	06 94       	lsr	r0
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	37 95       	ror	r19
    1dfc:	27 95       	ror	r18
    1dfe:	ba 95       	dec	r27
    1e00:	c9 f7       	brne	.-14     	; 0x1df4 <__ultoa_invert+0xa2>
    1e02:	62 0f       	add	r22, r18
    1e04:	73 1f       	adc	r23, r19
    1e06:	84 1f       	adc	r24, r20
    1e08:	95 1f       	adc	r25, r21
    1e0a:	a0 1d       	adc	r26, r0
    1e0c:	08 95       	ret

00001e0e <__prologue_saves__>:
    1e0e:	2f 92       	push	r2
    1e10:	3f 92       	push	r3
    1e12:	4f 92       	push	r4
    1e14:	5f 92       	push	r5
    1e16:	6f 92       	push	r6
    1e18:	7f 92       	push	r7
    1e1a:	8f 92       	push	r8
    1e1c:	9f 92       	push	r9
    1e1e:	af 92       	push	r10
    1e20:	bf 92       	push	r11
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	ca 1b       	sub	r28, r26
    1e38:	db 0b       	sbc	r29, r27
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	09 94       	ijmp

00001e46 <__epilogue_restores__>:
    1e46:	2a 88       	ldd	r2, Y+18	; 0x12
    1e48:	39 88       	ldd	r3, Y+17	; 0x11
    1e4a:	48 88       	ldd	r4, Y+16	; 0x10
    1e4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e50:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e52:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e54:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e56:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e58:	b9 84       	ldd	r11, Y+9	; 0x09
    1e5a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e5c:	df 80       	ldd	r13, Y+7	; 0x07
    1e5e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e60:	fd 80       	ldd	r15, Y+5	; 0x05
    1e62:	0c 81       	ldd	r16, Y+4	; 0x04
    1e64:	1b 81       	ldd	r17, Y+3	; 0x03
    1e66:	aa 81       	ldd	r26, Y+2	; 0x02
    1e68:	b9 81       	ldd	r27, Y+1	; 0x01
    1e6a:	ce 0f       	add	r28, r30
    1e6c:	d1 1d       	adc	r29, r1
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	ed 01       	movw	r28, r26
    1e7a:	08 95       	ret

00001e7c <_exit>:
    1e7c:	f8 94       	cli

00001e7e <__stop_program>:
    1e7e:	ff cf       	rjmp	.-2      	; 0x1e7e <__stop_program>
