
PWMlight_mesaure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00001ca0  00001d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  008000f2  008000f2  00001dc6  2**0
                  ALLOC
  3 .stab         00003a5c  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a23  00000000  00000000  00005824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007247  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
       2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
       4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
       6:	05 c2       	rjmp	.+1034   	; 0x412 <__vector_3>
       8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
       a:	31 c0       	rjmp	.+98     	; 0x6e <__bad_interrupt>
       c:	39 c3       	rjmp	.+1650   	; 0x680 <__vector_6>
       e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
      10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
      12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
      14:	2c c0       	rjmp	.+88     	; 0x6e <__bad_interrupt>
      16:	ce c9       	rjmp	.-3172   	; 0xfffff3b4 <__eeprom_end+0xff7ef3b4>
      18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
      1a:	92 c9       	rjmp	.-3292   	; 0xfffff340 <__eeprom_end+0xff7ef340>
      1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
      1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
      20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
      22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
      24:	24 c0       	rjmp	.+72     	; 0x6e <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	30 31       	cpi	r19, 0x10	; 16
      28:	32 33       	cpi	r19, 0x32	; 50
      2a:	34 35       	cpi	r19, 0x54	; 84
      2c:	36 37       	cpi	r19, 0x76	; 118
      2e:	38 39       	cpi	r19, 0x98	; 152
      30:	41 42       	sbci	r20, 0x21	; 33
      32:	43 44       	sbci	r20, 0x43	; 67
      34:	45 46       	sbci	r20, 0x65	; 101
	...

00000038 <__ctors_end>:
      38:	11 24       	eor	r1, r1
      3a:	1f be       	out	0x3f, r1	; 63
      3c:	cf e5       	ldi	r28, 0x5F	; 95
      3e:	d4 e0       	ldi	r29, 0x04	; 4
      40:	de bf       	out	0x3e, r29	; 62
      42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
      44:	10 e0       	ldi	r17, 0x00	; 0
      46:	a0 e6       	ldi	r26, 0x60	; 96
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	e0 ea       	ldi	r30, 0xA0	; 160
      4c:	fc e1       	ldi	r31, 0x1C	; 28
      4e:	02 c0       	rjmp	.+4      	; 0x54 <__do_copy_data+0x10>
      50:	05 90       	lpm	r0, Z+
      52:	0d 92       	st	X+, r0
      54:	a2 3f       	cpi	r26, 0xF2	; 242
      56:	b1 07       	cpc	r27, r17
      58:	d9 f7       	brne	.-10     	; 0x50 <__do_copy_data+0xc>

0000005a <__do_clear_bss>:
      5a:	21 e0       	ldi	r18, 0x01	; 1
      5c:	a2 ef       	ldi	r26, 0xF2	; 242
      5e:	b0 e0       	ldi	r27, 0x00	; 0
      60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
      62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
      64:	aa 3b       	cpi	r26, 0xBA	; 186
      66:	b2 07       	cpc	r27, r18
      68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
      6a:	e9 d3       	rcall	.+2002   	; 0x83e <main>
      6c:	17 ce       	rjmp	.-978    	; 0xfffffc9c <__eeprom_end+0xff7efc9c>

0000006e <__bad_interrupt>:
      6e:	c8 cf       	rjmp	.-112    	; 0x0 <__vectors>

00000070 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      70:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      72:	8f b7       	in	r24, 0x3f	; 63
      74:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      76:	71 83       	std	Z+1, r23	; 0x01
      78:	60 83       	st	Z, r22
	buffer->size = size;
      7a:	53 83       	std	Z+3, r21	; 0x03
      7c:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      7e:	17 82       	std	Z+7, r1	; 0x07
      80:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      82:	15 82       	std	Z+5, r1	; 0x05
      84:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
      86:	8f bf       	out	0x3f, r24	; 63
      88:	08 95       	ret

0000008a <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
      8a:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
      8c:	9f b7       	in	r25, 0x3f	; 63
      8e:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
      90:	24 81       	ldd	r18, Z+4	; 0x04
      92:	35 81       	ldd	r19, Z+5	; 0x05
      94:	21 15       	cp	r18, r1
      96:	31 05       	cpc	r19, r1
      98:	d9 f0       	breq	.+54     	; 0xd0 <bufferGetFromFront+0x46>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
      9a:	46 81       	ldd	r20, Z+6	; 0x06
      9c:	57 81       	ldd	r21, Z+7	; 0x07
      9e:	a0 81       	ld	r26, Z
      a0:	b1 81       	ldd	r27, Z+1	; 0x01
      a2:	a4 0f       	add	r26, r20
      a4:	b5 1f       	adc	r27, r21
      a6:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
      a8:	4f 5f       	subi	r20, 0xFF	; 255
      aa:	5f 4f       	sbci	r21, 0xFF	; 255
      ac:	57 83       	std	Z+7, r21	; 0x07
      ae:	46 83       	std	Z+6, r20	; 0x06
		if(buffer->dataindex >= buffer->size)
      b0:	62 81       	ldd	r22, Z+2	; 0x02
      b2:	73 81       	ldd	r23, Z+3	; 0x03
      b4:	46 17       	cp	r20, r22
      b6:	57 07       	cpc	r21, r23
      b8:	30 f4       	brcc	.+12     	; 0xc6 <bufferGetFromFront+0x3c>
		{
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
      ba:	21 50       	subi	r18, 0x01	; 1
      bc:	31 09       	sbc	r19, r1
      be:	35 83       	std	Z+5, r19	; 0x05
      c0:	24 83       	std	Z+4, r18	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
      c2:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
      c4:	08 95       	ret
		data = buffer->dataptr[buffer->dataindex];
		// move index down and decrement length
		buffer->dataindex++;
		if(buffer->dataindex >= buffer->size)
		{
			buffer->dataindex -= buffer->size;
      c6:	46 1b       	sub	r20, r22
      c8:	57 0b       	sbc	r21, r23
      ca:	57 83       	std	Z+7, r21	; 0x07
      cc:	46 83       	std	Z+6, r20	; 0x06
      ce:	f5 cf       	rjmp	.-22     	; 0xba <bufferGetFromFront+0x30>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
      d0:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
      d2:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
      d4:	08 95       	ret

000000d6 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
      d6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      d8:	af b7       	in	r26, 0x3f	; 63
      da:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
      dc:	24 81       	ldd	r18, Z+4	; 0x04
      de:	35 81       	ldd	r19, Z+5	; 0x05
      e0:	62 17       	cp	r22, r18
      e2:	73 07       	cpc	r23, r19
      e4:	a8 f4       	brcc	.+42     	; 0x110 <bufferDumpFromFront+0x3a>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
      e6:	86 81       	ldd	r24, Z+6	; 0x06
      e8:	97 81       	ldd	r25, Z+7	; 0x07
      ea:	86 0f       	add	r24, r22
      ec:	97 1f       	adc	r25, r23
      ee:	97 83       	std	Z+7, r25	; 0x07
      f0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
      f2:	42 81       	ldd	r20, Z+2	; 0x02
      f4:	53 81       	ldd	r21, Z+3	; 0x03
      f6:	84 17       	cp	r24, r20
      f8:	95 07       	cpc	r25, r21
      fa:	20 f0       	brcs	.+8      	; 0x104 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
      fc:	84 1b       	sub	r24, r20
      fe:	95 0b       	sbc	r25, r21
     100:	97 83       	std	Z+7, r25	; 0x07
     102:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     104:	26 1b       	sub	r18, r22
     106:	37 0b       	sbc	r19, r23
     108:	35 83       	std	Z+5, r19	; 0x05
     10a:	24 83       	std	Z+4, r18	; 0x04
	{
		// flush the whole buffer
		buffer->datalength = 0;
	}
	// end critical section
	CRITICAL_SECTION_END;
     10c:	af bf       	out	0x3f, r26	; 63
     10e:	08 95       	ret
		buffer->datalength -= numbytes;
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     110:	15 82       	std	Z+5, r1	; 0x05
     112:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     114:	af bf       	out	0x3f, r26	; 63
     116:	08 95       	ret

00000118 <bufferGetAtIndex>:
}

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     118:	fc 01       	movw	r30, r24
     11a:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
     11c:	4f b7       	in	r20, 0x3f	; 63
     11e:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
     120:	26 81       	ldd	r18, Z+6	; 0x06
     122:	37 81       	ldd	r19, Z+7	; 0x07
     124:	82 0f       	add	r24, r18
     126:	93 1f       	adc	r25, r19
     128:	62 81       	ldd	r22, Z+2	; 0x02
     12a:	73 81       	ldd	r23, Z+3	; 0x03
     12c:	81 d9       	rcall	.-3326   	; 0xfffff430 <__eeprom_end+0xff7ef430>
     12e:	01 90       	ld	r0, Z+
     130:	f0 81       	ld	r31, Z
     132:	e0 2d       	mov	r30, r0
     134:	e8 0f       	add	r30, r24
     136:	f9 1f       	adc	r31, r25
     138:	80 81       	ld	r24, Z
	// end critical section
	CRITICAL_SECTION_END;
     13a:	4f bf       	out	0x3f, r20	; 63
	return data;
}
     13c:	08 95       	ret

0000013e <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
     146:	cf b7       	in	r28, 0x3f	; 63
     148:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     14a:	44 81       	ldd	r20, Z+4	; 0x04
     14c:	55 81       	ldd	r21, Z+5	; 0x05
     14e:	62 81       	ldd	r22, Z+2	; 0x02
     150:	73 81       	ldd	r23, Z+3	; 0x03
     152:	46 17       	cp	r20, r22
     154:	57 07       	cpc	r21, r23
     156:	a0 f4       	brcc	.+40     	; 0x180 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     158:	86 81       	ldd	r24, Z+6	; 0x06
     15a:	97 81       	ldd	r25, Z+7	; 0x07
     15c:	84 0f       	add	r24, r20
     15e:	95 1f       	adc	r25, r21
     160:	67 d9       	rcall	.-3378   	; 0xfffff430 <__eeprom_end+0xff7ef430>
     162:	a0 81       	ld	r26, Z
     164:	b1 81       	ldd	r27, Z+1	; 0x01
     166:	a8 0f       	add	r26, r24
     168:	b9 1f       	adc	r27, r25
     16a:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
     16c:	84 81       	ldd	r24, Z+4	; 0x04
     16e:	95 81       	ldd	r25, Z+5	; 0x05
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	95 83       	std	Z+5, r25	; 0x05
     174:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     176:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
     178:	8f ef       	ldi	r24, 0xFF	; 255
	}
	// end critical section
	CRITICAL_SECTION_END;
	// return failure
	return 0;
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret
		CRITICAL_SECTION_END;
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
     180:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     18a:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     18c:	4f b7       	in	r20, 0x3f	; 63
     18e:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     190:	82 81       	ldd	r24, Z+2	; 0x02
     192:	93 81       	ldd	r25, Z+3	; 0x03
     194:	24 81       	ldd	r18, Z+4	; 0x04
     196:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     198:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     19a:	82 1b       	sub	r24, r18
     19c:	93 0b       	sbc	r25, r19
     19e:	08 95       	ret

000001a0 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
	// begin critical section
	CRITICAL_SECTION_START;
     1a0:	2f b7       	in	r18, 0x3f	; 63
     1a2:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
     1a4:	fc 01       	movw	r30, r24
     1a6:	15 82       	std	Z+5, r1	; 0x05
     1a8:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     1aa:	2f bf       	out	0x3f, r18	; 63
     1ac:	08 95       	ret

000001ae <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
     1ae:	66 23       	and	r22, r22
     1b0:	69 f1       	breq	.+90     	; 0x20c <lcd_write+0x5e>
       lcd_rs_high();
     1b2:	c1 9a       	sbi	0x18, 1	; 24
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();    /* RW=0  write mode      */
     1b4:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     1b6:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     1b8:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     1ba:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     1bc:	be 9a       	sbi	0x17, 6	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1be:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1c0:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1c2:	c4 98       	cbi	0x18, 4	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1c4:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1c6:	87 fd       	sbrc	r24, 7
     1c8:	23 c0       	rjmp	.+70     	; 0x210 <lcd_write+0x62>
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ca:	86 fd       	sbrc	r24, 6
     1cc:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1ce:	85 fd       	sbrc	r24, 5
     1d0:	c4 9a       	sbi	0x18, 4	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     1d2:	84 fd       	sbrc	r24, 4
     1d4:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1d6:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	9a 95       	dec	r25
     1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_write+0x2c>
    lcd_e_delay();
    lcd_e_low();
     1de:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1e0:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1e2:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1e4:	c4 98       	cbi	0x18, 4	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1e6:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1e8:	83 fd       	sbrc	r24, 3
     1ea:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ec:	82 fd       	sbrc	r24, 2
     1ee:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1f0:	81 fd       	sbrc	r24, 1
     1f2:	c4 9a       	sbi	0x18, 4	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1f4:	80 fd       	sbrc	r24, 0
     1f6:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1f8:	c2 9a       	sbi	0x18, 2	; 24
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	8a 95       	dec	r24
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_write+0x4e>
    lcd_e_delay();
    lcd_e_low();
     200:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     202:	c3 9a       	sbi	0x18, 3	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     204:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     206:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     208:	c6 9a       	sbi	0x18, 6	; 24
     20a:	08 95       	ret


    if (rs) {        /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     20c:	c1 98       	cbi	0x18, 1	; 24
     20e:	d2 cf       	rjmp	.-92     	; 0x1b4 <lcd_write+0x6>
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     210:	c6 9a       	sbi	0x18, 6	; 24
     212:	db cf       	rjmp	.-74     	; 0x1ca <lcd_write+0x1c>

00000214 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     214:	c1 98       	cbi	0x18, 1	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
     216:	c7 9a       	sbi	0x18, 7	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     218:	bb 98       	cbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     21a:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     21c:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     21e:	be 98       	cbi	0x17, 6	; 23
                
        /* read high nibble first */
        lcd_e_high();
     220:	c2 9a       	sbi	0x18, 2	; 24
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <lcd_read.constprop.0+0x10>
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     228:	b3 99       	sbic	0x16, 3	; 22
     22a:	19 c0       	rjmp	.+50     	; 0x25e <lcd_read.constprop.0+0x4a>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     22e:	b4 99       	sbic	0x16, 4	; 22
     230:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     232:	b5 99       	sbic	0x16, 5	; 22
     234:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     236:	b6 99       	sbic	0x16, 6	; 22
     238:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     23a:	c2 98       	cbi	0x18, 2	; 24
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	9a 95       	dec	r25
     240:	f1 f7       	brne	.-4      	; 0x23e <lcd_read.constprop.0+0x2a>

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
     242:	c2 9a       	sbi	0x18, 2	; 24
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	9a 95       	dec	r25
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_read.constprop.0+0x32>
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     24a:	b3 99       	sbic	0x16, 3	; 22
     24c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     24e:	b4 99       	sbic	0x16, 4	; 22
     250:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     252:	b5 99       	sbic	0x16, 5	; 22
     254:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     256:	b6 99       	sbic	0x16, 6	; 22
     258:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     25a:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     25c:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     25e:	80 e1       	ldi	r24, 0x10	; 16
     260:	e6 cf       	rjmp	.-52     	; 0x22e <lcd_read.constprop.0+0x1a>

00000262 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     262:	d8 df       	rcall	.-80     	; 0x214 <lcd_read.constprop.0>
     264:	87 fd       	sbrc	r24, 7
     266:	fd cf       	rjmp	.-6      	; 0x262 <lcd_waitbusy>
     268:	8a e0       	ldi	r24, 0x0A	; 10
     26a:	8a 95       	dec	r24
     26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_waitbusy+0x8>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     26e:	d2 cf       	rjmp	.-92     	; 0x214 <lcd_read.constprop.0>

00000270 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     270:	cf 93       	push	r28
     272:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     274:	f6 df       	rcall	.-20     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	8c 2f       	mov	r24, r28
}
     27a:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     27c:	98 cf       	rjmp	.-208    	; 0x1ae <lcd_write>

0000027e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     27e:	cf 93       	push	r28
     280:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     282:	ef df       	rcall	.-34     	; 0x262 <lcd_waitbusy>
    lcd_write(data,1);
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	8c 2f       	mov	r24, r28
}
     288:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
     28a:	91 cf       	rjmp	.-222    	; 0x1ae <lcd_write>

0000028c <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     28c:	cf 93       	push	r28
     28e:	c8 2f       	mov	r28, r24
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     290:	66 23       	and	r22, r22
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_gotoxy+0x14>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     294:	e6 df       	rcall	.-52     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	80 ec       	ldi	r24, 0xC0	; 192
     29a:	8c 0f       	add	r24, r28
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     29c:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     29e:	87 cf       	rjmp	.-242    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2a0:	e0 df       	rcall	.-64     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	8c 0f       	add	r24, r28
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     2a8:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     2aa:	81 cf       	rjmp	.-254    	; 0x1ae <lcd_write>

000002ac <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     2ac:	da df       	rcall	.-76     	; 0x262 <lcd_waitbusy>
}
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	08 95       	ret

000002b2 <lcd_clrscr>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2b2:	d7 df       	rcall	.-82     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	7a cf       	rjmp	.-268    	; 0x1ae <lcd_write>

000002ba <lcd_home>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2ba:	d3 df       	rcall	.-90     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	76 cf       	rjmp	.-276    	; 0x1ae <lcd_write>

000002c2 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     2c2:	cf 93       	push	r28
     2c4:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     2c6:	cd df       	rcall	.-102    	; 0x262 <lcd_waitbusy>
    if (c=='\n')
     2c8:	ca 30       	cpi	r28, 0x0A	; 10
     2ca:	21 f0       	breq	.+8      	; 0x2d4 <lcd_putc+0x12>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
     2d0:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2d2:	6d cf       	rjmp	.-294    	; 0x1ae <lcd_write>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2d4:	80 34       	cpi	r24, 0x40	; 64
     2d6:	30 f0       	brcs	.+12     	; 0x2e4 <lcd_putc+0x22>
     2d8:	c0 e8       	ldi	r28, 0x80	; 128
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2da:	c3 df       	rcall	.-122    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8c 2f       	mov	r24, r28
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     2e0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     2e2:	65 cf       	rjmp	.-310    	; 0x1ae <lcd_write>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2e4:	c0 ec       	ldi	r28, 0xC0	; 192
     2e6:	f9 cf       	rjmp	.-14     	; 0x2da <lcd_putc+0x18>

000002e8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
     2ec:	ec 01       	movw	r28, r24
     2ee:	21 96       	adiw	r28, 0x01	; 1
     2f0:	fc 01       	movw	r30, r24
     2f2:	80 81       	ld	r24, Z
     2f4:	88 23       	and	r24, r24
     2f6:	21 f0       	breq	.+8      	; 0x300 <lcd_puts+0x18>
        lcd_putc(c);
     2f8:	e4 df       	rcall	.-56     	; 0x2c2 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     2fa:	89 91       	ld	r24, Y+
     2fc:	81 11       	cpse	r24, r1
     2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     30a:	ec 01       	movw	r28, r24
     30c:	21 96       	adiw	r28, 0x01	; 1
     30e:	fc 01       	movw	r30, r24
     310:	84 91       	lpm	r24, Z
     312:	88 23       	and	r24, r24
     314:	31 f0       	breq	.+12     	; 0x322 <lcd_puts_p+0x1c>
        lcd_putc(c);
     316:	d5 df       	rcall	.-86     	; 0x2c2 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     318:	fe 01       	movw	r30, r28
     31a:	84 91       	lpm	r24, Z
     31c:	21 96       	adiw	r28, 0x01	; 1
     31e:	81 11       	cpse	r24, r1
     320:	fa cf       	rjmp	.-12     	; 0x316 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     328:	cf 93       	push	r28
     32a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     32c:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     32e:	bf 9a       	sbi	0x17, 7	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     330:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     332:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     334:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     336:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     338:	be 9a       	sbi	0x17, 6	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	e0 ea       	ldi	r30, 0xA0	; 160
     33c:	fc e8       	ldi	r31, 0x8C	; 140
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <lcd_init+0x16>
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     342:	c4 9a       	sbi	0x18, 4	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     344:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     346:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	9a 95       	dec	r25
     34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init+0x22>
    lcd_e_delay();
    lcd_e_low();
     34e:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     350:	e0 eb       	ldi	r30, 0xB0	; 176
     352:	f6 e3       	ldi	r31, 0x36	; 54
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0x2c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     358:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	9a 95       	dec	r25
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init+0x34>
    lcd_e_delay();
    lcd_e_low();
     360:	c2 98       	cbi	0x18, 2	; 24
     362:	9a ea       	ldi	r25, 0xAA	; 170
     364:	9a 95       	dec	r25
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd_init+0x3c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     368:	c2 9a       	sbi	0x18, 2	; 24
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9a 95       	dec	r25
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x44>
    lcd_e_delay();
    lcd_e_low();
     370:	c2 98       	cbi	0x18, 2	; 24
     372:	9a ea       	ldi	r25, 0xAA	; 170
     374:	9a 95       	dec	r25
     376:	f1 f7       	brne	.-4      	; 0x374 <lcd_init+0x4c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     378:	c3 98       	cbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     37a:	c2 9a       	sbi	0x18, 2	; 24
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	9a 95       	dec	r25
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x56>
    lcd_e_delay();
    lcd_e_low();
     382:	c2 98       	cbi	0x18, 2	; 24
     384:	9a ea       	ldi	r25, 0xAA	; 170
     386:	9a 95       	dec	r25
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init+0x5e>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     38a:	6b df       	rcall	.-298    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	0e df       	rcall	.-484    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     392:	67 df       	rcall	.-306    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	0a df       	rcall	.-492    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     39a:	63 df       	rcall	.-314    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	06 df       	rcall	.-500    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     3a2:	5f df       	rcall	.-322    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	02 df       	rcall	.-508    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     3aa:	5b df       	rcall	.-330    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	8c 2f       	mov	r24, r28
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */

}/* lcd_init */
     3b0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     3b2:	fd ce       	rjmp	.-518    	; 0x1ae <lcd_write>

000003b4 <filter_adc>:

}

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     3b4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     3b6:	36 99       	sbic	0x06, 6	; 6
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <filter_adc+0x2>
	adc_value = ADCW; //Store ADC value
     3ba:	64 b1       	in	r22, 0x04	; 4
     3bc:	75 b1       	in	r23, 0x05	; 5
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
	adc_value = (tmp_value / no_of_samples);
	tmp_value = (sqrt(adc_value));
	return tmp_value;*/
	return adc_read();

}
     3c2:	08 95       	ret

000003c4 <adc_read>:

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     3c4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     3c6:	36 99       	sbic	0x06, 6	; 6
     3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <adc_read+0x2>
	adc_value = ADCW; //Store ADC value
     3ca:	64 b1       	in	r22, 0x04	; 4
     3cc:	75 b1       	in	r23, 0x05	; 5
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
	return adc_value;
}
     3d2:	08 95       	ret

000003d4 <LCDWriteStringXY>:

void LCDWriteStringXY(int x, int y, const char *s) {
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	96 2f       	mov	r25, r22
     3da:	ea 01       	movw	r28, r20
	lcd_gotoxy(y - 1, x - 1);
     3dc:	6f ef       	ldi	r22, 0xFF	; 255
     3de:	68 0f       	add	r22, r24
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	89 0f       	add	r24, r25
     3e4:	53 df       	rcall	.-346    	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     3e6:	ce 01       	movw	r24, r28
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
     3ec:	7d cf       	rjmp	.-262    	; 0x2e8 <lcd_puts>

000003ee <LCDWriteCharXY>:
}
void LCDWriteCharXY(int x, int y, char s) {
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	1f 92       	push	r1
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	96 2f       	mov	r25, r22
	lcd_gotoxy(y - 1, x - 1);
     3fa:	6f ef       	ldi	r22, 0xFF	; 255
     3fc:	68 0f       	add	r22, r24
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	89 0f       	add	r24, r25
     402:	49 83       	std	Y+1, r20	; 0x01
     404:	43 df       	rcall	.-378    	; 0x28c <lcd_gotoxy>
	lcd_putc(s);
     406:	49 81       	ldd	r20, Y+1	; 0x01
     408:	84 2f       	mov	r24, r20
}
     40a:	0f 90       	pop	r0
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
}
void LCDWriteCharXY(int x, int y, char s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_putc(s);
     410:	58 cf       	rjmp	.-336    	; 0x2c2 <lcd_putc>

00000412 <__vector_3>:
}

//led setup interrupt 250us
ISR (TIMER2_COMP_vect)  // timer2 interrupt
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	TCNT0 += 6;
     430:	82 b7       	in	r24, 0x32	; 50
     432:	8a 5f       	subi	r24, 0xFA	; 250
     434:	82 bf       	out	0x32, r24	; 50
	//toggle led1
	if (led1Up) {
     436:	80 91 6a 00 	lds	r24, 0x006A
     43a:	90 91 6b 00 	lds	r25, 0x006B
     43e:	89 2b       	or	r24, r25
     440:	09 f0       	breq	.+2      	; 0x444 <__vector_3+0x32>
     442:	5f c0       	rjmp	.+190    	; 0x502 <__stack+0xa3>
			led1Up = 0;
		} else {
			led1Count++;
		}
	} else if (!led1Up) {
		if (led1Count == led1Counterdn[preset]) {
     444:	80 91 06 01 	lds	r24, 0x0106
     448:	90 91 07 01 	lds	r25, 0x0107
     44c:	20 91 0c 01 	lds	r18, 0x010C
     450:	30 91 0d 01 	lds	r19, 0x010D
     454:	ac 01       	movw	r20, r24
     456:	44 0f       	add	r20, r20
     458:	55 1f       	adc	r21, r21
     45a:	fa 01       	movw	r30, r20
     45c:	ea 56       	subi	r30, 0x6A	; 106
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	60 81       	ld	r22, Z
     462:	71 81       	ldd	r23, Z+1	; 0x01
     464:	62 17       	cp	r22, r18
     466:	73 07       	cpc	r23, r19
     468:	09 f4       	brne	.+2      	; 0x46c <__stack+0xd>
     46a:	e0 c0       	rjmp	.+448    	; 0x62c <__stack+0x1cd>
			if (led1Counterup[preset] != 0)
				sbi(PORTD, PD2);
			led1Count = 0;
			led1Up = 1;
		} else {
			led1Count++;
     46c:	2f 5f       	subi	r18, 0xFF	; 255
     46e:	3f 4f       	sbci	r19, 0xFF	; 255
     470:	30 93 0d 01 	sts	0x010D, r19
     474:	20 93 0c 01 	sts	0x010C, r18
		}
	}

	//toggle led2
	if (led2Up) {
     478:	20 91 68 00 	lds	r18, 0x0068
     47c:	30 91 69 00 	lds	r19, 0x0069
     480:	23 2b       	or	r18, r19
     482:	09 f4       	brne	.+2      	; 0x486 <__stack+0x27>
     484:	69 c0       	rjmp	.+210    	; 0x558 <__stack+0xf9>
		if (led2Count == led2Counterup[preset]) {
     486:	20 91 08 01 	lds	r18, 0x0108
     48a:	30 91 09 01 	lds	r19, 0x0109
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	fc 01       	movw	r30, r24
     494:	e2 54       	subi	r30, 0x42	; 66
     496:	ff 4f       	sbci	r31, 0xFF	; 255
     498:	40 81       	ld	r20, Z
     49a:	51 81       	ldd	r21, Z+1	; 0x01
     49c:	42 17       	cp	r20, r18
     49e:	53 07       	cpc	r21, r19
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <__stack+0x45>
     4a2:	ad c0       	rjmp	.+346    	; 0x5fe <__stack+0x19f>
			if (led2Counterup[preset] != 0)
				sbi(PORTD, PD3);
			led2Count = 0;
			led2Up = 1;
		} else {
			led2Count++;
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	30 93 09 01 	sts	0x0109, r19
     4ac:	20 93 08 01 	sts	0x0108, r18
		}
	}

	//toggle led3
	if (led3Up) {
     4b0:	20 91 6c 00 	lds	r18, 0x006C
     4b4:	30 91 6d 00 	lds	r19, 0x006D
     4b8:	23 2b       	or	r18, r19
     4ba:	09 f0       	breq	.+2      	; 0x4be <__stack+0x5f>
     4bc:	75 c0       	rjmp	.+234    	; 0x5a8 <__stack+0x149>
			led3Up = 0;
		} else {
			led3Count++;
		}
	} else if (!led3Up) {
		if (led3Count == led3Counterdn[preset]) {
     4be:	20 91 0a 01 	lds	r18, 0x010A
     4c2:	30 91 0b 01 	lds	r19, 0x010B
     4c6:	fc 01       	movw	r30, r24
     4c8:	e2 59       	subi	r30, 0x92	; 146
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	40 81       	ld	r20, Z
     4ce:	51 81       	ldd	r21, Z+1	; 0x01
     4d0:	42 17       	cp	r20, r18
     4d2:	53 07       	cpc	r21, r19
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <__stack+0x79>
     4d6:	c1 c0       	rjmp	.+386    	; 0x65a <__stack+0x1fb>
			if (led3Counterup[preset] != 0)
				sbi(PORTD, PD4);
			led3Count = 0;
			led3Up = 1;
		} else {
			led3Count++;
     4d8:	2f 5f       	subi	r18, 0xFF	; 255
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	30 93 0b 01 	sts	0x010B, r19
     4e0:	20 93 0a 01 	sts	0x010A, r18
		}
	}
}
     4e4:	ff 91       	pop	r31
     4e6:	ef 91       	pop	r30
     4e8:	9f 91       	pop	r25
     4ea:	8f 91       	pop	r24
     4ec:	7f 91       	pop	r23
     4ee:	6f 91       	pop	r22
     4f0:	5f 91       	pop	r21
     4f2:	4f 91       	pop	r20
     4f4:	3f 91       	pop	r19
     4f6:	2f 91       	pop	r18
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti
ISR (TIMER2_COMP_vect)  // timer2 interrupt
{
	TCNT0 += 6;
	//toggle led1
	if (led1Up) {
		if (led1Count != led1Counterup[preset]) {
     502:	80 91 06 01 	lds	r24, 0x0106
     506:	90 91 07 01 	lds	r25, 0x0107
     50a:	9c 01       	movw	r18, r24
     50c:	22 0f       	add	r18, r18
     50e:	33 1f       	adc	r19, r19
     510:	f9 01       	movw	r30, r18
     512:	ee 52       	subi	r30, 0x2E	; 46
     514:	ff 4f       	sbci	r31, 0xFF	; 255
     516:	40 81       	ld	r20, Z
     518:	51 81       	ldd	r21, Z+1	; 0x01
     51a:	60 91 0c 01 	lds	r22, 0x010C
     51e:	70 91 0d 01 	lds	r23, 0x010D
     522:	46 17       	cp	r20, r22
     524:	57 07       	cpc	r21, r23
     526:	09 f4       	brne	.+2      	; 0x52a <__stack+0xcb>
     528:	63 c0       	rjmp	.+198    	; 0x5f0 <__stack+0x191>
			if (led1Counterdn[preset] != 0)
     52a:	f9 01       	movw	r30, r18
     52c:	ea 56       	subi	r30, 0x6A	; 106
     52e:	ff 4f       	sbci	r31, 0xFF	; 255
     530:	20 81       	ld	r18, Z
     532:	31 81       	ldd	r19, Z+1	; 0x01
     534:	23 2b       	or	r18, r19
     536:	09 f0       	breq	.+2      	; 0x53a <__stack+0xdb>
     538:	55 c0       	rjmp	.+170    	; 0x5e4 <__stack+0x185>
				cbi(PORTD, PD2);
			led1Count = 0;
     53a:	10 92 0d 01 	sts	0x010D, r1
     53e:	10 92 0c 01 	sts	0x010C, r1
			led1Up = 0;
     542:	10 92 6b 00 	sts	0x006B, r1
     546:	10 92 6a 00 	sts	0x006A, r1
			led1Count++;
		}
	}

	//toggle led2
	if (led2Up) {
     54a:	20 91 68 00 	lds	r18, 0x0068
     54e:	30 91 69 00 	lds	r19, 0x0069
     552:	23 2b       	or	r18, r19
     554:	09 f0       	breq	.+2      	; 0x558 <__stack+0xf9>
     556:	97 cf       	rjmp	.-210    	; 0x486 <__stack+0x27>
			led2Up = 0;
		} else {
			led2Count++;
		}
	} else if (!led2Up) {
		if (led2Count == led2Counterdn[preset]) {
     558:	20 91 08 01 	lds	r18, 0x0108
     55c:	30 91 09 01 	lds	r19, 0x0109
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	fc 01       	movw	r30, r24
     566:	ee 57       	subi	r30, 0x7E	; 126
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	40 81       	ld	r20, Z
     56c:	51 81       	ldd	r21, Z+1	; 0x01
     56e:	42 17       	cp	r20, r18
     570:	53 07       	cpc	r21, r19
     572:	09 f0       	breq	.+2      	; 0x576 <__stack+0x117>
     574:	97 cf       	rjmp	.-210    	; 0x4a4 <__stack+0x45>
			if (led2Counterup[preset] != 0)
     576:	fc 01       	movw	r30, r24
     578:	e2 54       	subi	r30, 0x42	; 66
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	20 81       	ld	r18, Z
     57e:	31 81       	ldd	r19, Z+1	; 0x01
     580:	23 2b       	or	r18, r19
     582:	39 f0       	breq	.+14     	; 0x592 <__stack+0x133>
				sbi(PORTD, PD3);
     584:	93 9a       	sbi	0x12, 3	; 18
     586:	80 91 06 01 	lds	r24, 0x0106
     58a:	90 91 07 01 	lds	r25, 0x0107
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
			led2Count = 0;
     592:	10 92 09 01 	sts	0x0109, r1
     596:	10 92 08 01 	sts	0x0108, r1
			led2Up = 1;
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	30 93 69 00 	sts	0x0069, r19
     5a2:	20 93 68 00 	sts	0x0068, r18
     5a6:	84 cf       	rjmp	.-248    	; 0x4b0 <__stack+0x51>
		}
	}

	//toggle led3
	if (led3Up) {
		if (led3Count == led3Counterup[preset]) {
     5a8:	20 91 0a 01 	lds	r18, 0x010A
     5ac:	30 91 0b 01 	lds	r19, 0x010B
     5b0:	fc 01       	movw	r30, r24
     5b2:	e6 55       	subi	r30, 0x56	; 86
     5b4:	ff 4f       	sbci	r31, 0xFF	; 255
     5b6:	40 81       	ld	r20, Z
     5b8:	51 81       	ldd	r21, Z+1	; 0x01
     5ba:	42 17       	cp	r20, r18
     5bc:	53 07       	cpc	r21, r19
     5be:	09 f0       	breq	.+2      	; 0x5c2 <__stack+0x163>
     5c0:	8b cf       	rjmp	.-234    	; 0x4d8 <__stack+0x79>
			if (led3Counterdn[preset] != 0)
     5c2:	fc 01       	movw	r30, r24
     5c4:	e2 59       	subi	r30, 0x92	; 146
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	80 81       	ld	r24, Z
     5ca:	91 81       	ldd	r25, Z+1	; 0x01
     5cc:	89 2b       	or	r24, r25
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <__stack+0x173>
				cbi(PORTD, PD4);
     5d0:	94 98       	cbi	0x12, 4	; 18
			led3Count = 0;
     5d2:	10 92 0b 01 	sts	0x010B, r1
     5d6:	10 92 0a 01 	sts	0x010A, r1
			led3Up = 0;
     5da:	10 92 6d 00 	sts	0x006D, r1
     5de:	10 92 6c 00 	sts	0x006C, r1
     5e2:	80 cf       	rjmp	.-256    	; 0x4e4 <__stack+0x85>
	TCNT0 += 6;
	//toggle led1
	if (led1Up) {
		if (led1Count != led1Counterup[preset]) {
			if (led1Counterdn[preset] != 0)
				cbi(PORTD, PD2);
     5e4:	92 98       	cbi	0x12, 2	; 18
     5e6:	80 91 06 01 	lds	r24, 0x0106
     5ea:	90 91 07 01 	lds	r25, 0x0107
     5ee:	a5 cf       	rjmp	.-182    	; 0x53a <__stack+0xdb>
			led1Count = 0;
			led1Up = 0;
		} else {
			led1Count++;
     5f0:	4f 5f       	subi	r20, 0xFF	; 255
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	50 93 0d 01 	sts	0x010D, r21
     5f8:	40 93 0c 01 	sts	0x010C, r20
     5fc:	a6 cf       	rjmp	.-180    	; 0x54a <__stack+0xeb>
	}

	//toggle led2
	if (led2Up) {
		if (led2Count == led2Counterup[preset]) {
			if (led2Counterdn[preset] != 0)
     5fe:	fc 01       	movw	r30, r24
     600:	ee 57       	subi	r30, 0x7E	; 126
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	20 81       	ld	r18, Z
     606:	31 81       	ldd	r19, Z+1	; 0x01
     608:	23 2b       	or	r18, r19
     60a:	39 f0       	breq	.+14     	; 0x61a <__stack+0x1bb>
				cbi(PORTD, PD3);
     60c:	93 98       	cbi	0x12, 3	; 18
     60e:	80 91 06 01 	lds	r24, 0x0106
     612:	90 91 07 01 	lds	r25, 0x0107
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
			led2Count = 0;
     61a:	10 92 09 01 	sts	0x0109, r1
     61e:	10 92 08 01 	sts	0x0108, r1
			led2Up = 0;
     622:	10 92 69 00 	sts	0x0069, r1
     626:	10 92 68 00 	sts	0x0068, r1
     62a:	42 cf       	rjmp	.-380    	; 0x4b0 <__stack+0x51>
		} else {
			led1Count++;
		}
	} else if (!led1Up) {
		if (led1Count == led1Counterdn[preset]) {
			if (led1Counterup[preset] != 0)
     62c:	fa 01       	movw	r30, r20
     62e:	ee 52       	subi	r30, 0x2E	; 46
     630:	ff 4f       	sbci	r31, 0xFF	; 255
     632:	20 81       	ld	r18, Z
     634:	31 81       	ldd	r19, Z+1	; 0x01
     636:	23 2b       	or	r18, r19
     638:	29 f0       	breq	.+10     	; 0x644 <__stack+0x1e5>
				sbi(PORTD, PD2);
     63a:	92 9a       	sbi	0x12, 2	; 18
     63c:	80 91 06 01 	lds	r24, 0x0106
     640:	90 91 07 01 	lds	r25, 0x0107
			led1Count = 0;
     644:	10 92 0d 01 	sts	0x010D, r1
     648:	10 92 0c 01 	sts	0x010C, r1
			led1Up = 1;
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	30 93 6b 00 	sts	0x006B, r19
     654:	20 93 6a 00 	sts	0x006A, r18
     658:	78 cf       	rjmp	.-272    	; 0x54a <__stack+0xeb>
		} else {
			led3Count++;
		}
	} else if (!led3Up) {
		if (led3Count == led3Counterdn[preset]) {
			if (led3Counterup[preset] != 0)
     65a:	fc 01       	movw	r30, r24
     65c:	e6 55       	subi	r30, 0x56	; 86
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	80 81       	ld	r24, Z
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	89 2b       	or	r24, r25
     666:	09 f0       	breq	.+2      	; 0x66a <__stack+0x20b>
				sbi(PORTD, PD4);
     668:	94 9a       	sbi	0x12, 4	; 18
			led3Count = 0;
     66a:	10 92 0b 01 	sts	0x010B, r1
     66e:	10 92 0a 01 	sts	0x010A, r1
			led3Up = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	90 93 6d 00 	sts	0x006D, r25
     67a:	80 93 6c 00 	sts	0x006C, r24
     67e:	32 cf       	rjmp	.-412    	; 0x4e4 <__stack+0x85>

00000680 <__vector_6>:
			led3Count++;
		}
	}
}

ISR (TIMER1_COMPA_vect) {
     680:	1f 92       	push	r1
     682:	0f 92       	push	r0
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	0f 92       	push	r0
     688:	11 24       	eor	r1, r1
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	af 93       	push	r26
     690:	bf 93       	push	r27
	if(requestTime == 0){
     692:	80 91 f4 00 	lds	r24, 0x00F4
     696:	90 91 f5 00 	lds	r25, 0x00F5
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	51 f1       	breq	.+84     	; 0x6f2 <__vector_6+0x72>
		requestTime = 1;
	}else if(requestTime > 1){
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	91 05       	cpc	r25, r1
     6a2:	3c f0       	brlt	.+14     	; 0x6b2 <__vector_6+0x32>
		requestTime++;
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	90 93 f5 00 	sts	0x00F5, r25
     6aa:	80 93 f4 00 	sts	0x00F4, r24
		if(requestTime == 12)
     6ae:	0c 97       	sbiw	r24, 0x0c	; 12
     6b0:	01 f1       	breq	.+64     	; 0x6f2 <__vector_6+0x72>
			requestTime = 1;
	}

	avg = 0;
     6b2:	10 92 00 01 	sts	0x0100, r1
     6b6:	10 92 01 01 	sts	0x0101, r1
     6ba:	10 92 02 01 	sts	0x0102, r1
     6be:	10 92 03 01 	sts	0x0103, r1

}

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     6c2:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     6c4:	36 99       	sbic	0x06, 6	; 6
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <__vector_6+0x44>
	adc_value = ADCW; //Store ADC value
     6c8:	84 b1       	in	r24, 0x04	; 4
     6ca:	95 b1       	in	r25, 0x05	; 5
     6cc:	a0 e0       	ldi	r26, 0x00	; 0
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	80 93 00 01 	sts	0x0100, r24
     6d4:	90 93 01 01 	sts	0x0101, r25
     6d8:	a0 93 02 01 	sts	0x0102, r26
     6dc:	b0 93 03 01 	sts	0x0103, r27
	}

	avg = 0;
	avg = filter_adc();

}
     6e0:	bf 91       	pop	r27
     6e2:	af 91       	pop	r26
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti
	if(requestTime == 0){
		requestTime = 1;
	}else if(requestTime > 1){
		requestTime++;
		if(requestTime == 12)
			requestTime = 1;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 f5 00 	sts	0x00F5, r25
     6fa:	80 93 f4 00 	sts	0x00F4, r24
     6fe:	d9 cf       	rjmp	.-78     	; 0x6b2 <__vector_6+0x32>

00000700 <resetcounters>:
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     700:	10 92 0d 01 	sts	0x010D, r1
     704:	10 92 0c 01 	sts	0x010C, r1
	led2Count = 0;
     708:	10 92 09 01 	sts	0x0109, r1
     70c:	10 92 08 01 	sts	0x0108, r1
	led3Count = 0;
     710:	10 92 0b 01 	sts	0x010B, r1
     714:	10 92 0a 01 	sts	0x010A, r1
	led1Up = 0;
     718:	10 92 6b 00 	sts	0x006B, r1
     71c:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     720:	10 92 69 00 	sts	0x0069, r1
     724:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     728:	10 92 6d 00 	sts	0x006D, r1
     72c:	10 92 6c 00 	sts	0x006C, r1
     730:	08 95       	ret

00000732 <updateLCD>:
}

void updateLCD(){
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
	snprintf(disp_avg, 4, "%lu", avg);
     73c:	80 91 03 01 	lds	r24, 0x0103
     740:	8f 93       	push	r24
     742:	80 91 02 01 	lds	r24, 0x0102
     746:	8f 93       	push	r24
     748:	80 91 01 01 	lds	r24, 0x0101
     74c:	8f 93       	push	r24
     74e:	80 91 00 01 	lds	r24, 0x0100
     752:	8f 93       	push	r24
     754:	86 ee       	ldi	r24, 0xE6	; 230
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	1f 92       	push	r1
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	8f 93       	push	r24
     762:	80 91 9c 01 	lds	r24, 0x019C
     766:	8f 93       	push	r24
     768:	80 91 9b 01 	lds	r24, 0x019B
     76c:	8f 93       	push	r24
     76e:	c9 d7       	rcall	.+3986   	; 0x1702 <snprintf>

	LCDWriteStringXY(1, 1, disp_uptime);
     770:	c0 91 9f 01 	lds	r28, 0x019F
     774:	d0 91 a0 01 	lds	r29, 0x01A0
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	87 dd       	rcall	.-1266   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     77e:	ce 01       	movw	r24, r28
     780:	b3 dd       	rcall	.-1178   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	88 e0       	ldi	r24, 0x08	; 8
     786:	82 dd       	rcall	.-1276   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     788:	8a ee       	ldi	r24, 0xEA	; 234
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	ad dd       	rcall	.-1190   	; 0x2e8 <lcd_puts>
void updateLCD(){
	snprintf(disp_avg, 4, "%lu", avg);

	LCDWriteStringXY(1, 1, disp_uptime);
	LCDWriteStringXY(1,9," ");
	snprintf(disp_preset, 2, "%d", preset);
     78e:	80 91 07 01 	lds	r24, 0x0107
     792:	8f 93       	push	r24
     794:	80 91 06 01 	lds	r24, 0x0106
     798:	8f 93       	push	r24
     79a:	cc ee       	ldi	r28, 0xEC	; 236
     79c:	d0 e0       	ldi	r29, 0x00	; 0
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	1f 92       	push	r1
     7a4:	f2 e0       	ldi	r31, 0x02	; 2
     7a6:	ff 2e       	mov	r15, r31
     7a8:	ff 92       	push	r15
     7aa:	80 91 9e 01 	lds	r24, 0x019E
     7ae:	8f 93       	push	r24
     7b0:	80 91 9d 01 	lds	r24, 0x019D
     7b4:	8f 93       	push	r24
     7b6:	a5 d7       	rcall	.+3914   	; 0x1702 <snprintf>
	LCDWriteStringXY(1, 10, disp_preset);
     7b8:	00 91 9d 01 	lds	r16, 0x019D
     7bc:	10 91 9e 01 	lds	r17, 0x019E
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	63 dd       	rcall	.-1338   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     7c6:	c8 01       	movw	r24, r16
     7c8:	8f dd       	rcall	.-1250   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	8a e0       	ldi	r24, 0x0A	; 10
     7ce:	5e dd       	rcall	.-1348   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     7d0:	8f ee       	ldi	r24, 0xEF	; 239
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	89 dd       	rcall	.-1262   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(1, 1, disp_uptime);
	LCDWriteStringXY(1,9," ");
	snprintf(disp_preset, 2, "%d", preset);
	LCDWriteStringXY(1, 10, disp_preset);
	LCDWriteStringXY(1, 11, "/");
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
     7d6:	80 91 97 01 	lds	r24, 0x0197
     7da:	8f 93       	push	r24
     7dc:	80 91 96 01 	lds	r24, 0x0196
     7e0:	8f 93       	push	r24
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	1f 92       	push	r1
     7e8:	ff 92       	push	r15
     7ea:	80 91 9a 01 	lds	r24, 0x019A
     7ee:	1f 92       	push	r1
     7f0:	8f 93       	push	r24
     7f2:	87 d7       	rcall	.+3854   	; 0x1702 <snprintf>
	LCDWriteStringXY(1, 12, disp_maxpreset);
     7f4:	c0 91 9a 01 	lds	r28, 0x019A
     7f8:	d0 e0       	ldi	r29, 0x00	; 0
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	8b e0       	ldi	r24, 0x0B	; 11
     7fe:	46 dd       	rcall	.-1396   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     800:	ce 01       	movw	r24, r28
     802:	72 dd       	rcall	.-1308   	; 0x2e8 <lcd_puts>
	snprintf(disp_preset, 2, "%d", preset);
	LCDWriteStringXY(1, 10, disp_preset);
	LCDWriteStringXY(1, 11, "/");
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
	LCDWriteStringXY(1, 12, disp_maxpreset);
	LCDWriteCharXY(1, 14, progcode);
     804:	c0 91 a1 01 	lds	r28, 0x01A1
void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
}
void LCDWriteCharXY(int x, int y, char s) {
	lcd_gotoxy(y - 1, x - 1);
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	8d e0       	ldi	r24, 0x0D	; 13
     80c:	3f dd       	rcall	.-1410   	; 0x28c <lcd_gotoxy>
	lcd_putc(s);
     80e:	8c 2f       	mov	r24, r28
     810:	58 dd       	rcall	.-1360   	; 0x2c2 <lcd_putc>
	LCDWriteStringXY(1, 11, "/");
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
	LCDWriteStringXY(1, 12, disp_maxpreset);
	LCDWriteCharXY(1, 14, progcode);

	LCDWriteStringXY(2, 1, disp_avg);
     812:	c0 91 9b 01 	lds	r28, 0x019B
     816:	d0 91 9c 01 	lds	r29, 0x019C
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	36 dd       	rcall	.-1428   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     820:	8d b7       	in	r24, 0x3d	; 61
     822:	9e b7       	in	r25, 0x3e	; 62
     824:	4a 96       	adiw	r24, 0x1a	; 26
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	9e bf       	out	0x3e, r25	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	8d bf       	out	0x3d, r24	; 61
     830:	ce 01       	movw	r24, r28
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
	LCDWriteStringXY(1, 12, disp_maxpreset);
	LCDWriteCharXY(1, 14, progcode);

	LCDWriteStringXY(2, 1, disp_avg);
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
     83c:	55 cd       	rjmp	.-1366   	; 0x2e8 <lcd_puts>

0000083e <main>:


int doLCD = 0;

int main() {
	maxpreset = 9;
     83e:	89 e0       	ldi	r24, 0x09	; 9
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	90 93 97 01 	sts	0x0197, r25
     846:	80 93 96 01 	sts	0x0196, r24
	progcode = 'Z';
     84a:	8a e5       	ldi	r24, 0x5A	; 90
     84c:	80 93 a1 01 	sts	0x01A1, r24

	disp_avg = malloc(6 * sizeof(char));
     850:	86 e0       	ldi	r24, 0x06	; 6
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	2f d6       	rcall	.+3166   	; 0x14b4 <malloc>
     856:	90 93 9c 01 	sts	0x019C, r25
     85a:	80 93 9b 01 	sts	0x019B, r24
	disp_preset = malloc(2 * sizeof(char));
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	28 d6       	rcall	.+3152   	; 0x14b4 <malloc>
     864:	90 93 9e 01 	sts	0x019E, r25
     868:	80 93 9d 01 	sts	0x019D, r24
	disp_maxpreset = malloc(2 * sizeof(char));
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	21 d6       	rcall	.+3138   	; 0x14b4 <malloc>
     872:	80 93 9a 01 	sts	0x019A, r24
	disp_uptime = malloc(8 * sizeof(char));
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	1c d6       	rcall	.+3128   	; 0x14b4 <malloc>
     87c:	90 93 a0 01 	sts	0x01A0, r25
     880:	80 93 9f 01 	sts	0x019F, r24
	disp_lastchange = malloc(8 * sizeof(char));
     884:	88 e0       	ldi	r24, 0x08	; 8
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	15 d6       	rcall	.+3114   	; 0x14b4 <malloc>
     88a:	90 93 95 01 	sts	0x0195, r25
     88e:	80 93 94 01 	sts	0x0194, r24

	message = malloc(6 * sizeof(char));
     892:	86 e0       	ldi	r24, 0x06	; 6
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e d6       	rcall	.+3100   	; 0x14b4 <malloc>
     898:	90 93 99 01 	sts	0x0199, r25
     89c:	80 93 98 01 	sts	0x0198, r24
	avg = 0;
     8a0:	10 92 00 01 	sts	0x0100, r1
     8a4:	10 92 01 01 	sts	0x0101, r1
     8a8:	10 92 02 01 	sts	0x0102, r1
     8ac:	10 92 03 01 	sts	0x0103, r1
	lastAvg = 0;
     8b0:	10 92 fc 00 	sts	0x00FC, r1
     8b4:	10 92 fd 00 	sts	0x00FD, r1
     8b8:	10 92 fe 00 	sts	0x00FE, r1
     8bc:	10 92 ff 00 	sts	0x00FF, r1
	return 0;
}

static void setup() {

	DDRD = 0xff; //PORTD as OUTPUT
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00; //All pins of PORTD LOW
     8c4:	12 ba       	out	0x12, r1	; 18

	DDRC &= ~(1 << PC0);
     8c6:	a0 98       	cbi	0x14, 0	; 20
	DDRC &= ~(1 << PC1);
     8c8:	a1 98       	cbi	0x14, 1	; 20

	lcd_init(LCD_DISP_ON);
     8ca:	8c e0       	ldi	r24, 0x0C	; 12
     8cc:	2d dd       	rcall	.-1446   	; 0x328 <lcd_init>
	uartInit();
     8ce:	93 d4       	rcall	.+2342   	; 0x11f6 <uartInit>
	rprintfInit(uartSendByte);
     8d0:	89 e4       	ldi	r24, 0x49	; 73
     8d2:	99 e0       	ldi	r25, 0x09	; 9
     8d4:	d3 d1       	rcall	.+934    	; 0xc7c <rprintfInit>

	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS0);
     8d6:	85 e8       	ldi	r24, 0x85	; 133
     8d8:	86 b9       	out	0x06, r24	; 6
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
	ADMUX = 0x05; // ADC input channel set to PC5
     8da:	85 e0       	ldi	r24, 0x05	; 5
     8dc:	87 b9       	out	0x07, r24	; 7

	//LED timer interrupts
	OCR2 = 32;
     8de:	80 e2       	ldi	r24, 0x20	; 32
     8e0:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1 << WGM21); // Set to CTC Mode
     8e2:	85 b5       	in	r24, 0x25	; 37
     8e4:	88 60       	ori	r24, 0x08	; 8
     8e6:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2); //Set interrupt on compare match
     8e8:	89 b7       	in	r24, 0x39	; 57
     8ea:	80 68       	ori	r24, 0x80	; 128
     8ec:	89 bf       	out	0x39, r24	; 57
	TCCR2 |= (1 << CS21); // set prescaler to 64 and starts PWM
     8ee:	85 b5       	in	r24, 0x25	; 37
     8f0:	82 60       	ori	r24, 0x02	; 2
     8f2:	85 bd       	out	0x25, r24	; 37


	//ADCread+requesttime timer
	OCR1A = 7930;
     8f4:	8a ef       	ldi	r24, 0xFA	; 250
     8f6:	9e e1       	ldi	r25, 0x1E	; 30
     8f8:	9b bd       	out	0x2b, r25	; 43
     8fa:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << WGM12);
     8fc:	8e b5       	in	r24, 0x2e	; 46
     8fe:	88 60       	ori	r24, 0x08	; 8
     900:	8e bd       	out	0x2e, r24	; 46
	// Mode 4, CTC on OCR1A
	TIMSK |= (1 << OCIE1A);
     902:	89 b7       	in	r24, 0x39	; 57
     904:	80 61       	ori	r24, 0x10	; 16
     906:	89 bf       	out	0x39, r24	; 57
	//Set interrupt on compare match
	TCCR1B |= (1 << CS12) | (1 << CS10);
     908:	8e b5       	in	r24, 0x2e	; 46
     90a:	85 60       	ori	r24, 0x05	; 5
     90c:	8e bd       	out	0x2e, r24	; 46
	// set prescaler to 1024 and start the timer


	sei();
     90e:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	9e e4       	ldi	r25, 0x4E	; 78
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <main+0xd6>
	lastAvg = 0;
	setup();
	int i = 0;


	rprintfChar('I');
     918:	89 e4       	ldi	r24, 0x49	; 73
     91a:	b5 d1       	rcall	.+874    	; 0xc86 <rprintfChar>
	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
			butUpPressed = 1;
     91c:	cc 24       	eor	r12, r12
     91e:	c3 94       	inc	r12
     920:	d1 2c       	mov	r13, r1
			lastpreset = preset;
		}

		if(requestTime == 1){
			rprintfChar('T');
			requestTime = 2;
     922:	52 e0       	ldi	r21, 0x02	; 2
     924:	a5 2e       	mov	r10, r21
     926:	b1 2c       	mov	r11, r1
     928:	c0 e4       	ldi	r28, 0x40	; 64
     92a:	dc e9       	ldi	r29, 0x9C	; 156
     92c:	d2 c0       	rjmp	.+420    	; 0xad2 <main+0x294>


	rprintfChar('I');
	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
     92e:	80 91 fa 00 	lds	r24, 0x00FA
     932:	90 91 fb 00 	lds	r25, 0x00FB
     936:	89 2b       	or	r24, r25
     938:	09 f0       	breq	.+2      	; 0x93c <main+0xfe>
     93a:	cd c0       	rjmp	.+410    	; 0xad6 <main+0x298>
			butUpPressed = 1;
     93c:	d0 92 fb 00 	sts	0x00FB, r13
     940:	c0 92 fa 00 	sts	0x00FA, r12
			if (preset < maxpreset) {
     944:	80 91 06 01 	lds	r24, 0x0106
     948:	90 91 07 01 	lds	r25, 0x0107
     94c:	20 91 96 01 	lds	r18, 0x0196
     950:	30 91 97 01 	lds	r19, 0x0197
     954:	82 17       	cp	r24, r18
     956:	93 07       	cpc	r25, r19
     958:	ec f4       	brge	.+58     	; 0x994 <main+0x156>
				preset++;
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	90 93 07 01 	sts	0x0107, r25
     960:	80 93 06 01 	sts	0x0106, r24
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     964:	10 92 0d 01 	sts	0x010D, r1
     968:	10 92 0c 01 	sts	0x010C, r1
	led2Count = 0;
     96c:	10 92 09 01 	sts	0x0109, r1
     970:	10 92 08 01 	sts	0x0108, r1
	led3Count = 0;
     974:	10 92 0b 01 	sts	0x010B, r1
     978:	10 92 0a 01 	sts	0x010A, r1
	led1Up = 0;
     97c:	10 92 6b 00 	sts	0x006B, r1
     980:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     984:	10 92 69 00 	sts	0x0069, r1
     988:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     98c:	10 92 6d 00 	sts	0x006D, r1
     990:	10 92 6c 00 	sts	0x006C, r1
			}
		}else if(!(PINC & (1 << PC0)) && butUpPressed == 1){
			butUpPressed = 0;
		}

		if ((PINC & (1 << PC1)) && butDnPressed == 0) {
     994:	99 9b       	sbis	0x13, 1	; 19
     996:	ae c0       	rjmp	.+348    	; 0xaf4 <main+0x2b6>
     998:	80 91 f8 00 	lds	r24, 0x00F8
     99c:	90 91 f9 00 	lds	r25, 0x00F9
     9a0:	89 2b       	or	r24, r25
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <main+0x168>
     9a4:	a7 c0       	rjmp	.+334    	; 0xaf4 <main+0x2b6>
			butDnPressed = 1;
     9a6:	d0 92 f9 00 	sts	0x00F9, r13
     9aa:	c0 92 f8 00 	sts	0x00F8, r12
			if (preset > 0) {
     9ae:	80 91 06 01 	lds	r24, 0x0106
     9b2:	90 91 07 01 	lds	r25, 0x0107
     9b6:	18 16       	cp	r1, r24
     9b8:	19 06       	cpc	r1, r25
     9ba:	ec f4       	brge	.+58     	; 0x9f6 <main+0x1b8>
				preset--;
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	90 93 07 01 	sts	0x0107, r25
     9c2:	80 93 06 01 	sts	0x0106, r24
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     9c6:	10 92 0d 01 	sts	0x010D, r1
     9ca:	10 92 0c 01 	sts	0x010C, r1
	led2Count = 0;
     9ce:	10 92 09 01 	sts	0x0109, r1
     9d2:	10 92 08 01 	sts	0x0108, r1
	led3Count = 0;
     9d6:	10 92 0b 01 	sts	0x010B, r1
     9da:	10 92 0a 01 	sts	0x010A, r1
	led1Up = 0;
     9de:	10 92 6b 00 	sts	0x006B, r1
     9e2:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     9e6:	10 92 69 00 	sts	0x0069, r1
     9ea:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     9ee:	10 92 6d 00 	sts	0x006D, r1
     9f2:	10 92 6c 00 	sts	0x006C, r1
		}else if(!(PINC & (1 << PC1)) && butDnPressed == 1){
			butDnPressed = 0;
		}

		//check changes to send to pc
		if (avg != lastAvg) {
     9f6:	40 91 00 01 	lds	r20, 0x0100
     9fa:	50 91 01 01 	lds	r21, 0x0101
     9fe:	60 91 02 01 	lds	r22, 0x0102
     a02:	70 91 03 01 	lds	r23, 0x0103
     a06:	80 91 fc 00 	lds	r24, 0x00FC
     a0a:	90 91 fd 00 	lds	r25, 0x00FD
     a0e:	a0 91 fe 00 	lds	r26, 0x00FE
     a12:	b0 91 ff 00 	lds	r27, 0x00FF
     a16:	48 17       	cp	r20, r24
     a18:	59 07       	cpc	r21, r25
     a1a:	6a 07       	cpc	r22, r26
     a1c:	7b 07       	cpc	r23, r27
     a1e:	f9 f0       	breq	.+62     	; 0xa5e <main+0x220>
			rprintfChar('L');
     a20:	8c e4       	ldi	r24, 0x4C	; 76
     a22:	31 d1       	rcall	.+610    	; 0xc86 <rprintfChar>
			rprintfNum(10, 4, FALSE, '0', avg);
     a24:	e0 90 00 01 	lds	r14, 0x0100
     a28:	f0 90 01 01 	lds	r15, 0x0101
     a2c:	00 91 02 01 	lds	r16, 0x0102
     a30:	10 91 03 01 	lds	r17, 0x0103
     a34:	20 e3       	ldi	r18, 0x30	; 48
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	64 e0       	ldi	r22, 0x04	; 4
     a3a:	8a e0       	ldi	r24, 0x0A	; 10
     a3c:	30 d2       	rcall	.+1120   	; 0xe9e <rprintfNum>
			lastAvg = avg;
     a3e:	80 91 00 01 	lds	r24, 0x0100
     a42:	90 91 01 01 	lds	r25, 0x0101
     a46:	a0 91 02 01 	lds	r26, 0x0102
     a4a:	b0 91 03 01 	lds	r27, 0x0103
     a4e:	80 93 fc 00 	sts	0x00FC, r24
     a52:	90 93 fd 00 	sts	0x00FD, r25
     a56:	a0 93 fe 00 	sts	0x00FE, r26
     a5a:	b0 93 ff 00 	sts	0x00FF, r27
		}

		if (preset != lastpreset) {
     a5e:	20 91 06 01 	lds	r18, 0x0106
     a62:	30 91 07 01 	lds	r19, 0x0107
     a66:	80 91 04 01 	lds	r24, 0x0104
     a6a:	90 91 05 01 	lds	r25, 0x0105
     a6e:	28 17       	cp	r18, r24
     a70:	39 07       	cpc	r19, r25
     a72:	b9 f0       	breq	.+46     	; 0xaa2 <main+0x264>
			rprintfChar('P');
     a74:	80 e5       	ldi	r24, 0x50	; 80
     a76:	07 d1       	rcall	.+526    	; 0xc86 <rprintfChar>
			rprintfNum(10, 4, FALSE, '0', preset);
     a78:	e0 90 06 01 	lds	r14, 0x0106
     a7c:	f0 90 07 01 	lds	r15, 0x0107
     a80:	00 27       	eor	r16, r16
     a82:	f7 fc       	sbrc	r15, 7
     a84:	00 95       	com	r16
     a86:	10 2f       	mov	r17, r16
     a88:	20 e3       	ldi	r18, 0x30	; 48
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	8a e0       	ldi	r24, 0x0A	; 10
     a90:	06 d2       	rcall	.+1036   	; 0xe9e <rprintfNum>
			lastpreset = preset;
     a92:	80 91 06 01 	lds	r24, 0x0106
     a96:	90 91 07 01 	lds	r25, 0x0107
     a9a:	90 93 05 01 	sts	0x0105, r25
     a9e:	80 93 04 01 	sts	0x0104, r24
		}

		if(requestTime == 1){
     aa2:	80 91 f4 00 	lds	r24, 0x00F4
     aa6:	90 91 f5 00 	lds	r25, 0x00F5
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	09 f4       	brne	.+2      	; 0xab0 <main+0x272>
     aae:	41 c0       	rjmp	.+130    	; 0xb32 <main+0x2f4>
			rprintfChar('T');
			requestTime = 2;
		}

		//read preset from PC
		if (!uartReceiveBufferIsEmpty()) {
     ab0:	2b d4       	rcall	.+2134   	; 0x1308 <uartReceiveBufferIsEmpty>
     ab2:	88 23       	and	r24, r24
     ab4:	69 f1       	breq	.+90     	; 0xb10 <main+0x2d2>
				}
			}

		}

		doLCD++;
     ab6:	80 91 f2 00 	lds	r24, 0x00F2
     aba:	90 91 f3 00 	lds	r25, 0x00F3
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	90 93 f3 00 	sts	0x00F3, r25
     ac4:	80 93 f2 00 	sts	0x00F2, r24
		if(doLCD == 25){
     ac8:	49 97       	sbiw	r24, 0x19	; 25
     aca:	d1 f1       	breq	.+116    	; 0xb40 <main+0x302>
     acc:	ce 01       	movw	r24, r28
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <main+0x290>


	rprintfChar('I');
	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
     ad2:	98 99       	sbic	0x13, 0	; 19
     ad4:	2c cf       	rjmp	.-424    	; 0x92e <main+0xf0>
			butUpPressed = 1;
			if (preset < maxpreset) {
				preset++;
				resetcounters();
			}
		}else if(!(PINC & (1 << PC0)) && butUpPressed == 1){
     ad6:	98 99       	sbic	0x13, 0	; 19
     ad8:	5d cf       	rjmp	.-326    	; 0x994 <main+0x156>
     ada:	80 91 fa 00 	lds	r24, 0x00FA
     ade:	90 91 fb 00 	lds	r25, 0x00FB
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	09 f0       	breq	.+2      	; 0xae8 <main+0x2aa>
     ae6:	56 cf       	rjmp	.-340    	; 0x994 <main+0x156>
			butUpPressed = 0;
     ae8:	10 92 fb 00 	sts	0x00FB, r1
     aec:	10 92 fa 00 	sts	0x00FA, r1
		}

		if ((PINC & (1 << PC1)) && butDnPressed == 0) {
     af0:	99 99       	sbic	0x13, 1	; 19
     af2:	52 cf       	rjmp	.-348    	; 0x998 <main+0x15a>
			butDnPressed = 1;
			if (preset > 0) {
				preset--;
				resetcounters();
			}
		}else if(!(PINC & (1 << PC1)) && butDnPressed == 1){
     af4:	99 99       	sbic	0x13, 1	; 19
     af6:	7f cf       	rjmp	.-258    	; 0x9f6 <main+0x1b8>
     af8:	80 91 f8 00 	lds	r24, 0x00F8
     afc:	90 91 f9 00 	lds	r25, 0x00F9
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	09 f0       	breq	.+2      	; 0xb06 <main+0x2c8>
     b04:	78 cf       	rjmp	.-272    	; 0x9f6 <main+0x1b8>
			butDnPressed = 0;
     b06:	10 92 f9 00 	sts	0x00F9, r1
     b0a:	10 92 f8 00 	sts	0x00F8, r1
     b0e:	73 cf       	rjmp	.-282    	; 0x9f6 <main+0x1b8>
			requestTime = 2;
		}

		//read preset from PC
		if (!uartReceiveBufferIsEmpty()) {
			pc_read = uartGetByte();
     b10:	e3 d3       	rcall	.+1990   	; 0x12d8 <uartGetByte>
     b12:	90 93 f7 00 	sts	0x00F7, r25
     b16:	80 93 f6 00 	sts	0x00F6, r24
			if (pc_read != -1){
     b1a:	8f 3f       	cpi	r24, 0xFF	; 255
     b1c:	2f ef       	ldi	r18, 0xFF	; 255
     b1e:	92 07       	cpc	r25, r18
     b20:	51 f2       	breq	.-108    	; 0xab6 <main+0x278>
				if(pc_read >= 0 && pc_read < 10){
     b22:	8a 30       	cpi	r24, 0x0A	; 10
     b24:	91 05       	cpc	r25, r1
     b26:	90 f4       	brcc	.+36     	; 0xb4c <main+0x30e>
					preset = pc_read;
     b28:	90 93 07 01 	sts	0x0107, r25
     b2c:	80 93 06 01 	sts	0x0106, r24
     b30:	c2 cf       	rjmp	.-124    	; 0xab6 <main+0x278>
			rprintfNum(10, 4, FALSE, '0', preset);
			lastpreset = preset;
		}

		if(requestTime == 1){
			rprintfChar('T');
     b32:	84 e5       	ldi	r24, 0x54	; 84
     b34:	a8 d0       	rcall	.+336    	; 0xc86 <rprintfChar>
			requestTime = 2;
     b36:	b0 92 f5 00 	sts	0x00F5, r11
     b3a:	a0 92 f4 00 	sts	0x00F4, r10
     b3e:	b8 cf       	rjmp	.-144    	; 0xab0 <main+0x272>

		}

		doLCD++;
		if(doLCD == 25){
			updateLCD();
     b40:	f8 dd       	rcall	.-1040   	; 0x732 <updateLCD>
			doLCD = 0;
     b42:	10 92 f3 00 	sts	0x00F3, r1
     b46:	10 92 f2 00 	sts	0x00F2, r1
     b4a:	c0 cf       	rjmp	.-128    	; 0xacc <main+0x28e>
		if (!uartReceiveBufferIsEmpty()) {
			pc_read = uartGetByte();
			if (pc_read != -1){
				if(pc_read >= 0 && pc_read < 10){
					preset = pc_read;
				}else if(pc_read == '#'){
     b4c:	83 32       	cpi	r24, 0x23	; 35
     b4e:	91 05       	cpc	r25, r1
     b50:	f9 f0       	breq	.+62     	; 0xb90 <main+0x352>
					while(uartReceiveBufferIsEmpty());
					maxpreset = uartGetByte();
					preset = 0;
					while(uartReceiveBufferIsEmpty());
					progcode = uartGetByte();
				}else if(pc_read == '$'){
     b52:	84 32       	cpi	r24, 0x24	; 36
     b54:	91 05       	cpc	r25, r1
     b56:	79 f1       	breq	.+94     	; 0xbb6 <main+0x378>
					led1Counterdn[presettomodify] = uartGetByte();
					while(uartReceiveBufferIsEmpty());
					led2Counterdn[presettomodify] = uartGetByte();
					while(uartReceiveBufferIsEmpty());
					led3Counterdn[presettomodify] = uartGetByte();
				}else if(pc_read == 'T'){
     b58:	84 35       	cpi	r24, 0x54	; 84
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f0       	breq	.+2      	; 0xb60 <main+0x322>
     b5e:	ab cf       	rjmp	.-170    	; 0xab6 <main+0x278>
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	10 e0       	ldi	r17, 0x00	; 0
					for(i = 0; i < 8; i++){
						while(uartReceiveBufferIsEmpty());
     b64:	d1 d3       	rcall	.+1954   	; 0x1308 <uartReceiveBufferIsEmpty>
     b66:	81 11       	cpse	r24, r1
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <main+0x326>
						disp_uptime[i] = uartGetByte();
     b6a:	e0 90 9f 01 	lds	r14, 0x019F
     b6e:	f0 90 a0 01 	lds	r15, 0x01A0
     b72:	e0 0e       	add	r14, r16
     b74:	f1 1e       	adc	r15, r17
     b76:	b0 d3       	rcall	.+1888   	; 0x12d8 <uartGetByte>
     b78:	f7 01       	movw	r30, r14
     b7a:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
					led2Counterdn[presettomodify] = uartGetByte();
					while(uartReceiveBufferIsEmpty());
					led3Counterdn[presettomodify] = uartGetByte();
				}else if(pc_read == 'T'){
					for(i = 0; i < 8; i++){
     b7c:	0f 5f       	subi	r16, 0xFF	; 255
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	08 30       	cpi	r16, 0x08	; 8
     b82:	11 05       	cpc	r17, r1
     b84:	79 f7       	brne	.-34     	; 0xb64 <main+0x326>
						while(uartReceiveBufferIsEmpty());
						disp_uptime[i] = uartGetByte();
					}
					requestTime = 0;
     b86:	10 92 f5 00 	sts	0x00F5, r1
     b8a:	10 92 f4 00 	sts	0x00F4, r1
     b8e:	93 cf       	rjmp	.-218    	; 0xab6 <main+0x278>
			pc_read = uartGetByte();
			if (pc_read != -1){
				if(pc_read >= 0 && pc_read < 10){
					preset = pc_read;
				}else if(pc_read == '#'){
					while(uartReceiveBufferIsEmpty());
     b90:	bb d3       	rcall	.+1910   	; 0x1308 <uartReceiveBufferIsEmpty>
     b92:	81 11       	cpse	r24, r1
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <main+0x352>
					maxpreset = uartGetByte();
     b96:	a0 d3       	rcall	.+1856   	; 0x12d8 <uartGetByte>
     b98:	90 93 97 01 	sts	0x0197, r25
     b9c:	80 93 96 01 	sts	0x0196, r24
					preset = 0;
     ba0:	10 92 07 01 	sts	0x0107, r1
     ba4:	10 92 06 01 	sts	0x0106, r1
					while(uartReceiveBufferIsEmpty());
     ba8:	af d3       	rcall	.+1886   	; 0x1308 <uartReceiveBufferIsEmpty>
     baa:	81 11       	cpse	r24, r1
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <main+0x36a>
					progcode = uartGetByte();
     bae:	94 d3       	rcall	.+1832   	; 0x12d8 <uartGetByte>
     bb0:	80 93 a1 01 	sts	0x01A1, r24
     bb4:	80 cf       	rjmp	.-256    	; 0xab6 <main+0x278>
				}else if(pc_read == '$'){
					while(uartReceiveBufferIsEmpty());
     bb6:	a8 d3       	rcall	.+1872   	; 0x1308 <uartReceiveBufferIsEmpty>
     bb8:	81 11       	cpse	r24, r1
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <main+0x378>
					presettomodify = uartGetByte();
     bbc:	8d d3       	rcall	.+1818   	; 0x12d8 <uartGetByte>
     bbe:	90 93 67 00 	sts	0x0067, r25
     bc2:	80 93 66 00 	sts	0x0066, r24
					while(uartReceiveBufferIsEmpty());
     bc6:	a0 d3       	rcall	.+1856   	; 0x1308 <uartReceiveBufferIsEmpty>
     bc8:	81 11       	cpse	r24, r1
     bca:	fd cf       	rjmp	.-6      	; 0xbc6 <main+0x388>
					led1Counterup[presettomodify] = uartGetByte();
     bcc:	00 91 66 00 	lds	r16, 0x0066
     bd0:	10 91 67 00 	lds	r17, 0x0067
     bd4:	81 d3       	rcall	.+1794   	; 0x12d8 <uartGetByte>
     bd6:	f8 01       	movw	r30, r16
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	ee 52       	subi	r30, 0x2E	; 46
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     be4:	91 d3       	rcall	.+1826   	; 0x1308 <uartReceiveBufferIsEmpty>
     be6:	81 11       	cpse	r24, r1
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <main+0x3a6>
					led2Counterup[presettomodify] = uartGetByte();
     bea:	00 91 66 00 	lds	r16, 0x0066
     bee:	10 91 67 00 	lds	r17, 0x0067
     bf2:	72 d3       	rcall	.+1764   	; 0x12d8 <uartGetByte>
     bf4:	f8 01       	movw	r30, r16
     bf6:	ee 0f       	add	r30, r30
     bf8:	ff 1f       	adc	r31, r31
     bfa:	e2 54       	subi	r30, 0x42	; 66
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	91 83       	std	Z+1, r25	; 0x01
     c00:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     c02:	82 d3       	rcall	.+1796   	; 0x1308 <uartReceiveBufferIsEmpty>
     c04:	81 11       	cpse	r24, r1
     c06:	fd cf       	rjmp	.-6      	; 0xc02 <main+0x3c4>
					led3Counterup[presettomodify] = uartGetByte();
     c08:	00 91 66 00 	lds	r16, 0x0066
     c0c:	10 91 67 00 	lds	r17, 0x0067
     c10:	63 d3       	rcall	.+1734   	; 0x12d8 <uartGetByte>
     c12:	f8 01       	movw	r30, r16
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	e6 55       	subi	r30, 0x56	; 86
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	80 83       	st	Z, r24

					while(uartReceiveBufferIsEmpty());
     c20:	73 d3       	rcall	.+1766   	; 0x1308 <uartReceiveBufferIsEmpty>
     c22:	81 11       	cpse	r24, r1
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <main+0x3e2>
					led1Counterdn[presettomodify] = uartGetByte();
     c26:	00 91 66 00 	lds	r16, 0x0066
     c2a:	10 91 67 00 	lds	r17, 0x0067
     c2e:	54 d3       	rcall	.+1704   	; 0x12d8 <uartGetByte>
     c30:	f8 01       	movw	r30, r16
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ea 56       	subi	r30, 0x6A	; 106
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	91 83       	std	Z+1, r25	; 0x01
     c3c:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     c3e:	64 d3       	rcall	.+1736   	; 0x1308 <uartReceiveBufferIsEmpty>
     c40:	81 11       	cpse	r24, r1
     c42:	fd cf       	rjmp	.-6      	; 0xc3e <main+0x400>
					led2Counterdn[presettomodify] = uartGetByte();
     c44:	00 91 66 00 	lds	r16, 0x0066
     c48:	10 91 67 00 	lds	r17, 0x0067
     c4c:	45 d3       	rcall	.+1674   	; 0x12d8 <uartGetByte>
     c4e:	f8 01       	movw	r30, r16
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	ee 57       	subi	r30, 0x7E	; 126
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	91 83       	std	Z+1, r25	; 0x01
     c5a:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     c5c:	55 d3       	rcall	.+1706   	; 0x1308 <uartReceiveBufferIsEmpty>
     c5e:	81 11       	cpse	r24, r1
     c60:	fd cf       	rjmp	.-6      	; 0xc5c <main+0x41e>
					led3Counterdn[presettomodify] = uartGetByte();
     c62:	00 91 66 00 	lds	r16, 0x0066
     c66:	10 91 67 00 	lds	r17, 0x0067
     c6a:	36 d3       	rcall	.+1644   	; 0x12d8 <uartGetByte>
     c6c:	f8 01       	movw	r30, r16
     c6e:	ee 0f       	add	r30, r30
     c70:	ff 1f       	adc	r31, r31
     c72:	e2 59       	subi	r30, 0x92	; 146
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	91 83       	std	Z+1, r25	; 0x01
     c78:	80 83       	st	Z, r24
     c7a:	1d cf       	rjmp	.-454    	; 0xab6 <main+0x278>

00000c7c <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     c7c:	90 93 11 01 	sts	0x0111, r25
     c80:	80 93 10 01 	sts	0x0110, r24
     c84:	08 95       	ret

00000c86 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     c86:	cf 93       	push	r28
     c88:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     c8a:	8a 30       	cpi	r24, 0x0A	; 10
     c8c:	39 f0       	breq	.+14     	; 0xc9c <rprintfChar+0x16>
		rputchar('\r');
	// send character
	rputchar(c);
     c8e:	e0 91 10 01 	lds	r30, 0x0110
     c92:	f0 91 11 01 	lds	r31, 0x0111
     c96:	8c 2f       	mov	r24, r28
}
     c98:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     c9a:	09 94       	ijmp
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     c9c:	e0 91 10 01 	lds	r30, 0x0110
     ca0:	f0 91 11 01 	lds	r31, 0x0111
     ca4:	8d e0       	ldi	r24, 0x0D	; 13
     ca6:	09 95       	icall
	// send character
	rputchar(c);
     ca8:	e0 91 10 01 	lds	r30, 0x0110
     cac:	f0 91 11 01 	lds	r31, 0x0111
     cb0:	8c 2f       	mov	r24, r28
}
     cb2:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     cb4:	09 94       	ijmp

00000cb6 <rprintfStr>:
}

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	c9 f0       	breq	.+50     	; 0xcf2 <rprintfStr+0x3c>

	// print the string until a null-terminator
	while (*str)
     cc0:	fc 01       	movw	r30, r24
     cc2:	10 81       	ld	r17, Z
     cc4:	11 23       	and	r17, r17
     cc6:	a9 f0       	breq	.+42     	; 0xcf2 <rprintfStr+0x3c>
     cc8:	ec 01       	movw	r28, r24
     cca:	21 96       	adiw	r28, 0x01	; 1
     ccc:	09 c0       	rjmp	.+18     	; 0xce0 <rprintfStr+0x2a>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     cce:	e0 91 10 01 	lds	r30, 0x0110
     cd2:	f0 91 11 01 	lds	r31, 0x0111
     cd6:	81 2f       	mov	r24, r17
     cd8:	09 95       	icall
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     cda:	19 91       	ld	r17, Y+
     cdc:	11 23       	and	r17, r17
     cde:	49 f0       	breq	.+18     	; 0xcf2 <rprintfStr+0x3c>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     ce0:	1a 30       	cpi	r17, 0x0A	; 10
     ce2:	a9 f7       	brne	.-22     	; 0xcce <rprintfStr+0x18>
		rputchar('\r');
     ce4:	e0 91 10 01 	lds	r30, 0x0110
     ce8:	f0 91 11 01 	lds	r31, 0x0111
     cec:	8d e0       	ldi	r24, 0x0D	; 13
     cee:	09 95       	icall
     cf0:	ee cf       	rjmp	.-36     	; 0xcce <rprintfStr+0x18>
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	08 95       	ret

00000cfa <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	1f 92       	push	r1
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	a9 f1       	breq	.+106    	; 0xd80 <rprintfStrLen+0x86>
     d16:	fc 01       	movw	r30, r24
     d18:	68 0f       	add	r22, r24
     d1a:	79 1f       	adc	r23, r25
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <rprintfStrLen+0x34>
     d1e:	6f 01       	movw	r12, r30
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	c8 1a       	sub	r12, r24
     d24:	d8 0a       	sbc	r13, r24
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     d26:	80 81       	ld	r24, Z
     d28:	88 23       	and	r24, r24
     d2a:	29 f0       	breq	.+10     	; 0xd36 <rprintfStrLen+0x3c>
     d2c:	f6 01       	movw	r30, r12
     d2e:	6f 01       	movw	r12, r30
     d30:	e6 17       	cp	r30, r22
     d32:	f7 07       	cpc	r31, r23
     d34:	a1 f7       	brne	.-24     	; 0xd1e <rprintfStrLen+0x24>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     d36:	e1 14       	cp	r14, r1
     d38:	f1 04       	cpc	r15, r1
     d3a:	11 f1       	breq	.+68     	; 0xd80 <rprintfStrLen+0x86>
     d3c:	00 e0       	ldi	r16, 0x00	; 0
     d3e:	10 e0       	ldi	r17, 0x00	; 0
     d40:	10 c0       	rjmp	.+32     	; 0xd62 <rprintfStrLen+0x68>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
			rprintfChar(*str++);
     d42:	bf ef       	ldi	r27, 0xFF	; 255
     d44:	cb 1a       	sub	r12, r27
     d46:	db 0a       	sbc	r13, r27
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     d48:	9a 30       	cpi	r25, 0x0A	; 10
     d4a:	21 f1       	breq	.+72     	; 0xd94 <rprintfStrLen+0x9a>
		rputchar('\r');
	// send character
	rputchar(c);
     d4c:	e0 91 10 01 	lds	r30, 0x0110
     d50:	f0 91 11 01 	lds	r31, 0x0111
     d54:	89 2f       	mov	r24, r25
     d56:	09 95       	icall
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     d58:	0f 5f       	subi	r16, 0xFF	; 255
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	0e 15       	cp	r16, r14
     d5e:	1f 05       	cpc	r17, r15
     d60:	79 f0       	breq	.+30     	; 0xd80 <rprintfStrLen+0x86>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     d62:	d6 01       	movw	r26, r12
     d64:	9c 91       	ld	r25, X
     d66:	91 11       	cpse	r25, r1
     d68:	ec cf       	rjmp	.-40     	; 0xd42 <rprintfStrLen+0x48>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     d6a:	e0 91 10 01 	lds	r30, 0x0110
     d6e:	f0 91 11 01 	lds	r31, 0x0111
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	09 95       	icall
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     d76:	0f 5f       	subi	r16, 0xFF	; 255
     d78:	1f 4f       	sbci	r17, 0xFF	; 255
     d7a:	0e 15       	cp	r16, r14
     d7c:	1f 05       	cpc	r17, r15
     d7e:	89 f7       	brne	.-30     	; 0xd62 <rprintfStrLen+0x68>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	08 95       	ret
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     d94:	e0 91 10 01 	lds	r30, 0x0110
     d98:	f0 91 11 01 	lds	r31, 0x0111
     d9c:	8d e0       	ldi	r24, 0x0D	; 13
     d9e:	99 83       	std	Y+1, r25	; 0x01
     da0:	09 95       	icall
     da2:	99 81       	ldd	r25, Y+1	; 0x01
     da4:	d3 cf       	rjmp	.-90     	; 0xd4c <rprintfStrLen+0x52>

00000da6 <rprintfProgStr>:
}

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const char str[])
{
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	d9 f0       	breq	.+54     	; 0xde6 <rprintfProgStr+0x40>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     db0:	ec 01       	movw	r28, r24
     db2:	21 96       	adiw	r28, 0x01	; 1
     db4:	fc 01       	movw	r30, r24
     db6:	14 91       	lpm	r17, Z
     db8:	11 11       	cpse	r17, r1
     dba:	0c c0       	rjmp	.+24     	; 0xdd4 <rprintfProgStr+0x2e>
     dbc:	14 c0       	rjmp	.+40     	; 0xde6 <rprintfProgStr+0x40>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     dbe:	e0 91 10 01 	lds	r30, 0x0110
     dc2:	f0 91 11 01 	lds	r31, 0x0111
     dc6:	81 2f       	mov	r24, r17
     dc8:	09 95       	icall

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     dca:	fe 01       	movw	r30, r28
     dcc:	14 91       	lpm	r17, Z
     dce:	21 96       	adiw	r28, 0x01	; 1
     dd0:	11 23       	and	r17, r17
     dd2:	49 f0       	breq	.+18     	; 0xde6 <rprintfProgStr+0x40>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     dd4:	1a 30       	cpi	r17, 0x0A	; 10
     dd6:	99 f7       	brne	.-26     	; 0xdbe <rprintfProgStr+0x18>
		rputchar('\r');
     dd8:	e0 91 10 01 	lds	r30, 0x0110
     ddc:	f0 91 11 01 	lds	r31, 0x0111
     de0:	8d e0       	ldi	r24, 0x0D	; 13
     de2:	09 95       	icall
     de4:	ec cf       	rjmp	.-40     	; 0xdbe <rprintfProgStr+0x18>
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <rprintfCRLF>:
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     dee:	e0 91 10 01 	lds	r30, 0x0110
     df2:	f0 91 11 01 	lds	r31, 0x0111
     df6:	8d e0       	ldi	r24, 0x0D	; 13
     df8:	09 95       	icall
	// send character
	rputchar(c);
     dfa:	e0 91 10 01 	lds	r30, 0x0110
     dfe:	f0 91 11 01 	lds	r31, 0x0111
     e02:	8a e0       	ldi	r24, 0x0A	; 10
     e04:	09 94       	ijmp

00000e06 <rprintfu04>:
}

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data)
{
     e06:	cf 93       	push	r28
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     e08:	8f 70       	andi	r24, 0x0F	; 15
     e0a:	e8 2f       	mov	r30, r24
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ea 5d       	subi	r30, 0xDA	; 218
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	c4 91       	lpm	r28, Z
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     e14:	ca 30       	cpi	r28, 0x0A	; 10
     e16:	39 f0       	breq	.+14     	; 0xe26 <rprintfu04+0x20>
		rputchar('\r');
	// send character
	rputchar(c);
     e18:	e0 91 10 01 	lds	r30, 0x0110
     e1c:	f0 91 11 01 	lds	r31, 0x0111
     e20:	8c 2f       	mov	r24, r28
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
}
     e22:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     e24:	09 94       	ijmp
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     e26:	e0 91 10 01 	lds	r30, 0x0110
     e2a:	f0 91 11 01 	lds	r31, 0x0111
     e2e:	8d e0       	ldi	r24, 0x0D	; 13
     e30:	09 95       	icall
	// send character
	rputchar(c);
     e32:	e0 91 10 01 	lds	r30, 0x0110
     e36:	f0 91 11 01 	lds	r31, 0x0111
     e3a:	8c 2f       	mov	r24, r28
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
}
     e3c:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     e3e:	09 94       	ijmp

00000e40 <rprintfu08>:
}

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     e40:	cf 93       	push	r28
     e42:	c8 2f       	mov	r28, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     e44:	82 95       	swap	r24
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	de df       	rcall	.-68     	; 0xe06 <rprintfu04>
	rprintfu04(data);
     e4a:	8c 2f       	mov	r24, r28
}
     e4c:	cf 91       	pop	r28
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
     e4e:	db cf       	rjmp	.-74     	; 0xe06 <rprintfu04>

00000e50 <rprintfu16>:
}

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	1f 92       	push	r1
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	18 2f       	mov	r17, r24
// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
     e5e:	89 2f       	mov	r24, r25
     e60:	82 95       	swap	r24
     e62:	8f 70       	andi	r24, 0x0F	; 15
     e64:	99 83       	std	Y+1, r25	; 0x01
     e66:	cf df       	rcall	.-98     	; 0xe06 <rprintfu04>
	rprintfu04(data);
     e68:	99 81       	ldd	r25, Y+1	; 0x01
     e6a:	89 2f       	mov	r24, r25
     e6c:	cc df       	rcall	.-104    	; 0xe06 <rprintfu04>
// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
     e6e:	81 2f       	mov	r24, r17
     e70:	82 95       	swap	r24
     e72:	8f 70       	andi	r24, 0x0F	; 15
     e74:	c8 df       	rcall	.-112    	; 0xe06 <rprintfu04>
	rprintfu04(data);
     e76:	81 2f       	mov	r24, r17
void rprintfu16(unsigned short data)
{
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
}
     e78:	0f 90       	pop	r0
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
     e80:	c2 cf       	rjmp	.-124    	; 0xe06 <rprintfu04>

00000e82 <rprintfu32>:
}

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     e82:	cf 92       	push	r12
     e84:	df 92       	push	r13
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	6b 01       	movw	r12, r22
     e8c:	7c 01       	movw	r14, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     e8e:	c7 01       	movw	r24, r14
     e90:	df df       	rcall	.-66     	; 0xe50 <rprintfu16>
	rprintfu16(data);
     e92:	c6 01       	movw	r24, r12
}
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
	// print 32-bit hex value
	rprintfu16(data>>16);
	rprintfu16(data);
     e9c:	d9 cf       	rjmp	.-78     	; 0xe50 <rprintfu16>

00000e9e <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     e9e:	3f 92       	push	r3
     ea0:	4f 92       	push	r4
     ea2:	5f 92       	push	r5
     ea4:	6f 92       	push	r6
     ea6:	7f 92       	push	r7
     ea8:	8f 92       	push	r8
     eaa:	9f 92       	push	r9
     eac:	af 92       	push	r10
     eae:	bf 92       	push	r11
     eb0:	cf 92       	push	r12
     eb2:	df 92       	push	r13
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	a9 97       	sbiw	r28, 0x29	; 41
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	36 2e       	mov	r3, r22
     ed2:	72 2e       	mov	r7, r18
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
     ed4:	44 23       	and	r20, r20
     ed6:	11 f0       	breq	.+4      	; 0xedc <rprintfNum+0x3e>
     ed8:	17 fd       	sbrc	r17, 7
     eda:	9f c0       	rjmp	.+318    	; 0x101a <rprintfNum+0x17c>
	{
		x = -n;
	}
	else
	{
	 	x = n;
     edc:	47 01       	movw	r8, r14
     ede:	58 01       	movw	r10, r16
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
     ee0:	dd 24       	eor	r13, r13
     ee2:	d3 94       	inc	r13
     ee4:	41 11       	cpse	r20, r1
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <rprintfNum+0x4c>
     ee8:	d1 2c       	mov	r13, r1
     eea:	cc 24       	eor	r12, r12
     eec:	ca 94       	dec	r12
     eee:	c3 0c       	add	r12, r3
     ef0:	cd 18       	sub	r12, r13
  	p = buf + sizeof (buf);
  	*--p = '\0';
     ef2:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	29 a3       	std	Y+33, r18	; 0x21
     efe:	3a a3       	std	Y+34, r19	; 0x22
     f00:	4b a3       	std	Y+35, r20	; 0x23
     f02:	5c a3       	std	Y+36, r21	; 0x24
     f04:	c5 01       	movw	r24, r10
     f06:	b4 01       	movw	r22, r8
     f08:	a7 d2       	rcall	.+1358   	; 0x1458 <__udivmodsi4>
     f0a:	fb 01       	movw	r30, r22
     f0c:	ef 70       	andi	r30, 0x0F	; 15
     f0e:	ff 27       	eor	r31, r31
     f10:	ea 5d       	subi	r30, 0xDA	; 218
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	64 91       	lpm	r22, Z
     f16:	6f 8f       	std	Y+31, r22	; 0x1f
     f18:	c5 01       	movw	r24, r10
     f1a:	b4 01       	movw	r22, r8
     f1c:	29 a1       	ldd	r18, Y+33	; 0x21
     f1e:	3a a1       	ldd	r19, Y+34	; 0x22
     f20:	4b a1       	ldd	r20, Y+35	; 0x23
     f22:	5c a1       	ldd	r21, Y+36	; 0x24
     f24:	99 d2       	rcall	.+1330   	; 0x1458 <__udivmodsi4>
     f26:	49 01       	movw	r8, r18
     f28:	5a 01       	movw	r10, r20
     f2a:	2e 01       	movw	r4, r28
     f2c:	3e e1       	ldi	r19, 0x1E	; 30
     f2e:	43 0e       	add	r4, r19
     f30:	51 1c       	adc	r5, r1
     f32:	ed a2       	std	Y+37, r14	; 0x25
     f34:	fe a2       	std	Y+38, r15	; 0x26
     f36:	0f a3       	std	Y+39, r16	; 0x27
     f38:	18 a7       	std	Y+40, r17	; 0x28
     f3a:	0c 2d       	mov	r16, r12
     f3c:	1c 2d       	mov	r17, r12
     f3e:	6d 2c       	mov	r6, r13
     f40:	c9 a0       	ldd	r12, Y+33	; 0x21
     f42:	da a0       	ldd	r13, Y+34	; 0x22
     f44:	eb a0       	ldd	r14, Y+35	; 0x23
     f46:	fc a0       	ldd	r15, Y+36	; 0x24
	// calculate remaining digits
	while(count--)
     f48:	17 c0       	rjmp	.+46     	; 0xf78 <rprintfNum+0xda>
	{
		if(x != 0)
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
     f4a:	c5 01       	movw	r24, r10
     f4c:	b4 01       	movw	r22, r8
     f4e:	a7 01       	movw	r20, r14
     f50:	96 01       	movw	r18, r12
     f52:	82 d2       	rcall	.+1284   	; 0x1458 <__udivmodsi4>
     f54:	fb 01       	movw	r30, r22
     f56:	ef 70       	andi	r30, 0x0F	; 15
     f58:	ff 27       	eor	r31, r31
     f5a:	ea 5d       	subi	r30, 0xDA	; 218
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	64 91       	lpm	r22, Z
     f60:	f2 01       	movw	r30, r4
     f62:	60 83       	st	Z, r22
     f64:	c5 01       	movw	r24, r10
     f66:	b4 01       	movw	r22, r8
     f68:	a7 01       	movw	r20, r14
     f6a:	96 01       	movw	r18, r12
     f6c:	75 d2       	rcall	.+1258   	; 0x1458 <__udivmodsi4>
     f6e:	49 01       	movw	r8, r18
     f70:	5a 01       	movw	r10, r20
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	4f 1a       	sub	r4, r31
     f76:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
     f78:	11 50       	subi	r17, 0x01	; 1
     f7a:	40 f0       	brcs	.+16     	; 0xf8c <rprintfNum+0xee>
	{
		if(x != 0)
     f7c:	81 14       	cp	r8, r1
     f7e:	91 04       	cpc	r9, r1
     f80:	a1 04       	cpc	r10, r1
     f82:	b1 04       	cpc	r11, r1
     f84:	11 f7       	brne	.-60     	; 0xf4a <rprintfNum+0xac>
			*--p = hexchar(x%base); x /= base;
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
     f86:	f2 01       	movw	r30, r4
     f88:	70 82       	st	Z, r7
     f8a:	f3 cf       	rjmp	.-26     	; 0xf72 <rprintfNum+0xd4>
     f8c:	c0 2e       	mov	r12, r16
     f8e:	ed a0       	ldd	r14, Y+37	; 0x25
     f90:	fe a0       	ldd	r15, Y+38	; 0x26
     f92:	0f a1       	ldd	r16, Y+39	; 0x27
     f94:	18 a5       	ldd	r17, Y+40	; 0x28
     f96:	fe 01       	movw	r30, r28
     f98:	7f 96       	adiw	r30, 0x1f	; 31
     f9a:	ec 19       	sub	r30, r12
     f9c:	f1 09       	sbc	r31, r1
		}
	}

	// apply signed notation if requested
	if( isSigned )
     f9e:	66 20       	and	r6, r6
     fa0:	49 f0       	breq	.+18     	; 0xfb4 <rprintfNum+0x116>
	{
		if(n < 0)
     fa2:	17 fd       	sbrc	r17, 7
     fa4:	42 c0       	rjmp	.+132    	; 0x102a <rprintfNum+0x18c>
		{
   			*--p = '-';
		}
		else if(n > 0)
     fa6:	ef 28       	or	r14, r15
     fa8:	e0 2a       	or	r14, r16
     faa:	e1 2a       	or	r14, r17
     fac:	09 f4       	brne	.+2      	; 0xfb0 <rprintfNum+0x112>
     fae:	40 c0       	rjmp	.+128    	; 0x1030 <rprintfNum+0x192>
		{
	   		*--p = '+';
     fb0:	8b e2       	ldi	r24, 0x2B	; 43
     fb2:	82 93       	st	-Z, r24
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     fb4:	33 20       	and	r3, r3
     fb6:	c9 f0       	breq	.+50     	; 0xfea <rprintfNum+0x14c>
     fb8:	8f 01       	movw	r16, r30
     fba:	f3 2c       	mov	r15, r3
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <rprintfNum+0x130>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     fbe:	e0 91 10 01 	lds	r30, 0x0110
     fc2:	f0 91 11 01 	lds	r31, 0x0111
     fc6:	89 2f       	mov	r24, r25
     fc8:	09 95       	icall
     fca:	fa 94       	dec	r15
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
     fcc:	71 f0       	breq	.+28     	; 0xfea <rprintfNum+0x14c>
	{
		rprintfChar(*p++);
     fce:	f8 01       	movw	r30, r16
     fd0:	91 91       	ld	r25, Z+
     fd2:	8f 01       	movw	r16, r30
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     fd4:	9a 30       	cpi	r25, 0x0A	; 10
     fd6:	99 f7       	brne	.-26     	; 0xfbe <rprintfNum+0x120>
		rputchar('\r');
     fd8:	e0 91 10 01 	lds	r30, 0x0110
     fdc:	f0 91 11 01 	lds	r31, 0x0111
     fe0:	8d e0       	ldi	r24, 0x0D	; 13
     fe2:	99 a7       	std	Y+41, r25	; 0x29
     fe4:	09 95       	icall
     fe6:	99 a5       	ldd	r25, Y+41	; 0x29
     fe8:	ea cf       	rjmp	.-44     	; 0xfbe <rprintfNum+0x120>
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
     fea:	a9 96       	adiw	r28, 0x29	; 41
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	df 90       	pop	r13
    1004:	cf 90       	pop	r12
    1006:	bf 90       	pop	r11
    1008:	af 90       	pop	r10
    100a:	9f 90       	pop	r9
    100c:	8f 90       	pop	r8
    100e:	7f 90       	pop	r7
    1010:	6f 90       	pop	r6
    1012:	5f 90       	pop	r5
    1014:	4f 90       	pop	r4
    1016:	3f 90       	pop	r3
    1018:	08 95       	ret
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
	{
		x = -n;
    101a:	88 24       	eor	r8, r8
    101c:	99 24       	eor	r9, r9
    101e:	54 01       	movw	r10, r8
    1020:	8e 18       	sub	r8, r14
    1022:	9f 08       	sbc	r9, r15
    1024:	a0 0a       	sbc	r10, r16
    1026:	b1 0a       	sbc	r11, r17
    1028:	5b cf       	rjmp	.-330    	; 0xee0 <rprintfNum+0x42>
	// apply signed notation if requested
	if( isSigned )
	{
		if(n < 0)
		{
   			*--p = '-';
    102a:	8d e2       	ldi	r24, 0x2D	; 45
    102c:	82 93       	st	-Z, r24
    102e:	c2 cf       	rjmp	.-124    	; 0xfb4 <rprintfNum+0x116>
		{
	   		*--p = '+';
		}
		else
		{
	   		*--p = ' ';
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	82 93       	st	-Z, r24
    1034:	bf cf       	rjmp	.-130    	; 0xfb4 <rprintfNum+0x116>

00001036 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    1036:	6f 92       	push	r6
    1038:	7f 92       	push	r7
    103a:	8f 92       	push	r8
    103c:	9f 92       	push	r9
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	1f 92       	push	r1
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	7a 88       	ldd	r7, Y+18	; 0x12
    105a:	cb 88       	ldd	r12, Y+19	; 0x13
    105c:	dc 88       	ldd	r13, Y+20	; 0x14
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
    105e:	4e 01       	movw	r8, r28
    1060:	85 e1       	ldi	r24, 0x15	; 21
    1062:	88 0e       	add	r8, r24
    1064:	91 1c       	adc	r9, r1
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    1066:	77 20       	and	r7, r7
    1068:	a9 f0       	breq	.+42     	; 0x1094 <rprintf1RamRom+0x5e>
    106a:	86 01       	movw	r16, r12
    106c:	0f 5f       	subi	r16, 0xFF	; 255
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	f6 01       	movw	r30, r12
    1072:	94 91       	lpm	r25, Z
    1074:	95 32       	cpi	r25, 0x25	; 37
    1076:	49 f1       	breq	.+82     	; 0x10ca <rprintf1RamRom+0x94>
		{	// Until '%' or '\0'
			if (!format_flag)
    1078:	99 23       	and	r25, r25
    107a:	a9 f0       	breq	.+42     	; 0x10a6 <rprintf1RamRom+0x70>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
    107c:	9a 30       	cpi	r25, 0x0A	; 10
    107e:	09 f4       	brne	.+2      	; 0x1082 <rprintf1RamRom+0x4c>
    1080:	6f c0       	rjmp	.+222    	; 0x1160 <rprintf1RamRom+0x12a>
		rputchar('\r');
	// send character
	rputchar(c);
    1082:	e0 91 10 01 	lds	r30, 0x0110
    1086:	f0 91 11 01 	lds	r31, 0x0111
    108a:	89 2f       	mov	r24, r25
    108c:	09 95       	icall
    108e:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    1090:	71 10       	cpse	r7, r1
    1092:	eb cf       	rjmp	.-42     	; 0x106a <rprintf1RamRom+0x34>
    1094:	f6 01       	movw	r30, r12
    1096:	90 81       	ld	r25, Z
    1098:	95 32       	cpi	r25, 0x25	; 37
    109a:	91 f1       	breq	.+100    	; 0x1100 <rprintf1RamRom+0xca>
    109c:	86 01       	movw	r16, r12
    109e:	0f 5f       	subi	r16, 0xFF	; 255
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
		{	// Until '%' or '\0'
			if (!format_flag)
    10a2:	91 11       	cpse	r25, r1
    10a4:	eb cf       	rjmp	.-42     	; 0x107c <rprintf1RamRom+0x46>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0f 90       	pop	r0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	7f 90       	pop	r7
    10c6:	6f 90       	pop	r6
    10c8:	08 95       	ret
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    10ca:	f2 e0       	ldi	r31, 0x02	; 2
    10cc:	cf 0e       	add	r12, r31
    10ce:	d1 1c       	adc	r13, r1
    10d0:	f8 01       	movw	r30, r16
    10d2:	04 91       	lpm	r16, Z
    10d4:	04 36       	cpi	r16, 0x64	; 100
    10d6:	d9 f0       	breq	.+54     	; 0x110e <rprintf1RamRom+0xd8>
    10d8:	08 37       	cpi	r16, 0x78	; 120
    10da:	09 f4       	brne	.+2      	; 0x10de <rprintf1RamRom+0xa8>
    10dc:	4a c0       	rjmp	.+148    	; 0x1172 <rprintf1RamRom+0x13c>
    10de:	03 36       	cpi	r16, 0x63	; 99
    10e0:	29 f4       	brne	.+10     	; 0x10ec <rprintf1RamRom+0xb6>
		{
			case 'c': format_flag = va_arg(ap,int);
    10e2:	f4 01       	movw	r30, r8
    10e4:	00 81       	ld	r16, Z
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	89 0e       	add	r8, r25
    10ea:	91 1c       	adc	r9, r1
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
    10ec:	0a 30       	cpi	r16, 0x0A	; 10
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <rprintf1RamRom+0xbc>
    10f0:	5d c0       	rjmp	.+186    	; 0x11ac <rprintf1RamRom+0x176>
		rputchar('\r');
	// send character
	rputchar(c);
    10f2:	e0 91 10 01 	lds	r30, 0x0110
    10f6:	f0 91 11 01 	lds	r31, 0x0111
    10fa:	80 2f       	mov	r24, r16
    10fc:	09 95       	icall
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
    10fe:	b3 cf       	rjmp	.-154    	; 0x1066 <rprintf1RamRom+0x30>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1100:	f6 01       	movw	r30, r12
    1102:	01 81       	ldd	r16, Z+1	; 0x01
    1104:	c6 01       	movw	r24, r12
    1106:	02 96       	adiw	r24, 0x02	; 2
    1108:	6c 01       	movw	r12, r24
    110a:	04 36       	cpi	r16, 0x64	; 100
    110c:	29 f7       	brne	.-54     	; 0x10d8 <rprintf1RamRom+0xa2>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    110e:	f4 01       	movw	r30, r8
    1110:	e0 80       	ld	r14, Z
    1112:	f1 80       	ldd	r15, Z+1	; 0x01
    1114:	e2 e0       	ldi	r30, 0x02	; 2
    1116:	8e 0e       	add	r8, r30
    1118:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
    111a:	f7 fc       	sbrc	r15, 7
    111c:	4e c0       	rjmp	.+156    	; 0x11ba <rprintf1RamRom+0x184>
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    111e:	80 e1       	ldi	r24, 0x10	; 16
    1120:	e8 16       	cp	r14, r24
    1122:	87 e2       	ldi	r24, 0x27	; 39
    1124:	f8 06       	cpc	r15, r24
    1126:	08 f0       	brcs	.+2      	; 0x112a <rprintf1RamRom+0xf4>
    1128:	52 c0       	rjmp	.+164    	; 0x11ce <rprintf1RamRom+0x198>
    112a:	43 e0       	ldi	r20, 0x03	; 3
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	08 ee       	ldi	r16, 0xE8	; 232
    1130:	13 e0       	ldi	r17, 0x03	; 3
    1132:	e0 16       	cp	r14, r16
    1134:	f1 06       	cpc	r15, r17
    1136:	80 f4       	brcc	.+32     	; 0x1158 <rprintf1RamRom+0x122>
    1138:	98 01       	movw	r18, r16
    113a:	ad ec       	ldi	r26, 0xCD	; 205
    113c:	bc ec       	ldi	r27, 0xCC	; 204
    113e:	ae d1       	rcall	.+860    	; 0x149c <__umulhisi3>
    1140:	8c 01       	movw	r16, r24
    1142:	16 95       	lsr	r17
    1144:	07 95       	ror	r16
    1146:	16 95       	lsr	r17
    1148:	07 95       	ror	r16
    114a:	16 95       	lsr	r17
    114c:	07 95       	ror	r16
    114e:	41 50       	subi	r20, 0x01	; 1
    1150:	51 09       	sbc	r21, r1
    1152:	41 15       	cp	r20, r1
    1154:	51 05       	cpc	r21, r1
    1156:	69 f7       	brne	.-38     	; 0x1132 <rprintf1RamRom+0xfc>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    1158:	2a e0       	ldi	r18, 0x0A	; 10
    115a:	a2 2e       	mov	r10, r18
    115c:	b1 2c       	mov	r11, r1
    115e:	14 c0       	rjmp	.+40     	; 0x1188 <rprintf1RamRom+0x152>
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
    1160:	e0 91 10 01 	lds	r30, 0x0110
    1164:	f0 91 11 01 	lds	r31, 0x0111
    1168:	8d e0       	ldi	r24, 0x0D	; 13
    116a:	99 83       	std	Y+1, r25	; 0x01
    116c:	09 95       	icall
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	88 cf       	rjmp	.-240    	; 0x1082 <rprintf1RamRom+0x4c>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1172:	f4 01       	movw	r30, r8
    1174:	e0 80       	ld	r14, Z
    1176:	f1 80       	ldd	r15, Z+1	; 0x01
    1178:	f2 e0       	ldi	r31, 0x02	; 2
    117a:	8f 0e       	add	r8, r31
    117c:	91 1c       	adc	r9, r1
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
    117e:	80 e1       	ldi	r24, 0x10	; 16
    1180:	a8 2e       	mov	r10, r24
    1182:	b1 2c       	mov	r11, r1
    1184:	00 e0       	ldi	r16, 0x00	; 0
    1186:	10 e1       	ldi	r17, 0x10	; 16
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    1188:	c7 01       	movw	r24, r14
    118a:	b8 01       	movw	r22, r16
    118c:	51 d1       	rcall	.+674    	; 0x1430 <__udivmodhi4>
    118e:	68 2e       	mov	r6, r24
    1190:	86 2f       	mov	r24, r22
    1192:	99 83       	std	Y+1, r25	; 0x01
    1194:	38 de       	rcall	.-912    	; 0xe06 <rprintfu04>
				u_val %= div_val;
    1196:	e6 2c       	mov	r14, r6
    1198:	99 81       	ldd	r25, Y+1	; 0x01
    119a:	f9 2e       	mov	r15, r25
				div_val /= base;
    119c:	c8 01       	movw	r24, r16
    119e:	b5 01       	movw	r22, r10
    11a0:	47 d1       	rcall	.+654    	; 0x1430 <__udivmodhi4>
    11a2:	8b 01       	movw	r16, r22
			} while (div_val);
    11a4:	61 15       	cp	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	79 f7       	brne	.-34     	; 0x1188 <rprintf1RamRom+0x152>
    11aa:	5d cf       	rjmp	.-326    	; 0x1066 <rprintf1RamRom+0x30>
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
    11ac:	e0 91 10 01 	lds	r30, 0x0110
    11b0:	f0 91 11 01 	lds	r31, 0x0111
    11b4:	8d e0       	ldi	r24, 0x0D	; 13
    11b6:	09 95       	icall
    11b8:	9c cf       	rjmp	.-200    	; 0x10f2 <rprintf1RamRom+0xbc>
			u_val = va_arg(ap,int);
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
    11ba:	f1 94       	neg	r15
    11bc:	e1 94       	neg	r14
    11be:	f1 08       	sbc	r15, r1
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
    11c0:	e0 91 10 01 	lds	r30, 0x0110
    11c4:	f0 91 11 01 	lds	r31, 0x0111
    11c8:	8d e2       	ldi	r24, 0x2D	; 45
    11ca:	09 95       	icall
    11cc:	a8 cf       	rjmp	.-176    	; 0x111e <rprintf1RamRom+0xe8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    11ce:	9a e0       	ldi	r25, 0x0A	; 10
    11d0:	a9 2e       	mov	r10, r25
    11d2:	b1 2c       	mov	r11, r1
    11d4:	00 e1       	ldi	r16, 0x10	; 16
    11d6:	17 e2       	ldi	r17, 0x27	; 39
    11d8:	d7 cf       	rjmp	.-82     	; 0x1188 <rprintf1RamRom+0x152>

000011da <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, uartRxData, UART_RX_BUFFER_SIZE);
    11da:	40 e4       	ldi	r20, 0x40	; 64
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	64 e5       	ldi	r22, 0x54	; 84
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	83 ea       	ldi	r24, 0xA3	; 163
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	44 d7       	rcall	.+3720   	; 0x2070 <__data_load_end+0x33e>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, uartTxData, UART_TX_BUFFER_SIZE);
    11e8:	40 e4       	ldi	r20, 0x40	; 64
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	64 e1       	ldi	r22, 0x14	; 20
    11ee:	71 e0       	ldi	r23, 0x01	; 1
    11f0:	8c ea       	ldi	r24, 0xAC	; 172
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	3d c7       	rjmp	.+3706   	; 0x2070 <__data_load_end+0x33e>

000011f6 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
    11f6:	f1 df       	rcall	.-30     	; 0x11da <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
    11f8:	10 92 13 01 	sts	0x0113, r1
    11fc:	10 92 12 01 	sts	0x0112, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    1200:	88 ed       	ldi	r24, 0xD8	; 216
    1202:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
    1204:	87 e6       	ldi	r24, 0x67	; 103
    1206:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    1208:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	80 93 a2 01 	sts	0x01A2, r24
	uartBufferedTx = FALSE;
    1210:	10 92 ab 01 	sts	0x01AB, r1
	// clear overflow count
	uartRxOverflow = 0;
    1214:	10 92 b5 01 	sts	0x01B5, r1
    1218:	10 92 b4 01 	sts	0x01B4, r1
	// enable interrupts
	sei();
    121c:	78 94       	sei
    121e:	08 95       	ret

00001220 <uartSetRxHandler>:

// redirects received data to a user function
void uartSetRxHandler(void (*rx_func)(unsigned char c))
{
	// set the receive interrupt to run the supplied user function
	UartRxFunc = rx_func;
    1220:	90 93 13 01 	sts	0x0113, r25
    1224:	80 93 12 01 	sts	0x0112, r24
    1228:	08 95       	ret

0000122a <uartSetBaudRate>:
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	8b 01       	movw	r16, r22
    1230:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    1232:	60 5c       	subi	r22, 0xC0	; 192
    1234:	7d 4b       	sbci	r23, 0xBD	; 189
    1236:	80 4f       	sbci	r24, 0xF0	; 240
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	66 0f       	add	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	a9 01       	movw	r20, r18
    1254:	98 01       	movw	r18, r16
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	44 1f       	adc	r20, r20
    125c:	55 1f       	adc	r21, r21
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	44 1f       	adc	r20, r20
    1264:	55 1f       	adc	r21, r21
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	44 1f       	adc	r20, r20
    126c:	55 1f       	adc	r21, r21
    126e:	22 0f       	add	r18, r18
    1270:	33 1f       	adc	r19, r19
    1272:	44 1f       	adc	r20, r20
    1274:	55 1f       	adc	r21, r21
    1276:	f0 d0       	rcall	.+480    	; 0x1458 <__udivmodsi4>
    1278:	21 50       	subi	r18, 0x01	; 1
    127a:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
    127c:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    127e:	30 bd       	out	0x20, r19	; 32
	#endif
}
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret

00001286 <uartGetRxBuffer>:
// returns the receive buffer structure 
cBuffer* uartGetRxBuffer(void)
{
	// return rx buffer pointer
	return &uartRxBuffer;
}
    1286:	83 ea       	ldi	r24, 0xA3	; 163
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	08 95       	ret

0000128c <uartGetTxBuffer>:
// returns the transmit buffer structure 
cBuffer* uartGetTxBuffer(void)
{
	// return tx buffer pointer
	return &uartTxBuffer;
}
    128c:	8c ea       	ldi	r24, 0xAC	; 172
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	08 95       	ret

00001292 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    1292:	90 91 a2 01 	lds	r25, 0x01A2
    1296:	99 23       	and	r25, r25
    1298:	e1 f3       	breq	.-8      	; 0x1292 <uartSendByte>
	// send byte
	outb(UDR, txData);
    129a:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    129c:	10 92 a2 01 	sts	0x01A2, r1
    12a0:	08 95       	ret

000012a2 <uartReceiveByte>:
		return -1;
}

// gets a byte (if available) from the uart receive buffer
u08 uartReceiveByte(u08* rxData)
{
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ec 01       	movw	r28, r24
	// make sure we have a receive buffer
	if(uartRxBuffer.size)
    12a8:	20 91 a5 01 	lds	r18, 0x01A5
    12ac:	30 91 a6 01 	lds	r19, 0x01A6
    12b0:	23 2b       	or	r18, r19
    12b2:	31 f0       	breq	.+12     	; 0x12c0 <uartReceiveByte+0x1e>
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
    12b4:	80 91 a7 01 	lds	r24, 0x01A7
    12b8:	90 91 a8 01 	lds	r25, 0x01A8
    12bc:	89 2b       	or	r24, r25
    12be:	21 f4       	brne	.+8      	; 0x12c8 <uartReceiveByte+0x26>
		}
	}
	else
	{
		// no buffer
		return FALSE;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer);
    12c8:	83 ea       	ldi	r24, 0xA3	; 163
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	de d6       	rcall	.+3516   	; 0x208a <__data_load_end+0x358>
    12ce:	88 83       	st	Y, r24
			return TRUE;
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		// no buffer
		return FALSE;
	}
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <uartGetByte>:
	uartReadyTx = FALSE;
}

// gets a single byte from the uart receive buffer (getchar-style)
int uartGetByte(void)
{
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	1f 92       	push	r1
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	if(uartReceiveByte(&c))
    12e2:	ce 01       	movw	r24, r28
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	dd df       	rcall	.-70     	; 0x12a2 <uartReceiveByte>
    12e8:	88 23       	and	r24, r24
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <uartGetByte+0x20>
		return c;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	90 e0       	ldi	r25, 0x00	; 0
	else
		return -1;
}
    12f0:	0f 90       	pop	r0
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret
{
	u08 c;
	if(uartReceiveByte(&c))
		return c;
	else
		return -1;
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	f9 cf       	rjmp	.-14     	; 0x12f0 <uartGetByte+0x18>

000012fe <uartFlushReceiveBuffer>:
void uartFlushReceiveBuffer(void)
{
	// flush all data from receive buffer
	//bufferFlush(&uartRxBuffer);
	// same effect as above
	uartRxBuffer.datalength = 0;
    12fe:	10 92 a8 01 	sts	0x01A8, r1
    1302:	10 92 a7 01 	sts	0x01A7, r1
    1306:	08 95       	ret

00001308 <uartReceiveBufferIsEmpty>:
}

// return true if uart receive buffer is empty
u08 uartReceiveBufferIsEmpty(void)
{
	if(uartRxBuffer.datalength == 0)
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	20 91 a7 01 	lds	r18, 0x01A7
    130e:	30 91 a8 01 	lds	r19, 0x01A8
    1312:	23 2b       	or	r18, r19
    1314:	09 f0       	breq	.+2      	; 0x1318 <uartReceiveBufferIsEmpty+0x10>
    1316:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
    1318:	81 95       	neg	r24
    131a:	08 95       	ret

0000131c <uartAddToTxBuffer>:

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
    131c:	68 2f       	mov	r22, r24
    131e:	8c ea       	ldi	r24, 0xAC	; 172
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0d c7       	rjmp	.+3610   	; 0x213e <__data_load_end+0x40c>

00001324 <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	80 93 ab 01 	sts	0x01AB, r24
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
    132a:	8c ea       	ldi	r24, 0xAC	; 172
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	ad d6       	rcall	.+3418   	; 0x208a <__data_load_end+0x358>

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    1330:	90 91 a2 01 	lds	r25, 0x01A2
    1334:	99 23       	and	r25, r25
    1336:	e1 f3       	breq	.-8      	; 0x1330 <uartSendTxBuffer+0xc>
	// send byte
	outb(UDR, txData);
    1338:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    133a:	10 92 a2 01 	sts	0x01A2, r1
    133e:	08 95       	ret

00001340 <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    1362:	80 91 ab 01 	lds	r24, 0x01AB
    1366:	88 23       	and	r24, r24
    1368:	61 f0       	breq	.+24     	; 0x1382 <__vector_13+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    136a:	80 91 b0 01 	lds	r24, 0x01B0
    136e:	90 91 b1 01 	lds	r25, 0x01B1
    1372:	89 2b       	or	r24, r25
    1374:	d1 f4       	brne	.+52     	; 0x13aa <__vector_13+0x6a>
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    1376:	10 92 ab 01 	sts	0x01AB, r1
			// return to ready state
			uartReadyTx = TRUE;
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	80 93 a2 01 	sts	0x01A2, r24
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <__vector_13+0x48>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	80 93 a2 01 	sts	0x01A2, r24
	}
}
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    13aa:	8c ea       	ldi	r24, 0xAC	; 172
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	6d d6       	rcall	.+3290   	; 0x208a <__data_load_end+0x358>
    13b0:	8c b9       	out	0x0c, r24	; 12
    13b2:	ea cf       	rjmp	.-44     	; 0x1388 <__vector_13+0x48>

000013b4 <__vector_11>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    13d6:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
    13d8:	20 91 12 01 	lds	r18, 0x0112
    13dc:	30 91 13 01 	lds	r19, 0x0113
    13e0:	23 2b       	or	r18, r19
    13e2:	b1 f0       	breq	.+44     	; 0x1410 <__vector_11+0x5c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    13e4:	e0 91 12 01 	lds	r30, 0x0112
    13e8:	f0 91 13 01 	lds	r31, 0x0113
    13ec:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    1410:	68 2f       	mov	r22, r24
    1412:	83 ea       	ldi	r24, 0xA3	; 163
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	93 d6       	rcall	.+3366   	; 0x213e <__data_load_end+0x40c>
    1418:	81 11       	cpse	r24, r1
    141a:	e9 cf       	rjmp	.-46     	; 0x13ee <__vector_11+0x3a>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    141c:	80 91 b4 01 	lds	r24, 0x01B4
    1420:	90 91 b5 01 	lds	r25, 0x01B5
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	90 93 b5 01 	sts	0x01B5, r25
    142a:	80 93 b4 01 	sts	0x01B4, r24
    142e:	df cf       	rjmp	.-66     	; 0x13ee <__vector_11+0x3a>

00001430 <__udivmodhi4>:
    1430:	aa 1b       	sub	r26, r26
    1432:	bb 1b       	sub	r27, r27
    1434:	51 e1       	ldi	r21, 0x11	; 17
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <__udivmodhi4_ep>

00001438 <__udivmodhi4_loop>:
    1438:	aa 1f       	adc	r26, r26
    143a:	bb 1f       	adc	r27, r27
    143c:	a6 17       	cp	r26, r22
    143e:	b7 07       	cpc	r27, r23
    1440:	10 f0       	brcs	.+4      	; 0x1446 <__udivmodhi4_ep>
    1442:	a6 1b       	sub	r26, r22
    1444:	b7 0b       	sbc	r27, r23

00001446 <__udivmodhi4_ep>:
    1446:	88 1f       	adc	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	5a 95       	dec	r21
    144c:	a9 f7       	brne	.-22     	; 0x1438 <__udivmodhi4_loop>
    144e:	80 95       	com	r24
    1450:	90 95       	com	r25
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	08 95       	ret

00001458 <__udivmodsi4>:
    1458:	a1 e2       	ldi	r26, 0x21	; 33
    145a:	1a 2e       	mov	r1, r26
    145c:	aa 1b       	sub	r26, r26
    145e:	bb 1b       	sub	r27, r27
    1460:	fd 01       	movw	r30, r26
    1462:	0d c0       	rjmp	.+26     	; 0x147e <__udivmodsi4_ep>

00001464 <__udivmodsi4_loop>:
    1464:	aa 1f       	adc	r26, r26
    1466:	bb 1f       	adc	r27, r27
    1468:	ee 1f       	adc	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	a2 17       	cp	r26, r18
    146e:	b3 07       	cpc	r27, r19
    1470:	e4 07       	cpc	r30, r20
    1472:	f5 07       	cpc	r31, r21
    1474:	20 f0       	brcs	.+8      	; 0x147e <__udivmodsi4_ep>
    1476:	a2 1b       	sub	r26, r18
    1478:	b3 0b       	sbc	r27, r19
    147a:	e4 0b       	sbc	r30, r20
    147c:	f5 0b       	sbc	r31, r21

0000147e <__udivmodsi4_ep>:
    147e:	66 1f       	adc	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	1a 94       	dec	r1
    1488:	69 f7       	brne	.-38     	; 0x1464 <__udivmodsi4_loop>
    148a:	60 95       	com	r22
    148c:	70 95       	com	r23
    148e:	80 95       	com	r24
    1490:	90 95       	com	r25
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	bd 01       	movw	r22, r26
    1498:	cf 01       	movw	r24, r30
    149a:	08 95       	ret

0000149c <__umulhisi3>:
    149c:	a2 9f       	mul	r26, r18
    149e:	b0 01       	movw	r22, r0
    14a0:	b3 9f       	mul	r27, r19
    14a2:	c0 01       	movw	r24, r0
    14a4:	a3 9f       	mul	r26, r19
    14a6:	01 d0       	rcall	.+2      	; 0x14aa <__umulhisi3+0xe>
    14a8:	b2 9f       	mul	r27, r18
    14aa:	70 0d       	add	r23, r0
    14ac:	81 1d       	adc	r24, r1
    14ae:	11 24       	eor	r1, r1
    14b0:	91 1d       	adc	r25, r1
    14b2:	08 95       	ret

000014b4 <malloc>:
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	10 f4       	brcc	.+4      	; 0x14c2 <malloc+0xe>
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	e0 91 b8 01 	lds	r30, 0x01B8
    14c6:	f0 91 b9 01 	lds	r31, 0x01B9
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	a0 e0       	ldi	r26, 0x00	; 0
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	39 f1       	breq	.+78     	; 0x1524 <malloc+0x70>
    14d6:	40 81       	ld	r20, Z
    14d8:	51 81       	ldd	r21, Z+1	; 0x01
    14da:	48 17       	cp	r20, r24
    14dc:	59 07       	cpc	r21, r25
    14de:	b8 f0       	brcs	.+46     	; 0x150e <malloc+0x5a>
    14e0:	48 17       	cp	r20, r24
    14e2:	59 07       	cpc	r21, r25
    14e4:	71 f4       	brne	.+28     	; 0x1502 <malloc+0x4e>
    14e6:	82 81       	ldd	r24, Z+2	; 0x02
    14e8:	93 81       	ldd	r25, Z+3	; 0x03
    14ea:	10 97       	sbiw	r26, 0x00	; 0
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <malloc+0x44>
    14ee:	13 96       	adiw	r26, 0x03	; 3
    14f0:	9c 93       	st	X, r25
    14f2:	8e 93       	st	-X, r24
    14f4:	12 97       	sbiw	r26, 0x02	; 2
    14f6:	2c c0       	rjmp	.+88     	; 0x1550 <malloc+0x9c>
    14f8:	90 93 b9 01 	sts	0x01B9, r25
    14fc:	80 93 b8 01 	sts	0x01B8, r24
    1500:	27 c0       	rjmp	.+78     	; 0x1550 <malloc+0x9c>
    1502:	21 15       	cp	r18, r1
    1504:	31 05       	cpc	r19, r1
    1506:	31 f0       	breq	.+12     	; 0x1514 <malloc+0x60>
    1508:	42 17       	cp	r20, r18
    150a:	53 07       	cpc	r21, r19
    150c:	18 f0       	brcs	.+6      	; 0x1514 <malloc+0x60>
    150e:	a9 01       	movw	r20, r18
    1510:	db 01       	movw	r26, r22
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <malloc+0x62>
    1514:	ef 01       	movw	r28, r30
    1516:	9a 01       	movw	r18, r20
    1518:	bd 01       	movw	r22, r26
    151a:	df 01       	movw	r26, r30
    151c:	02 80       	ldd	r0, Z+2	; 0x02
    151e:	f3 81       	ldd	r31, Z+3	; 0x03
    1520:	e0 2d       	mov	r30, r0
    1522:	d7 cf       	rjmp	.-82     	; 0x14d2 <malloc+0x1e>
    1524:	21 15       	cp	r18, r1
    1526:	31 05       	cpc	r19, r1
    1528:	f9 f0       	breq	.+62     	; 0x1568 <malloc+0xb4>
    152a:	28 1b       	sub	r18, r24
    152c:	39 0b       	sbc	r19, r25
    152e:	24 30       	cpi	r18, 0x04	; 4
    1530:	31 05       	cpc	r19, r1
    1532:	80 f4       	brcc	.+32     	; 0x1554 <malloc+0xa0>
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	61 15       	cp	r22, r1
    153a:	71 05       	cpc	r23, r1
    153c:	21 f0       	breq	.+8      	; 0x1546 <malloc+0x92>
    153e:	fb 01       	movw	r30, r22
    1540:	93 83       	std	Z+3, r25	; 0x03
    1542:	82 83       	std	Z+2, r24	; 0x02
    1544:	04 c0       	rjmp	.+8      	; 0x154e <malloc+0x9a>
    1546:	90 93 b9 01 	sts	0x01B9, r25
    154a:	80 93 b8 01 	sts	0x01B8, r24
    154e:	fe 01       	movw	r30, r28
    1550:	32 96       	adiw	r30, 0x02	; 2
    1552:	44 c0       	rjmp	.+136    	; 0x15dc <malloc+0x128>
    1554:	fe 01       	movw	r30, r28
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	81 93       	st	Z+, r24
    155c:	91 93       	st	Z+, r25
    155e:	22 50       	subi	r18, 0x02	; 2
    1560:	31 09       	sbc	r19, r1
    1562:	39 83       	std	Y+1, r19	; 0x01
    1564:	28 83       	st	Y, r18
    1566:	3a c0       	rjmp	.+116    	; 0x15dc <malloc+0x128>
    1568:	20 91 b6 01 	lds	r18, 0x01B6
    156c:	30 91 b7 01 	lds	r19, 0x01B7
    1570:	23 2b       	or	r18, r19
    1572:	41 f4       	brne	.+16     	; 0x1584 <malloc+0xd0>
    1574:	20 91 62 00 	lds	r18, 0x0062
    1578:	30 91 63 00 	lds	r19, 0x0063
    157c:	30 93 b7 01 	sts	0x01B7, r19
    1580:	20 93 b6 01 	sts	0x01B6, r18
    1584:	20 91 60 00 	lds	r18, 0x0060
    1588:	30 91 61 00 	lds	r19, 0x0061
    158c:	21 15       	cp	r18, r1
    158e:	31 05       	cpc	r19, r1
    1590:	41 f4       	brne	.+16     	; 0x15a2 <malloc+0xee>
    1592:	2d b7       	in	r18, 0x3d	; 61
    1594:	3e b7       	in	r19, 0x3e	; 62
    1596:	40 91 64 00 	lds	r20, 0x0064
    159a:	50 91 65 00 	lds	r21, 0x0065
    159e:	24 1b       	sub	r18, r20
    15a0:	35 0b       	sbc	r19, r21
    15a2:	e0 91 b6 01 	lds	r30, 0x01B6
    15a6:	f0 91 b7 01 	lds	r31, 0x01B7
    15aa:	e2 17       	cp	r30, r18
    15ac:	f3 07       	cpc	r31, r19
    15ae:	a0 f4       	brcc	.+40     	; 0x15d8 <malloc+0x124>
    15b0:	2e 1b       	sub	r18, r30
    15b2:	3f 0b       	sbc	r19, r31
    15b4:	28 17       	cp	r18, r24
    15b6:	39 07       	cpc	r19, r25
    15b8:	78 f0       	brcs	.+30     	; 0x15d8 <malloc+0x124>
    15ba:	ac 01       	movw	r20, r24
    15bc:	4e 5f       	subi	r20, 0xFE	; 254
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
    15c0:	24 17       	cp	r18, r20
    15c2:	35 07       	cpc	r19, r21
    15c4:	48 f0       	brcs	.+18     	; 0x15d8 <malloc+0x124>
    15c6:	4e 0f       	add	r20, r30
    15c8:	5f 1f       	adc	r21, r31
    15ca:	50 93 b7 01 	sts	0x01B7, r21
    15ce:	40 93 b6 01 	sts	0x01B6, r20
    15d2:	81 93       	st	Z+, r24
    15d4:	91 93       	st	Z+, r25
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <malloc+0x128>
    15d8:	e0 e0       	ldi	r30, 0x00	; 0
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	cf 01       	movw	r24, r30
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <free>:
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	09 f4       	brne	.+2      	; 0x15ee <free+0xa>
    15ec:	87 c0       	rjmp	.+270    	; 0x16fc <free+0x118>
    15ee:	fc 01       	movw	r30, r24
    15f0:	32 97       	sbiw	r30, 0x02	; 2
    15f2:	13 82       	std	Z+3, r1	; 0x03
    15f4:	12 82       	std	Z+2, r1	; 0x02
    15f6:	c0 91 b8 01 	lds	r28, 0x01B8
    15fa:	d0 91 b9 01 	lds	r29, 0x01B9
    15fe:	20 97       	sbiw	r28, 0x00	; 0
    1600:	81 f4       	brne	.+32     	; 0x1622 <free+0x3e>
    1602:	20 81       	ld	r18, Z
    1604:	31 81       	ldd	r19, Z+1	; 0x01
    1606:	28 0f       	add	r18, r24
    1608:	39 1f       	adc	r19, r25
    160a:	80 91 b6 01 	lds	r24, 0x01B6
    160e:	90 91 b7 01 	lds	r25, 0x01B7
    1612:	82 17       	cp	r24, r18
    1614:	93 07       	cpc	r25, r19
    1616:	79 f5       	brne	.+94     	; 0x1676 <free+0x92>
    1618:	f0 93 b7 01 	sts	0x01B7, r31
    161c:	e0 93 b6 01 	sts	0x01B6, r30
    1620:	6d c0       	rjmp	.+218    	; 0x16fc <free+0x118>
    1622:	de 01       	movw	r26, r28
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	ae 17       	cp	r26, r30
    162a:	bf 07       	cpc	r27, r31
    162c:	50 f4       	brcc	.+20     	; 0x1642 <free+0x5e>
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	4d 91       	ld	r20, X+
    1632:	5c 91       	ld	r21, X
    1634:	13 97       	sbiw	r26, 0x03	; 3
    1636:	9d 01       	movw	r18, r26
    1638:	41 15       	cp	r20, r1
    163a:	51 05       	cpc	r21, r1
    163c:	09 f1       	breq	.+66     	; 0x1680 <free+0x9c>
    163e:	da 01       	movw	r26, r20
    1640:	f3 cf       	rjmp	.-26     	; 0x1628 <free+0x44>
    1642:	b3 83       	std	Z+3, r27	; 0x03
    1644:	a2 83       	std	Z+2, r26	; 0x02
    1646:	40 81       	ld	r20, Z
    1648:	51 81       	ldd	r21, Z+1	; 0x01
    164a:	84 0f       	add	r24, r20
    164c:	95 1f       	adc	r25, r21
    164e:	8a 17       	cp	r24, r26
    1650:	9b 07       	cpc	r25, r27
    1652:	71 f4       	brne	.+28     	; 0x1670 <free+0x8c>
    1654:	8d 91       	ld	r24, X+
    1656:	9c 91       	ld	r25, X
    1658:	11 97       	sbiw	r26, 0x01	; 1
    165a:	84 0f       	add	r24, r20
    165c:	95 1f       	adc	r25, r21
    165e:	02 96       	adiw	r24, 0x02	; 2
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
    1664:	12 96       	adiw	r26, 0x02	; 2
    1666:	8d 91       	ld	r24, X+
    1668:	9c 91       	ld	r25, X
    166a:	13 97       	sbiw	r26, 0x03	; 3
    166c:	93 83       	std	Z+3, r25	; 0x03
    166e:	82 83       	std	Z+2, r24	; 0x02
    1670:	21 15       	cp	r18, r1
    1672:	31 05       	cpc	r19, r1
    1674:	29 f4       	brne	.+10     	; 0x1680 <free+0x9c>
    1676:	f0 93 b9 01 	sts	0x01B9, r31
    167a:	e0 93 b8 01 	sts	0x01B8, r30
    167e:	3e c0       	rjmp	.+124    	; 0x16fc <free+0x118>
    1680:	d9 01       	movw	r26, r18
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	fc 93       	st	X, r31
    1686:	ee 93       	st	-X, r30
    1688:	12 97       	sbiw	r26, 0x02	; 2
    168a:	4d 91       	ld	r20, X+
    168c:	5d 91       	ld	r21, X+
    168e:	a4 0f       	add	r26, r20
    1690:	b5 1f       	adc	r27, r21
    1692:	ea 17       	cp	r30, r26
    1694:	fb 07       	cpc	r31, r27
    1696:	79 f4       	brne	.+30     	; 0x16b6 <free+0xd2>
    1698:	80 81       	ld	r24, Z
    169a:	91 81       	ldd	r25, Z+1	; 0x01
    169c:	84 0f       	add	r24, r20
    169e:	95 1f       	adc	r25, r21
    16a0:	02 96       	adiw	r24, 0x02	; 2
    16a2:	d9 01       	movw	r26, r18
    16a4:	11 96       	adiw	r26, 0x01	; 1
    16a6:	9c 93       	st	X, r25
    16a8:	8e 93       	st	-X, r24
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	93 81       	ldd	r25, Z+3	; 0x03
    16ae:	13 96       	adiw	r26, 0x03	; 3
    16b0:	9c 93       	st	X, r25
    16b2:	8e 93       	st	-X, r24
    16b4:	12 97       	sbiw	r26, 0x02	; 2
    16b6:	e0 e0       	ldi	r30, 0x00	; 0
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	19 f0       	breq	.+6      	; 0x16c8 <free+0xe4>
    16c2:	fe 01       	movw	r30, r28
    16c4:	ec 01       	movw	r28, r24
    16c6:	f9 cf       	rjmp	.-14     	; 0x16ba <free+0xd6>
    16c8:	ce 01       	movw	r24, r28
    16ca:	02 96       	adiw	r24, 0x02	; 2
    16cc:	28 81       	ld	r18, Y
    16ce:	39 81       	ldd	r19, Y+1	; 0x01
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	20 91 b6 01 	lds	r18, 0x01B6
    16d8:	30 91 b7 01 	lds	r19, 0x01B7
    16dc:	28 17       	cp	r18, r24
    16de:	39 07       	cpc	r19, r25
    16e0:	69 f4       	brne	.+26     	; 0x16fc <free+0x118>
    16e2:	30 97       	sbiw	r30, 0x00	; 0
    16e4:	29 f4       	brne	.+10     	; 0x16f0 <free+0x10c>
    16e6:	10 92 b9 01 	sts	0x01B9, r1
    16ea:	10 92 b8 01 	sts	0x01B8, r1
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <free+0x110>
    16f0:	13 82       	std	Z+3, r1	; 0x03
    16f2:	12 82       	std	Z+2, r1	; 0x02
    16f4:	d0 93 b7 01 	sts	0x01B7, r29
    16f8:	c0 93 b6 01 	sts	0x01B6, r28
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <snprintf>:
    1702:	ae e0       	ldi	r26, 0x0E	; 14
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e6 e8       	ldi	r30, 0x86	; 134
    1708:	fb e0       	ldi	r31, 0x0B	; 11
    170a:	9f c2       	rjmp	.+1342   	; 0x1c4a <__prologue_saves__+0x1c>
    170c:	0d 89       	ldd	r16, Y+21	; 0x15
    170e:	1e 89       	ldd	r17, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	26 e0       	ldi	r18, 0x06	; 6
    1716:	2c 83       	std	Y+4, r18	; 0x04
    1718:	1a 83       	std	Y+2, r17	; 0x02
    171a:	09 83       	std	Y+1, r16	; 0x01
    171c:	97 ff       	sbrs	r25, 7
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <snprintf+0x22>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e8       	ldi	r25, 0x80	; 128
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	ae 01       	movw	r20, r28
    172c:	45 5e       	subi	r20, 0xE5	; 229
    172e:	5f 4f       	sbci	r21, 0xFF	; 255
    1730:	69 8d       	ldd	r22, Y+25	; 0x19
    1732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1734:	ce 01       	movw	r24, r28
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	11 d0       	rcall	.+34     	; 0x175c <vfprintf>
    173a:	4d 81       	ldd	r20, Y+5	; 0x05
    173c:	5e 81       	ldd	r21, Y+6	; 0x06
    173e:	57 fd       	sbrc	r21, 7
    1740:	0a c0       	rjmp	.+20     	; 0x1756 <snprintf+0x54>
    1742:	2f 81       	ldd	r18, Y+7	; 0x07
    1744:	38 85       	ldd	r19, Y+8	; 0x08
    1746:	42 17       	cp	r20, r18
    1748:	53 07       	cpc	r21, r19
    174a:	0c f4       	brge	.+2      	; 0x174e <snprintf+0x4c>
    174c:	9a 01       	movw	r18, r20
    174e:	f8 01       	movw	r30, r16
    1750:	e2 0f       	add	r30, r18
    1752:	f3 1f       	adc	r31, r19
    1754:	10 82       	st	Z, r1
    1756:	2e 96       	adiw	r28, 0x0e	; 14
    1758:	e4 e0       	ldi	r30, 0x04	; 4
    175a:	93 c2       	rjmp	.+1318   	; 0x1c82 <__epilogue_restores__+0x1c>

0000175c <vfprintf>:
    175c:	ac e0       	ldi	r26, 0x0C	; 12
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e3 eb       	ldi	r30, 0xB3	; 179
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	64 c2       	rjmp	.+1224   	; 0x1c2e <__prologue_saves__>
    1766:	7c 01       	movw	r14, r24
    1768:	6b 01       	movw	r12, r22
    176a:	8a 01       	movw	r16, r20
    176c:	fc 01       	movw	r30, r24
    176e:	17 82       	std	Z+7, r1	; 0x07
    1770:	16 82       	std	Z+6, r1	; 0x06
    1772:	83 81       	ldd	r24, Z+3	; 0x03
    1774:	81 ff       	sbrs	r24, 1
    1776:	b0 c1       	rjmp	.+864    	; 0x1ad8 <vfprintf+0x37c>
    1778:	ce 01       	movw	r24, r28
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	4c 01       	movw	r8, r24
    177e:	f7 01       	movw	r30, r14
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	f6 01       	movw	r30, r12
    1784:	93 fd       	sbrc	r25, 3
    1786:	85 91       	lpm	r24, Z+
    1788:	93 ff       	sbrs	r25, 3
    178a:	81 91       	ld	r24, Z+
    178c:	6f 01       	movw	r12, r30
    178e:	88 23       	and	r24, r24
    1790:	09 f4       	brne	.+2      	; 0x1794 <vfprintf+0x38>
    1792:	9e c1       	rjmp	.+828    	; 0x1ad0 <vfprintf+0x374>
    1794:	85 32       	cpi	r24, 0x25	; 37
    1796:	39 f4       	brne	.+14     	; 0x17a6 <vfprintf+0x4a>
    1798:	93 fd       	sbrc	r25, 3
    179a:	85 91       	lpm	r24, Z+
    179c:	93 ff       	sbrs	r25, 3
    179e:	81 91       	ld	r24, Z+
    17a0:	6f 01       	movw	r12, r30
    17a2:	85 32       	cpi	r24, 0x25	; 37
    17a4:	21 f4       	brne	.+8      	; 0x17ae <vfprintf+0x52>
    17a6:	b7 01       	movw	r22, r14
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	b1 d1       	rcall	.+866    	; 0x1b0e <fputc>
    17ac:	e8 cf       	rjmp	.-48     	; 0x177e <vfprintf+0x22>
    17ae:	51 2c       	mov	r5, r1
    17b0:	31 2c       	mov	r3, r1
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	20 32       	cpi	r18, 0x20	; 32
    17b6:	a0 f4       	brcc	.+40     	; 0x17e0 <vfprintf+0x84>
    17b8:	8b 32       	cpi	r24, 0x2B	; 43
    17ba:	69 f0       	breq	.+26     	; 0x17d6 <vfprintf+0x7a>
    17bc:	30 f4       	brcc	.+12     	; 0x17ca <vfprintf+0x6e>
    17be:	80 32       	cpi	r24, 0x20	; 32
    17c0:	59 f0       	breq	.+22     	; 0x17d8 <vfprintf+0x7c>
    17c2:	83 32       	cpi	r24, 0x23	; 35
    17c4:	69 f4       	brne	.+26     	; 0x17e0 <vfprintf+0x84>
    17c6:	20 61       	ori	r18, 0x10	; 16
    17c8:	2c c0       	rjmp	.+88     	; 0x1822 <vfprintf+0xc6>
    17ca:	8d 32       	cpi	r24, 0x2D	; 45
    17cc:	39 f0       	breq	.+14     	; 0x17dc <vfprintf+0x80>
    17ce:	80 33       	cpi	r24, 0x30	; 48
    17d0:	39 f4       	brne	.+14     	; 0x17e0 <vfprintf+0x84>
    17d2:	21 60       	ori	r18, 0x01	; 1
    17d4:	26 c0       	rjmp	.+76     	; 0x1822 <vfprintf+0xc6>
    17d6:	22 60       	ori	r18, 0x02	; 2
    17d8:	24 60       	ori	r18, 0x04	; 4
    17da:	23 c0       	rjmp	.+70     	; 0x1822 <vfprintf+0xc6>
    17dc:	28 60       	ori	r18, 0x08	; 8
    17de:	21 c0       	rjmp	.+66     	; 0x1822 <vfprintf+0xc6>
    17e0:	27 fd       	sbrc	r18, 7
    17e2:	27 c0       	rjmp	.+78     	; 0x1832 <vfprintf+0xd6>
    17e4:	30 ed       	ldi	r19, 0xD0	; 208
    17e6:	38 0f       	add	r19, r24
    17e8:	3a 30       	cpi	r19, 0x0A	; 10
    17ea:	78 f4       	brcc	.+30     	; 0x180a <vfprintf+0xae>
    17ec:	26 ff       	sbrs	r18, 6
    17ee:	06 c0       	rjmp	.+12     	; 0x17fc <vfprintf+0xa0>
    17f0:	fa e0       	ldi	r31, 0x0A	; 10
    17f2:	5f 9e       	mul	r5, r31
    17f4:	30 0d       	add	r19, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	53 2e       	mov	r5, r19
    17fa:	13 c0       	rjmp	.+38     	; 0x1822 <vfprintf+0xc6>
    17fc:	8a e0       	ldi	r24, 0x0A	; 10
    17fe:	38 9e       	mul	r3, r24
    1800:	30 0d       	add	r19, r0
    1802:	11 24       	eor	r1, r1
    1804:	33 2e       	mov	r3, r19
    1806:	20 62       	ori	r18, 0x20	; 32
    1808:	0c c0       	rjmp	.+24     	; 0x1822 <vfprintf+0xc6>
    180a:	8e 32       	cpi	r24, 0x2E	; 46
    180c:	21 f4       	brne	.+8      	; 0x1816 <vfprintf+0xba>
    180e:	26 fd       	sbrc	r18, 6
    1810:	5f c1       	rjmp	.+702    	; 0x1ad0 <vfprintf+0x374>
    1812:	20 64       	ori	r18, 0x40	; 64
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <vfprintf+0xc6>
    1816:	8c 36       	cpi	r24, 0x6C	; 108
    1818:	11 f4       	brne	.+4      	; 0x181e <vfprintf+0xc2>
    181a:	20 68       	ori	r18, 0x80	; 128
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <vfprintf+0xc6>
    181e:	88 36       	cpi	r24, 0x68	; 104
    1820:	41 f4       	brne	.+16     	; 0x1832 <vfprintf+0xd6>
    1822:	f6 01       	movw	r30, r12
    1824:	93 fd       	sbrc	r25, 3
    1826:	85 91       	lpm	r24, Z+
    1828:	93 ff       	sbrs	r25, 3
    182a:	81 91       	ld	r24, Z+
    182c:	6f 01       	movw	r12, r30
    182e:	81 11       	cpse	r24, r1
    1830:	c1 cf       	rjmp	.-126    	; 0x17b4 <vfprintf+0x58>
    1832:	98 2f       	mov	r25, r24
    1834:	9f 7d       	andi	r25, 0xDF	; 223
    1836:	95 54       	subi	r25, 0x45	; 69
    1838:	93 30       	cpi	r25, 0x03	; 3
    183a:	28 f4       	brcc	.+10     	; 0x1846 <vfprintf+0xea>
    183c:	0c 5f       	subi	r16, 0xFC	; 252
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	ff e3       	ldi	r31, 0x3F	; 63
    1842:	f9 83       	std	Y+1, r31	; 0x01
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <vfprintf+0x104>
    1846:	83 36       	cpi	r24, 0x63	; 99
    1848:	31 f0       	breq	.+12     	; 0x1856 <vfprintf+0xfa>
    184a:	83 37       	cpi	r24, 0x73	; 115
    184c:	71 f0       	breq	.+28     	; 0x186a <vfprintf+0x10e>
    184e:	83 35       	cpi	r24, 0x53	; 83
    1850:	09 f0       	breq	.+2      	; 0x1854 <vfprintf+0xf8>
    1852:	57 c0       	rjmp	.+174    	; 0x1902 <vfprintf+0x1a6>
    1854:	21 c0       	rjmp	.+66     	; 0x1898 <vfprintf+0x13c>
    1856:	f8 01       	movw	r30, r16
    1858:	80 81       	ld	r24, Z
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	0e 5f       	subi	r16, 0xFE	; 254
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	44 24       	eor	r4, r4
    1862:	43 94       	inc	r4
    1864:	51 2c       	mov	r5, r1
    1866:	54 01       	movw	r10, r8
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <vfprintf+0x136>
    186a:	38 01       	movw	r6, r16
    186c:	f2 e0       	ldi	r31, 0x02	; 2
    186e:	6f 0e       	add	r6, r31
    1870:	71 1c       	adc	r7, r1
    1872:	f8 01       	movw	r30, r16
    1874:	a0 80       	ld	r10, Z
    1876:	b1 80       	ldd	r11, Z+1	; 0x01
    1878:	26 ff       	sbrs	r18, 6
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x126>
    187c:	65 2d       	mov	r22, r5
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x12a>
    1882:	6f ef       	ldi	r22, 0xFF	; 255
    1884:	7f ef       	ldi	r23, 0xFF	; 255
    1886:	c5 01       	movw	r24, r10
    1888:	2c 87       	std	Y+12, r18	; 0x0c
    188a:	36 d1       	rcall	.+620    	; 0x1af8 <strnlen>
    188c:	2c 01       	movw	r4, r24
    188e:	83 01       	movw	r16, r6
    1890:	2c 85       	ldd	r18, Y+12	; 0x0c
    1892:	2f 77       	andi	r18, 0x7F	; 127
    1894:	22 2e       	mov	r2, r18
    1896:	16 c0       	rjmp	.+44     	; 0x18c4 <vfprintf+0x168>
    1898:	38 01       	movw	r6, r16
    189a:	f2 e0       	ldi	r31, 0x02	; 2
    189c:	6f 0e       	add	r6, r31
    189e:	71 1c       	adc	r7, r1
    18a0:	f8 01       	movw	r30, r16
    18a2:	a0 80       	ld	r10, Z
    18a4:	b1 80       	ldd	r11, Z+1	; 0x01
    18a6:	26 ff       	sbrs	r18, 6
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x154>
    18aa:	65 2d       	mov	r22, r5
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <vfprintf+0x158>
    18b0:	6f ef       	ldi	r22, 0xFF	; 255
    18b2:	7f ef       	ldi	r23, 0xFF	; 255
    18b4:	c5 01       	movw	r24, r10
    18b6:	2c 87       	std	Y+12, r18	; 0x0c
    18b8:	14 d1       	rcall	.+552    	; 0x1ae2 <strnlen_P>
    18ba:	2c 01       	movw	r4, r24
    18bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    18be:	20 68       	ori	r18, 0x80	; 128
    18c0:	22 2e       	mov	r2, r18
    18c2:	83 01       	movw	r16, r6
    18c4:	23 fc       	sbrc	r2, 3
    18c6:	19 c0       	rjmp	.+50     	; 0x18fa <vfprintf+0x19e>
    18c8:	83 2d       	mov	r24, r3
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	48 16       	cp	r4, r24
    18ce:	59 06       	cpc	r5, r25
    18d0:	a0 f4       	brcc	.+40     	; 0x18fa <vfprintf+0x19e>
    18d2:	b7 01       	movw	r22, r14
    18d4:	80 e2       	ldi	r24, 0x20	; 32
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	1a d1       	rcall	.+564    	; 0x1b0e <fputc>
    18da:	3a 94       	dec	r3
    18dc:	f5 cf       	rjmp	.-22     	; 0x18c8 <vfprintf+0x16c>
    18de:	f5 01       	movw	r30, r10
    18e0:	27 fc       	sbrc	r2, 7
    18e2:	85 91       	lpm	r24, Z+
    18e4:	27 fe       	sbrs	r2, 7
    18e6:	81 91       	ld	r24, Z+
    18e8:	5f 01       	movw	r10, r30
    18ea:	b7 01       	movw	r22, r14
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0f d1       	rcall	.+542    	; 0x1b0e <fputc>
    18f0:	31 10       	cpse	r3, r1
    18f2:	3a 94       	dec	r3
    18f4:	f1 e0       	ldi	r31, 0x01	; 1
    18f6:	4f 1a       	sub	r4, r31
    18f8:	51 08       	sbc	r5, r1
    18fa:	41 14       	cp	r4, r1
    18fc:	51 04       	cpc	r5, r1
    18fe:	79 f7       	brne	.-34     	; 0x18de <vfprintf+0x182>
    1900:	de c0       	rjmp	.+444    	; 0x1abe <vfprintf+0x362>
    1902:	84 36       	cpi	r24, 0x64	; 100
    1904:	11 f0       	breq	.+4      	; 0x190a <vfprintf+0x1ae>
    1906:	89 36       	cpi	r24, 0x69	; 105
    1908:	31 f5       	brne	.+76     	; 0x1956 <vfprintf+0x1fa>
    190a:	f8 01       	movw	r30, r16
    190c:	27 ff       	sbrs	r18, 7
    190e:	07 c0       	rjmp	.+14     	; 0x191e <vfprintf+0x1c2>
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	0c 5f       	subi	r16, 0xFC	; 252
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	08 c0       	rjmp	.+16     	; 0x192e <vfprintf+0x1d2>
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	88 27       	eor	r24, r24
    1924:	77 fd       	sbrc	r23, 7
    1926:	80 95       	com	r24
    1928:	98 2f       	mov	r25, r24
    192a:	0e 5f       	subi	r16, 0xFE	; 254
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	2f 76       	andi	r18, 0x6F	; 111
    1930:	b2 2e       	mov	r11, r18
    1932:	97 ff       	sbrs	r25, 7
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <vfprintf+0x1ec>
    1936:	90 95       	com	r25
    1938:	80 95       	com	r24
    193a:	70 95       	com	r23
    193c:	61 95       	neg	r22
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	8f 4f       	sbci	r24, 0xFF	; 255
    1942:	9f 4f       	sbci	r25, 0xFF	; 255
    1944:	20 68       	ori	r18, 0x80	; 128
    1946:	b2 2e       	mov	r11, r18
    1948:	2a e0       	ldi	r18, 0x0A	; 10
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	a4 01       	movw	r20, r8
    194e:	11 d1       	rcall	.+546    	; 0x1b72 <__ultoa_invert>
    1950:	a8 2e       	mov	r10, r24
    1952:	a8 18       	sub	r10, r8
    1954:	43 c0       	rjmp	.+134    	; 0x19dc <vfprintf+0x280>
    1956:	85 37       	cpi	r24, 0x75	; 117
    1958:	29 f4       	brne	.+10     	; 0x1964 <vfprintf+0x208>
    195a:	2f 7e       	andi	r18, 0xEF	; 239
    195c:	b2 2e       	mov	r11, r18
    195e:	2a e0       	ldi	r18, 0x0A	; 10
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	25 c0       	rjmp	.+74     	; 0x19ae <vfprintf+0x252>
    1964:	f2 2f       	mov	r31, r18
    1966:	f9 7f       	andi	r31, 0xF9	; 249
    1968:	bf 2e       	mov	r11, r31
    196a:	8f 36       	cpi	r24, 0x6F	; 111
    196c:	c1 f0       	breq	.+48     	; 0x199e <vfprintf+0x242>
    196e:	18 f4       	brcc	.+6      	; 0x1976 <vfprintf+0x21a>
    1970:	88 35       	cpi	r24, 0x58	; 88
    1972:	79 f0       	breq	.+30     	; 0x1992 <vfprintf+0x236>
    1974:	ad c0       	rjmp	.+346    	; 0x1ad0 <vfprintf+0x374>
    1976:	80 37       	cpi	r24, 0x70	; 112
    1978:	19 f0       	breq	.+6      	; 0x1980 <vfprintf+0x224>
    197a:	88 37       	cpi	r24, 0x78	; 120
    197c:	21 f0       	breq	.+8      	; 0x1986 <vfprintf+0x22a>
    197e:	a8 c0       	rjmp	.+336    	; 0x1ad0 <vfprintf+0x374>
    1980:	2f 2f       	mov	r18, r31
    1982:	20 61       	ori	r18, 0x10	; 16
    1984:	b2 2e       	mov	r11, r18
    1986:	b4 fe       	sbrs	r11, 4
    1988:	0d c0       	rjmp	.+26     	; 0x19a4 <vfprintf+0x248>
    198a:	8b 2d       	mov	r24, r11
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	b8 2e       	mov	r11, r24
    1990:	09 c0       	rjmp	.+18     	; 0x19a4 <vfprintf+0x248>
    1992:	24 ff       	sbrs	r18, 4
    1994:	0a c0       	rjmp	.+20     	; 0x19aa <vfprintf+0x24e>
    1996:	9f 2f       	mov	r25, r31
    1998:	96 60       	ori	r25, 0x06	; 6
    199a:	b9 2e       	mov	r11, r25
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <vfprintf+0x24e>
    199e:	28 e0       	ldi	r18, 0x08	; 8
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <vfprintf+0x252>
    19a4:	20 e1       	ldi	r18, 0x10	; 16
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <vfprintf+0x252>
    19aa:	20 e1       	ldi	r18, 0x10	; 16
    19ac:	32 e0       	ldi	r19, 0x02	; 2
    19ae:	f8 01       	movw	r30, r16
    19b0:	b7 fe       	sbrs	r11, 7
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <vfprintf+0x266>
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	0c 5f       	subi	r16, 0xFC	; 252
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	06 c0       	rjmp	.+12     	; 0x19ce <vfprintf+0x272>
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 5f       	subi	r16, 0xFE	; 254
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	a4 01       	movw	r20, r8
    19d0:	d0 d0       	rcall	.+416    	; 0x1b72 <__ultoa_invert>
    19d2:	a8 2e       	mov	r10, r24
    19d4:	a8 18       	sub	r10, r8
    19d6:	fb 2d       	mov	r31, r11
    19d8:	ff 77       	andi	r31, 0x7F	; 127
    19da:	bf 2e       	mov	r11, r31
    19dc:	b6 fe       	sbrs	r11, 6
    19de:	0b c0       	rjmp	.+22     	; 0x19f6 <vfprintf+0x29a>
    19e0:	2b 2d       	mov	r18, r11
    19e2:	2e 7f       	andi	r18, 0xFE	; 254
    19e4:	a5 14       	cp	r10, r5
    19e6:	50 f4       	brcc	.+20     	; 0x19fc <vfprintf+0x2a0>
    19e8:	b4 fe       	sbrs	r11, 4
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <vfprintf+0x2a4>
    19ec:	b2 fc       	sbrc	r11, 2
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <vfprintf+0x2a4>
    19f0:	2b 2d       	mov	r18, r11
    19f2:	2e 7e       	andi	r18, 0xEE	; 238
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <vfprintf+0x2a4>
    19f6:	7a 2c       	mov	r7, r10
    19f8:	2b 2d       	mov	r18, r11
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfprintf+0x2a6>
    19fc:	7a 2c       	mov	r7, r10
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <vfprintf+0x2a6>
    1a00:	75 2c       	mov	r7, r5
    1a02:	24 ff       	sbrs	r18, 4
    1a04:	0d c0       	rjmp	.+26     	; 0x1a20 <vfprintf+0x2c4>
    1a06:	fe 01       	movw	r30, r28
    1a08:	ea 0d       	add	r30, r10
    1a0a:	f1 1d       	adc	r31, r1
    1a0c:	80 81       	ld	r24, Z
    1a0e:	80 33       	cpi	r24, 0x30	; 48
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <vfprintf+0x2ba>
    1a12:	29 7e       	andi	r18, 0xE9	; 233
    1a14:	09 c0       	rjmp	.+18     	; 0x1a28 <vfprintf+0x2cc>
    1a16:	22 ff       	sbrs	r18, 2
    1a18:	06 c0       	rjmp	.+12     	; 0x1a26 <vfprintf+0x2ca>
    1a1a:	73 94       	inc	r7
    1a1c:	73 94       	inc	r7
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <vfprintf+0x2cc>
    1a20:	82 2f       	mov	r24, r18
    1a22:	86 78       	andi	r24, 0x86	; 134
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <vfprintf+0x2cc>
    1a26:	73 94       	inc	r7
    1a28:	23 fd       	sbrc	r18, 3
    1a2a:	12 c0       	rjmp	.+36     	; 0x1a50 <vfprintf+0x2f4>
    1a2c:	20 ff       	sbrs	r18, 0
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <vfprintf+0x2e0>
    1a30:	5a 2c       	mov	r5, r10
    1a32:	73 14       	cp	r7, r3
    1a34:	18 f4       	brcc	.+6      	; 0x1a3c <vfprintf+0x2e0>
    1a36:	53 0c       	add	r5, r3
    1a38:	57 18       	sub	r5, r7
    1a3a:	73 2c       	mov	r7, r3
    1a3c:	73 14       	cp	r7, r3
    1a3e:	60 f4       	brcc	.+24     	; 0x1a58 <vfprintf+0x2fc>
    1a40:	b7 01       	movw	r22, r14
    1a42:	80 e2       	ldi	r24, 0x20	; 32
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	2c 87       	std	Y+12, r18	; 0x0c
    1a48:	62 d0       	rcall	.+196    	; 0x1b0e <fputc>
    1a4a:	73 94       	inc	r7
    1a4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a4e:	f6 cf       	rjmp	.-20     	; 0x1a3c <vfprintf+0x2e0>
    1a50:	73 14       	cp	r7, r3
    1a52:	10 f4       	brcc	.+4      	; 0x1a58 <vfprintf+0x2fc>
    1a54:	37 18       	sub	r3, r7
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <vfprintf+0x2fe>
    1a58:	31 2c       	mov	r3, r1
    1a5a:	24 ff       	sbrs	r18, 4
    1a5c:	11 c0       	rjmp	.+34     	; 0x1a80 <vfprintf+0x324>
    1a5e:	b7 01       	movw	r22, r14
    1a60:	80 e3       	ldi	r24, 0x30	; 48
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	2c 87       	std	Y+12, r18	; 0x0c
    1a66:	53 d0       	rcall	.+166    	; 0x1b0e <fputc>
    1a68:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a6a:	22 ff       	sbrs	r18, 2
    1a6c:	16 c0       	rjmp	.+44     	; 0x1a9a <vfprintf+0x33e>
    1a6e:	21 ff       	sbrs	r18, 1
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <vfprintf+0x31c>
    1a72:	88 e5       	ldi	r24, 0x58	; 88
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <vfprintf+0x320>
    1a78:	88 e7       	ldi	r24, 0x78	; 120
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	b7 01       	movw	r22, r14
    1a7e:	0c c0       	rjmp	.+24     	; 0x1a98 <vfprintf+0x33c>
    1a80:	82 2f       	mov	r24, r18
    1a82:	86 78       	andi	r24, 0x86	; 134
    1a84:	51 f0       	breq	.+20     	; 0x1a9a <vfprintf+0x33e>
    1a86:	21 fd       	sbrc	r18, 1
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x332>
    1a8a:	80 e2       	ldi	r24, 0x20	; 32
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <vfprintf+0x334>
    1a8e:	8b e2       	ldi	r24, 0x2B	; 43
    1a90:	27 fd       	sbrc	r18, 7
    1a92:	8d e2       	ldi	r24, 0x2D	; 45
    1a94:	b7 01       	movw	r22, r14
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	3a d0       	rcall	.+116    	; 0x1b0e <fputc>
    1a9a:	a5 14       	cp	r10, r5
    1a9c:	30 f4       	brcc	.+12     	; 0x1aaa <vfprintf+0x34e>
    1a9e:	b7 01       	movw	r22, r14
    1aa0:	80 e3       	ldi	r24, 0x30	; 48
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	34 d0       	rcall	.+104    	; 0x1b0e <fputc>
    1aa6:	5a 94       	dec	r5
    1aa8:	f8 cf       	rjmp	.-16     	; 0x1a9a <vfprintf+0x33e>
    1aaa:	aa 94       	dec	r10
    1aac:	f4 01       	movw	r30, r8
    1aae:	ea 0d       	add	r30, r10
    1ab0:	f1 1d       	adc	r31, r1
    1ab2:	80 81       	ld	r24, Z
    1ab4:	b7 01       	movw	r22, r14
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	2a d0       	rcall	.+84     	; 0x1b0e <fputc>
    1aba:	a1 10       	cpse	r10, r1
    1abc:	f6 cf       	rjmp	.-20     	; 0x1aaa <vfprintf+0x34e>
    1abe:	33 20       	and	r3, r3
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <vfprintf+0x368>
    1ac2:	5d ce       	rjmp	.-838    	; 0x177e <vfprintf+0x22>
    1ac4:	b7 01       	movw	r22, r14
    1ac6:	80 e2       	ldi	r24, 0x20	; 32
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	21 d0       	rcall	.+66     	; 0x1b0e <fputc>
    1acc:	3a 94       	dec	r3
    1ace:	f7 cf       	rjmp	.-18     	; 0x1abe <vfprintf+0x362>
    1ad0:	f7 01       	movw	r30, r14
    1ad2:	86 81       	ldd	r24, Z+6	; 0x06
    1ad4:	97 81       	ldd	r25, Z+7	; 0x07
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <vfprintf+0x380>
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	9f ef       	ldi	r25, 0xFF	; 255
    1adc:	2c 96       	adiw	r28, 0x0c	; 12
    1ade:	e2 e1       	ldi	r30, 0x12	; 18
    1ae0:	c2 c0       	rjmp	.+388    	; 0x1c66 <__epilogue_restores__>

00001ae2 <strnlen_P>:
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	05 90       	lpm	r0, Z+
    1ae6:	61 50       	subi	r22, 0x01	; 1
    1ae8:	70 40       	sbci	r23, 0x00	; 0
    1aea:	01 10       	cpse	r0, r1
    1aec:	d8 f7       	brcc	.-10     	; 0x1ae4 <strnlen_P+0x2>
    1aee:	80 95       	com	r24
    1af0:	90 95       	com	r25
    1af2:	8e 0f       	add	r24, r30
    1af4:	9f 1f       	adc	r25, r31
    1af6:	08 95       	ret

00001af8 <strnlen>:
    1af8:	fc 01       	movw	r30, r24
    1afa:	61 50       	subi	r22, 0x01	; 1
    1afc:	70 40       	sbci	r23, 0x00	; 0
    1afe:	01 90       	ld	r0, Z+
    1b00:	01 10       	cpse	r0, r1
    1b02:	d8 f7       	brcc	.-10     	; 0x1afa <strnlen+0x2>
    1b04:	80 95       	com	r24
    1b06:	90 95       	com	r25
    1b08:	8e 0f       	add	r24, r30
    1b0a:	9f 1f       	adc	r25, r31
    1b0c:	08 95       	ret

00001b0e <fputc>:
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	18 2f       	mov	r17, r24
    1b18:	09 2f       	mov	r16, r25
    1b1a:	eb 01       	movw	r28, r22
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	81 fd       	sbrc	r24, 1
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <fputc+0x1a>
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	9f ef       	ldi	r25, 0xFF	; 255
    1b26:	20 c0       	rjmp	.+64     	; 0x1b68 <fputc+0x5a>
    1b28:	82 ff       	sbrs	r24, 2
    1b2a:	10 c0       	rjmp	.+32     	; 0x1b4c <fputc+0x3e>
    1b2c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b2e:	5f 81       	ldd	r21, Y+7	; 0x07
    1b30:	2c 81       	ldd	r18, Y+4	; 0x04
    1b32:	3d 81       	ldd	r19, Y+5	; 0x05
    1b34:	42 17       	cp	r20, r18
    1b36:	53 07       	cpc	r21, r19
    1b38:	7c f4       	brge	.+30     	; 0x1b58 <fputc+0x4a>
    1b3a:	e8 81       	ld	r30, Y
    1b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b3e:	9f 01       	movw	r18, r30
    1b40:	2f 5f       	subi	r18, 0xFF	; 255
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	39 83       	std	Y+1, r19	; 0x01
    1b46:	28 83       	st	Y, r18
    1b48:	10 83       	st	Z, r17
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <fputc+0x4a>
    1b4c:	e8 85       	ldd	r30, Y+8	; 0x08
    1b4e:	f9 85       	ldd	r31, Y+9	; 0x09
    1b50:	81 2f       	mov	r24, r17
    1b52:	09 95       	icall
    1b54:	89 2b       	or	r24, r25
    1b56:	29 f7       	brne	.-54     	; 0x1b22 <fputc+0x14>
    1b58:	2e 81       	ldd	r18, Y+6	; 0x06
    1b5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b5c:	2f 5f       	subi	r18, 0xFF	; 255
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	3f 83       	std	Y+7, r19	; 0x07
    1b62:	2e 83       	std	Y+6, r18	; 0x06
    1b64:	81 2f       	mov	r24, r17
    1b66:	90 2f       	mov	r25, r16
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	08 95       	ret

00001b72 <__ultoa_invert>:
    1b72:	fa 01       	movw	r30, r20
    1b74:	aa 27       	eor	r26, r26
    1b76:	28 30       	cpi	r18, 0x08	; 8
    1b78:	51 f1       	breq	.+84     	; 0x1bce <__ultoa_invert+0x5c>
    1b7a:	20 31       	cpi	r18, 0x10	; 16
    1b7c:	81 f1       	breq	.+96     	; 0x1bde <__ultoa_invert+0x6c>
    1b7e:	e8 94       	clt
    1b80:	6f 93       	push	r22
    1b82:	6e 7f       	andi	r22, 0xFE	; 254
    1b84:	6e 5f       	subi	r22, 0xFE	; 254
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	af 4f       	sbci	r26, 0xFF	; 255
    1b8e:	b1 e0       	ldi	r27, 0x01	; 1
    1b90:	3e d0       	rcall	.+124    	; 0x1c0e <__ultoa_invert+0x9c>
    1b92:	b4 e0       	ldi	r27, 0x04	; 4
    1b94:	3c d0       	rcall	.+120    	; 0x1c0e <__ultoa_invert+0x9c>
    1b96:	67 0f       	add	r22, r23
    1b98:	78 1f       	adc	r23, r24
    1b9a:	89 1f       	adc	r24, r25
    1b9c:	9a 1f       	adc	r25, r26
    1b9e:	a1 1d       	adc	r26, r1
    1ba0:	68 0f       	add	r22, r24
    1ba2:	79 1f       	adc	r23, r25
    1ba4:	8a 1f       	adc	r24, r26
    1ba6:	91 1d       	adc	r25, r1
    1ba8:	a1 1d       	adc	r26, r1
    1baa:	6a 0f       	add	r22, r26
    1bac:	71 1d       	adc	r23, r1
    1bae:	81 1d       	adc	r24, r1
    1bb0:	91 1d       	adc	r25, r1
    1bb2:	a1 1d       	adc	r26, r1
    1bb4:	20 d0       	rcall	.+64     	; 0x1bf6 <__ultoa_invert+0x84>
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <__ultoa_invert+0x48>
    1bb8:	68 94       	set
    1bba:	3f 91       	pop	r19
    1bbc:	2a e0       	ldi	r18, 0x0A	; 10
    1bbe:	26 9f       	mul	r18, r22
    1bc0:	11 24       	eor	r1, r1
    1bc2:	30 19       	sub	r19, r0
    1bc4:	30 5d       	subi	r19, 0xD0	; 208
    1bc6:	31 93       	st	Z+, r19
    1bc8:	de f6       	brtc	.-74     	; 0x1b80 <__ultoa_invert+0xe>
    1bca:	cf 01       	movw	r24, r30
    1bcc:	08 95       	ret
    1bce:	46 2f       	mov	r20, r22
    1bd0:	47 70       	andi	r20, 0x07	; 7
    1bd2:	40 5d       	subi	r20, 0xD0	; 208
    1bd4:	41 93       	st	Z+, r20
    1bd6:	b3 e0       	ldi	r27, 0x03	; 3
    1bd8:	0f d0       	rcall	.+30     	; 0x1bf8 <__ultoa_invert+0x86>
    1bda:	c9 f7       	brne	.-14     	; 0x1bce <__ultoa_invert+0x5c>
    1bdc:	f6 cf       	rjmp	.-20     	; 0x1bca <__ultoa_invert+0x58>
    1bde:	46 2f       	mov	r20, r22
    1be0:	4f 70       	andi	r20, 0x0F	; 15
    1be2:	40 5d       	subi	r20, 0xD0	; 208
    1be4:	4a 33       	cpi	r20, 0x3A	; 58
    1be6:	18 f0       	brcs	.+6      	; 0x1bee <__ultoa_invert+0x7c>
    1be8:	49 5d       	subi	r20, 0xD9	; 217
    1bea:	31 fd       	sbrc	r19, 1
    1bec:	40 52       	subi	r20, 0x20	; 32
    1bee:	41 93       	st	Z+, r20
    1bf0:	02 d0       	rcall	.+4      	; 0x1bf6 <__ultoa_invert+0x84>
    1bf2:	a9 f7       	brne	.-22     	; 0x1bde <__ultoa_invert+0x6c>
    1bf4:	ea cf       	rjmp	.-44     	; 0x1bca <__ultoa_invert+0x58>
    1bf6:	b4 e0       	ldi	r27, 0x04	; 4
    1bf8:	a6 95       	lsr	r26
    1bfa:	97 95       	ror	r25
    1bfc:	87 95       	ror	r24
    1bfe:	77 95       	ror	r23
    1c00:	67 95       	ror	r22
    1c02:	ba 95       	dec	r27
    1c04:	c9 f7       	brne	.-14     	; 0x1bf8 <__ultoa_invert+0x86>
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	61 05       	cpc	r22, r1
    1c0a:	71 05       	cpc	r23, r1
    1c0c:	08 95       	ret
    1c0e:	9b 01       	movw	r18, r22
    1c10:	ac 01       	movw	r20, r24
    1c12:	0a 2e       	mov	r0, r26
    1c14:	06 94       	lsr	r0
    1c16:	57 95       	ror	r21
    1c18:	47 95       	ror	r20
    1c1a:	37 95       	ror	r19
    1c1c:	27 95       	ror	r18
    1c1e:	ba 95       	dec	r27
    1c20:	c9 f7       	brne	.-14     	; 0x1c14 <__ultoa_invert+0xa2>
    1c22:	62 0f       	add	r22, r18
    1c24:	73 1f       	adc	r23, r19
    1c26:	84 1f       	adc	r24, r20
    1c28:	95 1f       	adc	r25, r21
    1c2a:	a0 1d       	adc	r26, r0
    1c2c:	08 95       	ret

00001c2e <__prologue_saves__>:
    1c2e:	2f 92       	push	r2
    1c30:	3f 92       	push	r3
    1c32:	4f 92       	push	r4
    1c34:	5f 92       	push	r5
    1c36:	6f 92       	push	r6
    1c38:	7f 92       	push	r7
    1c3a:	8f 92       	push	r8
    1c3c:	9f 92       	push	r9
    1c3e:	af 92       	push	r10
    1c40:	bf 92       	push	r11
    1c42:	cf 92       	push	r12
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	ca 1b       	sub	r28, r26
    1c58:	db 0b       	sbc	r29, r27
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	09 94       	ijmp

00001c66 <__epilogue_restores__>:
    1c66:	2a 88       	ldd	r2, Y+18	; 0x12
    1c68:	39 88       	ldd	r3, Y+17	; 0x11
    1c6a:	48 88       	ldd	r4, Y+16	; 0x10
    1c6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c70:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c72:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c74:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c76:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c78:	b9 84       	ldd	r11, Y+9	; 0x09
    1c7a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c7c:	df 80       	ldd	r13, Y+7	; 0x07
    1c7e:	ee 80       	ldd	r14, Y+6	; 0x06
    1c80:	fd 80       	ldd	r15, Y+5	; 0x05
    1c82:	0c 81       	ldd	r16, Y+4	; 0x04
    1c84:	1b 81       	ldd	r17, Y+3	; 0x03
    1c86:	aa 81       	ldd	r26, Y+2	; 0x02
    1c88:	b9 81       	ldd	r27, Y+1	; 0x01
    1c8a:	ce 0f       	add	r28, r30
    1c8c:	d1 1d       	adc	r29, r1
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	ed 01       	movw	r28, r26
    1c9a:	08 95       	ret

00001c9c <_exit>:
    1c9c:	f8 94       	cli

00001c9e <__stop_program>:
    1c9e:	ff cf       	rjmp	.-2      	; 0x1c9e <__stop_program>
