
PWMlight_mesaure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00001dea  00001e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d4  008000f4  008000f4  00001f12  2**0
                  ALLOC
  3 .stab         00003b70  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a9a  00000000  00000000  00005a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000751e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
       2:	35 c0       	rjmp	.+106    	; 0x6e <__bad_interrupt>
       4:	34 c0       	rjmp	.+104    	; 0x6e <__bad_interrupt>
       6:	f3 c1       	rjmp	.+998    	; 0x3ee <__vector_3>
       8:	32 c0       	rjmp	.+100    	; 0x6e <__bad_interrupt>
       a:	31 c0       	rjmp	.+98     	; 0x6e <__bad_interrupt>
       c:	27 c3       	rjmp	.+1614   	; 0x65c <__vector_6>
       e:	2f c0       	rjmp	.+94     	; 0x6e <__bad_interrupt>
      10:	2e c0       	rjmp	.+92     	; 0x6e <__bad_interrupt>
      12:	2d c0       	rjmp	.+90     	; 0x6e <__bad_interrupt>
      14:	2c c0       	rjmp	.+88     	; 0x6e <__bad_interrupt>
      16:	73 ca       	rjmp	.-2842   	; 0xfffff4fe <__eeprom_end+0xff7ef4fe>
      18:	2a c0       	rjmp	.+84     	; 0x6e <__bad_interrupt>
      1a:	37 ca       	rjmp	.-2962   	; 0xfffff48a <__eeprom_end+0xff7ef48a>
      1c:	28 c0       	rjmp	.+80     	; 0x6e <__bad_interrupt>
      1e:	27 c0       	rjmp	.+78     	; 0x6e <__bad_interrupt>
      20:	26 c0       	rjmp	.+76     	; 0x6e <__bad_interrupt>
      22:	25 c0       	rjmp	.+74     	; 0x6e <__bad_interrupt>
      24:	24 c0       	rjmp	.+72     	; 0x6e <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	30 31       	cpi	r19, 0x10	; 16
      28:	32 33       	cpi	r19, 0x32	; 50
      2a:	34 35       	cpi	r19, 0x54	; 84
      2c:	36 37       	cpi	r19, 0x76	; 118
      2e:	38 39       	cpi	r19, 0x98	; 152
      30:	41 42       	sbci	r20, 0x21	; 33
      32:	43 44       	sbci	r20, 0x43	; 67
      34:	45 46       	sbci	r20, 0x65	; 101
	...

00000038 <__ctors_end>:
      38:	11 24       	eor	r1, r1
      3a:	1f be       	out	0x3f, r1	; 63
      3c:	cf e5       	ldi	r28, 0x5F	; 95
      3e:	d4 e0       	ldi	r29, 0x04	; 4
      40:	de bf       	out	0x3e, r29	; 62
      42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
      44:	10 e0       	ldi	r17, 0x00	; 0
      46:	a0 e6       	ldi	r26, 0x60	; 96
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	ea ee       	ldi	r30, 0xEA	; 234
      4c:	fd e1       	ldi	r31, 0x1D	; 29
      4e:	02 c0       	rjmp	.+4      	; 0x54 <__do_copy_data+0x10>
      50:	05 90       	lpm	r0, Z+
      52:	0d 92       	st	X+, r0
      54:	a4 3f       	cpi	r26, 0xF4	; 244
      56:	b1 07       	cpc	r27, r17
      58:	d9 f7       	brne	.-10     	; 0x50 <__do_copy_data+0xc>

0000005a <__do_clear_bss>:
      5a:	21 e0       	ldi	r18, 0x01	; 1
      5c:	a4 ef       	ldi	r26, 0xF4	; 244
      5e:	b0 e0       	ldi	r27, 0x00	; 0
      60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
      62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
      64:	a8 3c       	cpi	r26, 0xC8	; 200
      66:	b2 07       	cpc	r27, r18
      68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
      6a:	b0 d4       	rcall	.+2400   	; 0x9cc <main>
      6c:	bc ce       	rjmp	.-648    	; 0xfffffde6 <__eeprom_end+0xff7efde6>

0000006e <__bad_interrupt>:
      6e:	c8 cf       	rjmp	.-112    	; 0x0 <__vectors>

00000070 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
      70:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      72:	8f b7       	in	r24, 0x3f	; 63
      74:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
      76:	71 83       	std	Z+1, r23	; 0x01
      78:	60 83       	st	Z, r22
	buffer->size = size;
      7a:	53 83       	std	Z+3, r21	; 0x03
      7c:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
      7e:	17 82       	std	Z+7, r1	; 0x07
      80:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
      82:	15 82       	std	Z+5, r1	; 0x05
      84:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
      86:	8f bf       	out	0x3f, r24	; 63
      88:	08 95       	ret

0000008a <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
      8a:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
      8c:	9f b7       	in	r25, 0x3f	; 63
      8e:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
      90:	24 81       	ldd	r18, Z+4	; 0x04
      92:	35 81       	ldd	r19, Z+5	; 0x05
      94:	21 15       	cp	r18, r1
      96:	31 05       	cpc	r19, r1
      98:	d9 f0       	breq	.+54     	; 0xd0 <bufferGetFromFront+0x46>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
      9a:	46 81       	ldd	r20, Z+6	; 0x06
      9c:	57 81       	ldd	r21, Z+7	; 0x07
      9e:	a0 81       	ld	r26, Z
      a0:	b1 81       	ldd	r27, Z+1	; 0x01
      a2:	a4 0f       	add	r26, r20
      a4:	b5 1f       	adc	r27, r21
      a6:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
      a8:	4f 5f       	subi	r20, 0xFF	; 255
      aa:	5f 4f       	sbci	r21, 0xFF	; 255
      ac:	57 83       	std	Z+7, r21	; 0x07
      ae:	46 83       	std	Z+6, r20	; 0x06
		if(buffer->dataindex >= buffer->size)
      b0:	62 81       	ldd	r22, Z+2	; 0x02
      b2:	73 81       	ldd	r23, Z+3	; 0x03
      b4:	46 17       	cp	r20, r22
      b6:	57 07       	cpc	r21, r23
      b8:	30 f4       	brcc	.+12     	; 0xc6 <bufferGetFromFront+0x3c>
		{
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
      ba:	21 50       	subi	r18, 0x01	; 1
      bc:	31 09       	sbc	r19, r1
      be:	35 83       	std	Z+5, r19	; 0x05
      c0:	24 83       	std	Z+4, r18	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
      c2:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
      c4:	08 95       	ret
		data = buffer->dataptr[buffer->dataindex];
		// move index down and decrement length
		buffer->dataindex++;
		if(buffer->dataindex >= buffer->size)
		{
			buffer->dataindex -= buffer->size;
      c6:	46 1b       	sub	r20, r22
      c8:	57 0b       	sbc	r21, r23
      ca:	57 83       	std	Z+7, r21	; 0x07
      cc:	46 83       	std	Z+6, r20	; 0x06
      ce:	f5 cf       	rjmp	.-22     	; 0xba <bufferGetFromFront+0x30>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
      d0:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
      d2:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
      d4:	08 95       	ret

000000d6 <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
      d6:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
      d8:	af b7       	in	r26, 0x3f	; 63
      da:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
      dc:	24 81       	ldd	r18, Z+4	; 0x04
      de:	35 81       	ldd	r19, Z+5	; 0x05
      e0:	62 17       	cp	r22, r18
      e2:	73 07       	cpc	r23, r19
      e4:	a8 f4       	brcc	.+42     	; 0x110 <bufferDumpFromFront+0x3a>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
      e6:	86 81       	ldd	r24, Z+6	; 0x06
      e8:	97 81       	ldd	r25, Z+7	; 0x07
      ea:	86 0f       	add	r24, r22
      ec:	97 1f       	adc	r25, r23
      ee:	97 83       	std	Z+7, r25	; 0x07
      f0:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
      f2:	42 81       	ldd	r20, Z+2	; 0x02
      f4:	53 81       	ldd	r21, Z+3	; 0x03
      f6:	84 17       	cp	r24, r20
      f8:	95 07       	cpc	r25, r21
      fa:	20 f0       	brcs	.+8      	; 0x104 <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
      fc:	84 1b       	sub	r24, r20
      fe:	95 0b       	sbc	r25, r21
     100:	97 83       	std	Z+7, r25	; 0x07
     102:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
     104:	26 1b       	sub	r18, r22
     106:	37 0b       	sbc	r19, r23
     108:	35 83       	std	Z+5, r19	; 0x05
     10a:	24 83       	std	Z+4, r18	; 0x04
	{
		// flush the whole buffer
		buffer->datalength = 0;
	}
	// end critical section
	CRITICAL_SECTION_END;
     10c:	af bf       	out	0x3f, r26	; 63
     10e:	08 95       	ret
		buffer->datalength -= numbytes;
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
     110:	15 82       	std	Z+5, r1	; 0x05
     112:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
     114:	af bf       	out	0x3f, r26	; 63
     116:	08 95       	ret

00000118 <bufferGetAtIndex>:
}

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
     118:	fc 01       	movw	r30, r24
     11a:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
     11c:	4f b7       	in	r20, 0x3f	; 63
     11e:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
     120:	26 81       	ldd	r18, Z+6	; 0x06
     122:	37 81       	ldd	r19, Z+7	; 0x07
     124:	82 0f       	add	r24, r18
     126:	93 1f       	adc	r25, r19
     128:	62 81       	ldd	r22, Z+2	; 0x02
     12a:	73 81       	ldd	r23, Z+3	; 0x03
     12c:	26 da       	rcall	.-2996   	; 0xfffff57a <__eeprom_end+0xff7ef57a>
     12e:	01 90       	ld	r0, Z+
     130:	f0 81       	ld	r31, Z
     132:	e0 2d       	mov	r30, r0
     134:	e8 0f       	add	r30, r24
     136:	f9 1f       	adc	r31, r25
     138:	80 81       	ld	r24, Z
	// end critical section
	CRITICAL_SECTION_END;
     13a:	4f bf       	out	0x3f, r20	; 63
	return data;
}
     13c:	08 95       	ret

0000013e <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
     146:	cf b7       	in	r28, 0x3f	; 63
     148:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
     14a:	44 81       	ldd	r20, Z+4	; 0x04
     14c:	55 81       	ldd	r21, Z+5	; 0x05
     14e:	62 81       	ldd	r22, Z+2	; 0x02
     150:	73 81       	ldd	r23, Z+3	; 0x03
     152:	46 17       	cp	r20, r22
     154:	57 07       	cpc	r21, r23
     156:	a0 f4       	brcc	.+40     	; 0x180 <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
     158:	86 81       	ldd	r24, Z+6	; 0x06
     15a:	97 81       	ldd	r25, Z+7	; 0x07
     15c:	84 0f       	add	r24, r20
     15e:	95 1f       	adc	r25, r21
     160:	0c da       	rcall	.-3048   	; 0xfffff57a <__eeprom_end+0xff7ef57a>
     162:	a0 81       	ld	r26, Z
     164:	b1 81       	ldd	r27, Z+1	; 0x01
     166:	a8 0f       	add	r26, r24
     168:	b9 1f       	adc	r27, r25
     16a:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
     16c:	84 81       	ldd	r24, Z+4	; 0x04
     16e:	95 81       	ldd	r25, Z+5	; 0x05
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	95 83       	std	Z+5, r25	; 0x05
     174:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
     176:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
     178:	8f ef       	ldi	r24, 0xFF	; 255
	}
	// end critical section
	CRITICAL_SECTION_END;
	// return failure
	return 0;
}
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret
		CRITICAL_SECTION_END;
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
     180:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
     18a:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
     18c:	4f b7       	in	r20, 0x3f	; 63
     18e:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
     190:	82 81       	ldd	r24, Z+2	; 0x02
     192:	93 81       	ldd	r25, Z+3	; 0x03
     194:	24 81       	ldd	r18, Z+4	; 0x04
     196:	35 81       	ldd	r19, Z+5	; 0x05
	// end critical section
	CRITICAL_SECTION_END;
     198:	4f bf       	out	0x3f, r20	; 63
	return bytesleft;
}
     19a:	82 1b       	sub	r24, r18
     19c:	93 0b       	sbc	r25, r19
     19e:	08 95       	ret

000001a0 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
	// begin critical section
	CRITICAL_SECTION_START;
     1a0:	2f b7       	in	r18, 0x3f	; 63
     1a2:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
     1a4:	fc 01       	movw	r30, r24
     1a6:	15 82       	std	Z+5, r1	; 0x05
     1a8:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
     1aa:	2f bf       	out	0x3f, r18	; 63
     1ac:	08 95       	ret

000001ae <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
     1ae:	66 23       	and	r22, r22
     1b0:	69 f1       	breq	.+90     	; 0x20c <lcd_write+0x5e>
       lcd_rs_high();
     1b2:	c1 9a       	sbi	0x18, 1	; 24
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();    /* RW=0  write mode      */
     1b4:	c7 98       	cbi	0x18, 7	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     1b6:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     1b8:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     1ba:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     1bc:	be 9a       	sbi	0x17, 6	; 23
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1be:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1c0:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1c2:	c4 98       	cbi	0x18, 4	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1c4:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1c6:	87 fd       	sbrc	r24, 7
     1c8:	23 c0       	rjmp	.+70     	; 0x210 <lcd_write+0x62>
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ca:	86 fd       	sbrc	r24, 6
     1cc:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1ce:	85 fd       	sbrc	r24, 5
     1d0:	c4 9a       	sbi	0x18, 4	; 24
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     1d2:	84 fd       	sbrc	r24, 4
     1d4:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1d6:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	9a 95       	dec	r25
     1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_write+0x2c>
    lcd_e_delay();
    lcd_e_low();
     1de:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1e0:	c6 98       	cbi	0x18, 6	; 24
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1e2:	c5 98       	cbi	0x18, 5	; 24
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1e4:	c4 98       	cbi	0x18, 4	; 24
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1e6:	c3 98       	cbi	0x18, 3	; 24
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1e8:	83 fd       	sbrc	r24, 3
     1ea:	c6 9a       	sbi	0x18, 6	; 24
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ec:	82 fd       	sbrc	r24, 2
     1ee:	c5 9a       	sbi	0x18, 5	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1f0:	81 fd       	sbrc	r24, 1
     1f2:	c4 9a       	sbi	0x18, 4	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1f4:	80 fd       	sbrc	r24, 0
     1f6:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1f8:	c2 9a       	sbi	0x18, 2	; 24
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	8a 95       	dec	r24
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_write+0x4e>
    lcd_e_delay();
    lcd_e_low();
     200:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     202:	c3 9a       	sbi	0x18, 3	; 24
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     204:	c4 9a       	sbi	0x18, 4	; 24
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     206:	c5 9a       	sbi	0x18, 5	; 24
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     208:	c6 9a       	sbi	0x18, 6	; 24
     20a:	08 95       	ret


    if (rs) {        /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     20c:	c1 98       	cbi	0x18, 1	; 24
     20e:	d2 cf       	rjmp	.-92     	; 0x1b4 <lcd_write+0x6>
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     210:	c6 9a       	sbi	0x18, 6	; 24
     212:	db cf       	rjmp	.-74     	; 0x1ca <lcd_write+0x1c>

00000214 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     214:	c1 98       	cbi	0x18, 1	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
     216:	c7 9a       	sbi	0x18, 7	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     218:	bb 98       	cbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     21a:	bc 98       	cbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     21c:	bd 98       	cbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     21e:	be 98       	cbi	0x17, 6	; 23
                
        /* read high nibble first */
        lcd_e_high();
     220:	c2 9a       	sbi	0x18, 2	; 24
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <lcd_read.constprop.0+0x10>
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     228:	b3 99       	sbic	0x16, 3	; 22
     22a:	19 c0       	rjmp	.+50     	; 0x25e <lcd_read.constprop.0+0x4a>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     22c:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     22e:	b4 99       	sbic	0x16, 4	; 22
     230:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     232:	b5 99       	sbic	0x16, 5	; 22
     234:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     236:	b6 99       	sbic	0x16, 6	; 22
     238:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     23a:	c2 98       	cbi	0x18, 2	; 24
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	9a 95       	dec	r25
     240:	f1 f7       	brne	.-4      	; 0x23e <lcd_read.constprop.0+0x2a>

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
     242:	c2 9a       	sbi	0x18, 2	; 24
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	9a 95       	dec	r25
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_read.constprop.0+0x32>
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     24a:	b3 99       	sbic	0x16, 3	; 22
     24c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     24e:	b4 99       	sbic	0x16, 4	; 22
     250:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     252:	b5 99       	sbic	0x16, 5	; 22
     254:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     256:	b6 99       	sbic	0x16, 6	; 22
     258:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     25a:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     25c:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     25e:	80 e1       	ldi	r24, 0x10	; 16
     260:	e6 cf       	rjmp	.-52     	; 0x22e <lcd_read.constprop.0+0x1a>

00000262 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     262:	d8 df       	rcall	.-80     	; 0x214 <lcd_read.constprop.0>
     264:	87 fd       	sbrc	r24, 7
     266:	fd cf       	rjmp	.-6      	; 0x262 <lcd_waitbusy>
     268:	8a e0       	ldi	r24, 0x0A	; 10
     26a:	8a 95       	dec	r24
     26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_waitbusy+0x8>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     26e:	d2 cf       	rjmp	.-92     	; 0x214 <lcd_read.constprop.0>

00000270 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     270:	cf 93       	push	r28
     272:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     274:	f6 df       	rcall	.-20     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	8c 2f       	mov	r24, r28
}
     27a:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     27c:	98 cf       	rjmp	.-208    	; 0x1ae <lcd_write>

0000027e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     27e:	cf 93       	push	r28
     280:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     282:	ef df       	rcall	.-34     	; 0x262 <lcd_waitbusy>
    lcd_write(data,1);
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	8c 2f       	mov	r24, r28
}
     288:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
     28a:	91 cf       	rjmp	.-222    	; 0x1ae <lcd_write>

0000028c <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     28c:	cf 93       	push	r28
     28e:	c8 2f       	mov	r28, r24
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     290:	66 23       	and	r22, r22
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_gotoxy+0x14>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     294:	e6 df       	rcall	.-52     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	80 ec       	ldi	r24, 0xC0	; 192
     29a:	8c 0f       	add	r24, r28
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     29c:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     29e:	87 cf       	rjmp	.-242    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2a0:	e0 df       	rcall	.-64     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	8c 0f       	add	r24, r28
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     2a8:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     2aa:	81 cf       	rjmp	.-254    	; 0x1ae <lcd_write>

000002ac <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     2ac:	da df       	rcall	.-76     	; 0x262 <lcd_waitbusy>
}
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	08 95       	ret

000002b2 <lcd_clrscr>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2b2:	d7 df       	rcall	.-82     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	7a cf       	rjmp	.-268    	; 0x1ae <lcd_write>

000002ba <lcd_home>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2ba:	d3 df       	rcall	.-90     	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	76 cf       	rjmp	.-276    	; 0x1ae <lcd_write>

000002c2 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     2c2:	cf 93       	push	r28
     2c4:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     2c6:	cd df       	rcall	.-102    	; 0x262 <lcd_waitbusy>
    if (c=='\n')
     2c8:	ca 30       	cpi	r28, 0x0A	; 10
     2ca:	21 f0       	breq	.+8      	; 0x2d4 <lcd_putc+0x12>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
     2d0:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2d2:	6d cf       	rjmp	.-294    	; 0x1ae <lcd_write>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2d4:	80 34       	cpi	r24, 0x40	; 64
     2d6:	30 f0       	brcs	.+12     	; 0x2e4 <lcd_putc+0x22>
     2d8:	c0 e8       	ldi	r28, 0x80	; 128
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     2da:	c3 df       	rcall	.-122    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	8c 2f       	mov	r24, r28
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     2e0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     2e2:	65 cf       	rjmp	.-310    	; 0x1ae <lcd_write>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2e4:	c0 ec       	ldi	r28, 0xC0	; 192
     2e6:	f9 cf       	rjmp	.-14     	; 0x2da <lcd_putc+0x18>

000002e8 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
     2ec:	ec 01       	movw	r28, r24
     2ee:	21 96       	adiw	r28, 0x01	; 1
     2f0:	fc 01       	movw	r30, r24
     2f2:	80 81       	ld	r24, Z
     2f4:	88 23       	and	r24, r24
     2f6:	21 f0       	breq	.+8      	; 0x300 <lcd_puts+0x18>
        lcd_putc(c);
     2f8:	e4 df       	rcall	.-56     	; 0x2c2 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     2fa:	89 91       	ld	r24, Y+
     2fc:	81 11       	cpse	r24, r1
     2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     30a:	ec 01       	movw	r28, r24
     30c:	21 96       	adiw	r28, 0x01	; 1
     30e:	fc 01       	movw	r30, r24
     310:	84 91       	lpm	r24, Z
     312:	88 23       	and	r24, r24
     314:	31 f0       	breq	.+12     	; 0x322 <lcd_puts_p+0x1c>
        lcd_putc(c);
     316:	d5 df       	rcall	.-86     	; 0x2c2 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     318:	fe 01       	movw	r30, r28
     31a:	84 91       	lpm	r24, Z
     31c:	21 96       	adiw	r28, 0x01	; 1
     31e:	81 11       	cpse	r24, r1
     320:	fa cf       	rjmp	.-12     	; 0x316 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     328:	cf 93       	push	r28
     32a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     32c:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     32e:	bf 9a       	sbi	0x17, 7	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     330:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     332:	bb 9a       	sbi	0x17, 3	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     334:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     336:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     338:	be 9a       	sbi	0x17, 6	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	e0 ea       	ldi	r30, 0xA0	; 160
     33c:	fc e8       	ldi	r31, 0x8C	; 140
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <lcd_init+0x16>
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     342:	c4 9a       	sbi	0x18, 4	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     344:	c3 9a       	sbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     346:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	9a 95       	dec	r25
     34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init+0x22>
    lcd_e_delay();
    lcd_e_low();
     34e:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     350:	e0 eb       	ldi	r30, 0xB0	; 176
     352:	f6 e3       	ldi	r31, 0x36	; 54
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <lcd_init+0x2c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     358:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	9a 95       	dec	r25
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init+0x34>
    lcd_e_delay();
    lcd_e_low();
     360:	c2 98       	cbi	0x18, 2	; 24
     362:	9a ea       	ldi	r25, 0xAA	; 170
     364:	9a 95       	dec	r25
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd_init+0x3c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     368:	c2 9a       	sbi	0x18, 2	; 24
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	9a 95       	dec	r25
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x44>
    lcd_e_delay();
    lcd_e_low();
     370:	c2 98       	cbi	0x18, 2	; 24
     372:	9a ea       	ldi	r25, 0xAA	; 170
     374:	9a 95       	dec	r25
     376:	f1 f7       	brne	.-4      	; 0x374 <lcd_init+0x4c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     378:	c3 98       	cbi	0x18, 3	; 24

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     37a:	c2 9a       	sbi	0x18, 2	; 24
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	9a 95       	dec	r25
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x56>
    lcd_e_delay();
    lcd_e_low();
     382:	c2 98       	cbi	0x18, 2	; 24
     384:	9a ea       	ldi	r25, 0xAA	; 170
     386:	9a 95       	dec	r25
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init+0x5e>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     38a:	6b df       	rcall	.-298    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	88 e2       	ldi	r24, 0x28	; 40
     390:	0e df       	rcall	.-484    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     392:	67 df       	rcall	.-306    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	0a df       	rcall	.-492    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     39a:	63 df       	rcall	.-314    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	06 df       	rcall	.-500    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     3a2:	5f df       	rcall	.-322    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	02 df       	rcall	.-508    	; 0x1ae <lcd_write>
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
     3aa:	5b df       	rcall	.-330    	; 0x262 <lcd_waitbusy>
    lcd_write(cmd,0);
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	8c 2f       	mov	r24, r28
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */

}/* lcd_init */
     3b0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     3b2:	fd ce       	rjmp	.-518    	; 0x1ae <lcd_write>

000003b4 <filter_adc>:

}

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     3b4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     3b6:	36 99       	sbic	0x06, 6	; 6
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <filter_adc+0x2>
	adc_value = ADCW; //Store ADC value
     3ba:	64 b1       	in	r22, 0x04	; 4
     3bc:	75 b1       	in	r23, 0x05	; 5
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
	adc_value = (tmp_value / no_of_samples);
	tmp_value = (sqrt(adc_value));
	return tmp_value;*/
	return adc_read();

}
     3c2:	08 95       	ret

000003c4 <adc_read>:

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     3c4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     3c6:	36 99       	sbic	0x06, 6	; 6
     3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <adc_read+0x2>
	adc_value = ADCW; //Store ADC value
     3ca:	64 b1       	in	r22, 0x04	; 4
     3cc:	75 b1       	in	r23, 0x05	; 5
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
	return adc_value;
}
     3d2:	08 95       	ret

000003d4 <LCDWriteStringXY>:

void LCDWriteStringXY(int x, int y, const char *s) {
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	96 2f       	mov	r25, r22
     3da:	ea 01       	movw	r28, r20
	lcd_gotoxy(y - 1, x - 1);
     3dc:	6f ef       	ldi	r22, 0xFF	; 255
     3de:	68 0f       	add	r22, r24
     3e0:	8f ef       	ldi	r24, 0xFF	; 255
     3e2:	89 0f       	add	r24, r25
     3e4:	53 df       	rcall	.-346    	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     3e6:	ce 01       	movw	r24, r28
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
     3ec:	7d cf       	rjmp	.-262    	; 0x2e8 <lcd_puts>

000003ee <__vector_3>:
}

//led setup interrupt 250us
ISR (TIMER2_COMP_vect)  // timer2 interrupt
{
     3ee:	1f 92       	push	r1
     3f0:	0f 92       	push	r0
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	0f 92       	push	r0
     3f6:	11 24       	eor	r1, r1
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
	TCNT0 += 6;
     40c:	82 b7       	in	r24, 0x32	; 50
     40e:	8a 5f       	subi	r24, 0xFA	; 250
     410:	82 bf       	out	0x32, r24	; 50
	//toggle led1
	if (led1Up) {
     412:	80 91 6a 00 	lds	r24, 0x006A
     416:	90 91 6b 00 	lds	r25, 0x006B
     41a:	89 2b       	or	r24, r25
     41c:	09 f0       	breq	.+2      	; 0x420 <__vector_3+0x32>
     41e:	5f c0       	rjmp	.+190    	; 0x4de <__stack+0x7f>
			led1Up = 0;
		} else {
			led1Count++;
		}
	} else if (!led1Up) {
		if (led1Count == led1Counterdn[preset]) {
     420:	80 91 0c 01 	lds	r24, 0x010C
     424:	90 91 0d 01 	lds	r25, 0x010D
     428:	20 91 12 01 	lds	r18, 0x0112
     42c:	30 91 13 01 	lds	r19, 0x0113
     430:	ac 01       	movw	r20, r24
     432:	44 0f       	add	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	fa 01       	movw	r30, r20
     438:	ea 56       	subi	r30, 0x6A	; 106
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	60 81       	ld	r22, Z
     43e:	71 81       	ldd	r23, Z+1	; 0x01
     440:	62 17       	cp	r22, r18
     442:	73 07       	cpc	r23, r19
     444:	09 f4       	brne	.+2      	; 0x448 <__vector_3+0x5a>
     446:	e0 c0       	rjmp	.+448    	; 0x608 <__stack+0x1a9>
			if (led1Counterup[preset] != 0)
				sbi(PORTD, PD2);
			led1Count = 0;
			led1Up = 1;
		} else {
			led1Count++;
     448:	2f 5f       	subi	r18, 0xFF	; 255
     44a:	3f 4f       	sbci	r19, 0xFF	; 255
     44c:	30 93 13 01 	sts	0x0113, r19
     450:	20 93 12 01 	sts	0x0112, r18
		}
	}

	//toggle led2
	if (led2Up) {
     454:	20 91 68 00 	lds	r18, 0x0068
     458:	30 91 69 00 	lds	r19, 0x0069
     45c:	23 2b       	or	r18, r19
     45e:	09 f4       	brne	.+2      	; 0x462 <__stack+0x3>
     460:	69 c0       	rjmp	.+210    	; 0x534 <__stack+0xd5>
		if (led2Count == led2Counterup[preset]) {
     462:	20 91 0e 01 	lds	r18, 0x010E
     466:	30 91 0f 01 	lds	r19, 0x010F
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	fc 01       	movw	r30, r24
     470:	e2 54       	subi	r30, 0x42	; 66
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	40 81       	ld	r20, Z
     476:	51 81       	ldd	r21, Z+1	; 0x01
     478:	42 17       	cp	r20, r18
     47a:	53 07       	cpc	r21, r19
     47c:	09 f4       	brne	.+2      	; 0x480 <__stack+0x21>
     47e:	ad c0       	rjmp	.+346    	; 0x5da <__stack+0x17b>
			if (led2Counterup[preset] != 0)
				sbi(PORTD, PD3);
			led2Count = 0;
			led2Up = 1;
		} else {
			led2Count++;
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
     484:	30 93 0f 01 	sts	0x010F, r19
     488:	20 93 0e 01 	sts	0x010E, r18
		}
	}

	//toggle led3
	if (led3Up) {
     48c:	20 91 6c 00 	lds	r18, 0x006C
     490:	30 91 6d 00 	lds	r19, 0x006D
     494:	23 2b       	or	r18, r19
     496:	09 f0       	breq	.+2      	; 0x49a <__stack+0x3b>
     498:	75 c0       	rjmp	.+234    	; 0x584 <__stack+0x125>
			led3Up = 0;
		} else {
			led3Count++;
		}
	} else if (!led3Up) {
		if (led3Count == led3Counterdn[preset]) {
     49a:	20 91 10 01 	lds	r18, 0x0110
     49e:	30 91 11 01 	lds	r19, 0x0111
     4a2:	fc 01       	movw	r30, r24
     4a4:	e2 59       	subi	r30, 0x92	; 146
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	40 81       	ld	r20, Z
     4aa:	51 81       	ldd	r21, Z+1	; 0x01
     4ac:	42 17       	cp	r20, r18
     4ae:	53 07       	cpc	r21, r19
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <__stack+0x55>
     4b2:	c1 c0       	rjmp	.+386    	; 0x636 <__stack+0x1d7>
			if (led3Counterup[preset] != 0)
				sbi(PORTD, PD4);
			led3Count = 0;
			led3Up = 1;
		} else {
			led3Count++;
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	30 93 11 01 	sts	0x0111, r19
     4bc:	20 93 10 01 	sts	0x0110, r18
		}
	}
}
     4c0:	ff 91       	pop	r31
     4c2:	ef 91       	pop	r30
     4c4:	9f 91       	pop	r25
     4c6:	8f 91       	pop	r24
     4c8:	7f 91       	pop	r23
     4ca:	6f 91       	pop	r22
     4cc:	5f 91       	pop	r21
     4ce:	4f 91       	pop	r20
     4d0:	3f 91       	pop	r19
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti
ISR (TIMER2_COMP_vect)  // timer2 interrupt
{
	TCNT0 += 6;
	//toggle led1
	if (led1Up) {
		if (led1Count != led1Counterup[preset]) {
     4de:	80 91 0c 01 	lds	r24, 0x010C
     4e2:	90 91 0d 01 	lds	r25, 0x010D
     4e6:	9c 01       	movw	r18, r24
     4e8:	22 0f       	add	r18, r18
     4ea:	33 1f       	adc	r19, r19
     4ec:	f9 01       	movw	r30, r18
     4ee:	ee 52       	subi	r30, 0x2E	; 46
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	40 81       	ld	r20, Z
     4f4:	51 81       	ldd	r21, Z+1	; 0x01
     4f6:	60 91 12 01 	lds	r22, 0x0112
     4fa:	70 91 13 01 	lds	r23, 0x0113
     4fe:	46 17       	cp	r20, r22
     500:	57 07       	cpc	r21, r23
     502:	09 f4       	brne	.+2      	; 0x506 <__stack+0xa7>
     504:	63 c0       	rjmp	.+198    	; 0x5cc <__stack+0x16d>
			if (led1Counterdn[preset] != 0)
     506:	f9 01       	movw	r30, r18
     508:	ea 56       	subi	r30, 0x6A	; 106
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	20 81       	ld	r18, Z
     50e:	31 81       	ldd	r19, Z+1	; 0x01
     510:	23 2b       	or	r18, r19
     512:	09 f0       	breq	.+2      	; 0x516 <__stack+0xb7>
     514:	55 c0       	rjmp	.+170    	; 0x5c0 <__stack+0x161>
				cbi(PORTD, PD2);
			led1Count = 0;
     516:	10 92 13 01 	sts	0x0113, r1
     51a:	10 92 12 01 	sts	0x0112, r1
			led1Up = 0;
     51e:	10 92 6b 00 	sts	0x006B, r1
     522:	10 92 6a 00 	sts	0x006A, r1
			led1Count++;
		}
	}

	//toggle led2
	if (led2Up) {
     526:	20 91 68 00 	lds	r18, 0x0068
     52a:	30 91 69 00 	lds	r19, 0x0069
     52e:	23 2b       	or	r18, r19
     530:	09 f0       	breq	.+2      	; 0x534 <__stack+0xd5>
     532:	97 cf       	rjmp	.-210    	; 0x462 <__stack+0x3>
			led2Up = 0;
		} else {
			led2Count++;
		}
	} else if (!led2Up) {
		if (led2Count == led2Counterdn[preset]) {
     534:	20 91 0e 01 	lds	r18, 0x010E
     538:	30 91 0f 01 	lds	r19, 0x010F
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	fc 01       	movw	r30, r24
     542:	ee 57       	subi	r30, 0x7E	; 126
     544:	ff 4f       	sbci	r31, 0xFF	; 255
     546:	40 81       	ld	r20, Z
     548:	51 81       	ldd	r21, Z+1	; 0x01
     54a:	42 17       	cp	r20, r18
     54c:	53 07       	cpc	r21, r19
     54e:	09 f0       	breq	.+2      	; 0x552 <__stack+0xf3>
     550:	97 cf       	rjmp	.-210    	; 0x480 <__stack+0x21>
			if (led2Counterup[preset] != 0)
     552:	fc 01       	movw	r30, r24
     554:	e2 54       	subi	r30, 0x42	; 66
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	20 81       	ld	r18, Z
     55a:	31 81       	ldd	r19, Z+1	; 0x01
     55c:	23 2b       	or	r18, r19
     55e:	39 f0       	breq	.+14     	; 0x56e <__stack+0x10f>
				sbi(PORTD, PD3);
     560:	93 9a       	sbi	0x12, 3	; 18
     562:	80 91 0c 01 	lds	r24, 0x010C
     566:	90 91 0d 01 	lds	r25, 0x010D
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
			led2Count = 0;
     56e:	10 92 0f 01 	sts	0x010F, r1
     572:	10 92 0e 01 	sts	0x010E, r1
			led2Up = 1;
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	30 93 69 00 	sts	0x0069, r19
     57e:	20 93 68 00 	sts	0x0068, r18
     582:	84 cf       	rjmp	.-248    	; 0x48c <__stack+0x2d>
		}
	}

	//toggle led3
	if (led3Up) {
		if (led3Count == led3Counterup[preset]) {
     584:	20 91 10 01 	lds	r18, 0x0110
     588:	30 91 11 01 	lds	r19, 0x0111
     58c:	fc 01       	movw	r30, r24
     58e:	e6 55       	subi	r30, 0x56	; 86
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	40 81       	ld	r20, Z
     594:	51 81       	ldd	r21, Z+1	; 0x01
     596:	42 17       	cp	r20, r18
     598:	53 07       	cpc	r21, r19
     59a:	09 f0       	breq	.+2      	; 0x59e <__stack+0x13f>
     59c:	8b cf       	rjmp	.-234    	; 0x4b4 <__stack+0x55>
			if (led3Counterdn[preset] != 0)
     59e:	fc 01       	movw	r30, r24
     5a0:	e2 59       	subi	r30, 0x92	; 146
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	89 2b       	or	r24, r25
     5aa:	09 f0       	breq	.+2      	; 0x5ae <__stack+0x14f>
				cbi(PORTD, PD4);
     5ac:	94 98       	cbi	0x12, 4	; 18
			led3Count = 0;
     5ae:	10 92 11 01 	sts	0x0111, r1
     5b2:	10 92 10 01 	sts	0x0110, r1
			led3Up = 0;
     5b6:	10 92 6d 00 	sts	0x006D, r1
     5ba:	10 92 6c 00 	sts	0x006C, r1
     5be:	80 cf       	rjmp	.-256    	; 0x4c0 <__stack+0x61>
	TCNT0 += 6;
	//toggle led1
	if (led1Up) {
		if (led1Count != led1Counterup[preset]) {
			if (led1Counterdn[preset] != 0)
				cbi(PORTD, PD2);
     5c0:	92 98       	cbi	0x12, 2	; 18
     5c2:	80 91 0c 01 	lds	r24, 0x010C
     5c6:	90 91 0d 01 	lds	r25, 0x010D
     5ca:	a5 cf       	rjmp	.-182    	; 0x516 <__stack+0xb7>
			led1Count = 0;
			led1Up = 0;
		} else {
			led1Count++;
     5cc:	4f 5f       	subi	r20, 0xFF	; 255
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	50 93 13 01 	sts	0x0113, r21
     5d4:	40 93 12 01 	sts	0x0112, r20
     5d8:	a6 cf       	rjmp	.-180    	; 0x526 <__stack+0xc7>
	}

	//toggle led2
	if (led2Up) {
		if (led2Count == led2Counterup[preset]) {
			if (led2Counterdn[preset] != 0)
     5da:	fc 01       	movw	r30, r24
     5dc:	ee 57       	subi	r30, 0x7E	; 126
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	20 81       	ld	r18, Z
     5e2:	31 81       	ldd	r19, Z+1	; 0x01
     5e4:	23 2b       	or	r18, r19
     5e6:	39 f0       	breq	.+14     	; 0x5f6 <__stack+0x197>
				cbi(PORTD, PD3);
     5e8:	93 98       	cbi	0x12, 3	; 18
     5ea:	80 91 0c 01 	lds	r24, 0x010C
     5ee:	90 91 0d 01 	lds	r25, 0x010D
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
			led2Count = 0;
     5f6:	10 92 0f 01 	sts	0x010F, r1
     5fa:	10 92 0e 01 	sts	0x010E, r1
			led2Up = 0;
     5fe:	10 92 69 00 	sts	0x0069, r1
     602:	10 92 68 00 	sts	0x0068, r1
     606:	42 cf       	rjmp	.-380    	; 0x48c <__stack+0x2d>
		} else {
			led1Count++;
		}
	} else if (!led1Up) {
		if (led1Count == led1Counterdn[preset]) {
			if (led1Counterup[preset] != 0)
     608:	fa 01       	movw	r30, r20
     60a:	ee 52       	subi	r30, 0x2E	; 46
     60c:	ff 4f       	sbci	r31, 0xFF	; 255
     60e:	20 81       	ld	r18, Z
     610:	31 81       	ldd	r19, Z+1	; 0x01
     612:	23 2b       	or	r18, r19
     614:	29 f0       	breq	.+10     	; 0x620 <__stack+0x1c1>
				sbi(PORTD, PD2);
     616:	92 9a       	sbi	0x12, 2	; 18
     618:	80 91 0c 01 	lds	r24, 0x010C
     61c:	90 91 0d 01 	lds	r25, 0x010D
			led1Count = 0;
     620:	10 92 13 01 	sts	0x0113, r1
     624:	10 92 12 01 	sts	0x0112, r1
			led1Up = 1;
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	30 93 6b 00 	sts	0x006B, r19
     630:	20 93 6a 00 	sts	0x006A, r18
     634:	78 cf       	rjmp	.-272    	; 0x526 <__stack+0xc7>
		} else {
			led3Count++;
		}
	} else if (!led3Up) {
		if (led3Count == led3Counterdn[preset]) {
			if (led3Counterup[preset] != 0)
     636:	fc 01       	movw	r30, r24
     638:	e6 55       	subi	r30, 0x56	; 86
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	89 2b       	or	r24, r25
     642:	09 f0       	breq	.+2      	; 0x646 <__stack+0x1e7>
				sbi(PORTD, PD4);
     644:	94 9a       	sbi	0x12, 4	; 18
			led3Count = 0;
     646:	10 92 11 01 	sts	0x0111, r1
     64a:	10 92 10 01 	sts	0x0110, r1
			led3Up = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	90 93 6d 00 	sts	0x006D, r25
     656:	80 93 6c 00 	sts	0x006C, r24
     65a:	32 cf       	rjmp	.-412    	; 0x4c0 <__stack+0x61>

0000065c <__vector_6>:
			led3Count++;
		}
	}
}

ISR (TIMER1_COMPA_vect) {
     65c:	1f 92       	push	r1
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	0f 92       	push	r0
     664:	11 24       	eor	r1, r1
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27

	seconds++;
     66e:	80 91 fa 00 	lds	r24, 0x00FA
     672:	90 91 fb 00 	lds	r25, 0x00FB
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	90 93 fb 00 	sts	0x00FB, r25
     67c:	80 93 fa 00 	sts	0x00FA, r24
	if(seconds == 60){
     680:	cc 97       	sbiw	r24, 0x3c	; 60
     682:	31 f1       	breq	.+76     	; 0x6d0 <__vector_6+0x74>
     684:	80 91 f8 00 	lds	r24, 0x00F8
     688:	90 91 f9 00 	lds	r25, 0x00F9
		minutes++;
		seconds=0;
	}
	if(minutes == 60){
     68c:	cc 97       	sbiw	r24, 0x3c	; 60
     68e:	79 f1       	breq	.+94     	; 0x6ee <__vector_6+0x92>
		hours++;
		minutes=0;
	}

	avg = 0;
     690:	10 92 06 01 	sts	0x0106, r1
     694:	10 92 07 01 	sts	0x0107, r1
     698:	10 92 08 01 	sts	0x0108, r1
     69c:	10 92 09 01 	sts	0x0109, r1

}

unsigned long adc_read() {
	unsigned long adc_value = 0;
	ADCSRA |= (1 << ADSC); // Start conversion
     6a0:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC)); // wait for conversion to complete
     6a2:	36 99       	sbic	0x06, 6	; 6
     6a4:	fe cf       	rjmp	.-4      	; 0x6a2 <__vector_6+0x46>
	adc_value = ADCW; //Store ADC value
     6a6:	84 b1       	in	r24, 0x04	; 4
     6a8:	95 b1       	in	r25, 0x05	; 5
     6aa:	a0 e0       	ldi	r26, 0x00	; 0
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	80 93 06 01 	sts	0x0106, r24
     6b2:	90 93 07 01 	sts	0x0107, r25
     6b6:	a0 93 08 01 	sts	0x0108, r26
     6ba:	b0 93 09 01 	sts	0x0109, r27
	}

	avg = 0;
	avg = filter_adc();

}
     6be:	bf 91       	pop	r27
     6c0:	af 91       	pop	r26
     6c2:	9f 91       	pop	r25
     6c4:	8f 91       	pop	r24
     6c6:	0f 90       	pop	r0
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	0f 90       	pop	r0
     6cc:	1f 90       	pop	r1
     6ce:	18 95       	reti

ISR (TIMER1_COMPA_vect) {

	seconds++;
	if(seconds == 60){
		minutes++;
     6d0:	80 91 f8 00 	lds	r24, 0x00F8
     6d4:	90 91 f9 00 	lds	r25, 0x00F9
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	90 93 f9 00 	sts	0x00F9, r25
     6de:	80 93 f8 00 	sts	0x00F8, r24
		seconds=0;
     6e2:	10 92 fb 00 	sts	0x00FB, r1
     6e6:	10 92 fa 00 	sts	0x00FA, r1
	}
	if(minutes == 60){
     6ea:	cc 97       	sbiw	r24, 0x3c	; 60
     6ec:	89 f6       	brne	.-94     	; 0x690 <__vector_6+0x34>
		hours++;
     6ee:	80 91 f6 00 	lds	r24, 0x00F6
     6f2:	90 91 f7 00 	lds	r25, 0x00F7
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	90 93 f7 00 	sts	0x00F7, r25
     6fc:	80 93 f6 00 	sts	0x00F6, r24
		minutes=0;
     700:	10 92 f9 00 	sts	0x00F9, r1
     704:	10 92 f8 00 	sts	0x00F8, r1
     708:	c3 cf       	rjmp	.-122    	; 0x690 <__vector_6+0x34>

0000070a <resetcounters>:
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     70a:	10 92 13 01 	sts	0x0113, r1
     70e:	10 92 12 01 	sts	0x0112, r1
	led2Count = 0;
     712:	10 92 0f 01 	sts	0x010F, r1
     716:	10 92 0e 01 	sts	0x010E, r1
	led3Count = 0;
     71a:	10 92 11 01 	sts	0x0111, r1
     71e:	10 92 10 01 	sts	0x0110, r1
	led1Up = 0;
     722:	10 92 6b 00 	sts	0x006B, r1
     726:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     72a:	10 92 69 00 	sts	0x0069, r1
     72e:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     732:	10 92 6d 00 	sts	0x006D, r1
     736:	10 92 6c 00 	sts	0x006C, r1
     73a:	08 95       	ret

0000073c <setLastPresetChange>:
}

void setLastPresetChange(){
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
	snprintf(disp_lastchangesec, 3, "%d", seconds);
     742:	80 91 fb 00 	lds	r24, 0x00FB
     746:	8f 93       	push	r24
     748:	80 91 fa 00 	lds	r24, 0x00FA
     74c:	8f 93       	push	r24
     74e:	c6 ee       	ldi	r28, 0xE6	; 230
     750:	d0 e0       	ldi	r29, 0x00	; 0
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	1f 92       	push	r1
     758:	13 e0       	ldi	r17, 0x03	; 3
     75a:	1f 93       	push	r17
     75c:	80 91 a4 01 	lds	r24, 0x01A4
     760:	8f 93       	push	r24
     762:	80 91 a3 01 	lds	r24, 0x01A3
     766:	8f 93       	push	r24
     768:	71 d8       	rcall	.-3870   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
	snprintf(disp_lastchangemin, 3, "%d", minutes);
     76a:	80 91 f9 00 	lds	r24, 0x00F9
     76e:	8f 93       	push	r24
     770:	80 91 f8 00 	lds	r24, 0x00F8
     774:	8f 93       	push	r24
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	1f 92       	push	r1
     77c:	1f 93       	push	r17
     77e:	80 91 ae 01 	lds	r24, 0x01AE
     782:	8f 93       	push	r24
     784:	80 91 ad 01 	lds	r24, 0x01AD
     788:	8f 93       	push	r24
     78a:	60 d8       	rcall	.-3904   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
	snprintf(disp_lastchangehour, 3, "%d", hours);
     78c:	80 91 f7 00 	lds	r24, 0x00F7
     790:	8f 93       	push	r24
     792:	80 91 f6 00 	lds	r24, 0x00F6
     796:	8f 93       	push	r24
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	1f 92       	push	r1
     79e:	1f 93       	push	r17
     7a0:	80 91 9d 01 	lds	r24, 0x019D
     7a4:	8f 93       	push	r24
     7a6:	80 91 9c 01 	lds	r24, 0x019C
     7aa:	8f 93       	push	r24
     7ac:	4f d8       	rcall	.-3938   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
     7ae:	8d b7       	in	r24, 0x3d	; 61
     7b0:	9e b7       	in	r25, 0x3e	; 62
     7b2:	48 96       	adiw	r24, 0x18	; 24
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	9e bf       	out	0x3e, r25	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	8d bf       	out	0x3d, r24	; 61
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	08 95       	ret

000007c6 <updateLCD>:

void updateLCD(){
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
	snprintf(disp_avg, 4, "%lu", avg);
     7d0:	80 91 09 01 	lds	r24, 0x0109
     7d4:	8f 93       	push	r24
     7d6:	80 91 08 01 	lds	r24, 0x0108
     7da:	8f 93       	push	r24
     7dc:	80 91 07 01 	lds	r24, 0x0107
     7e0:	8f 93       	push	r24
     7e2:	80 91 06 01 	lds	r24, 0x0106
     7e6:	8f 93       	push	r24
     7e8:	89 ee       	ldi	r24, 0xE9	; 233
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	1f 92       	push	r1
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	8f 93       	push	r24
     7f6:	80 91 a8 01 	lds	r24, 0x01A8
     7fa:	8f 93       	push	r24
     7fc:	80 91 a7 01 	lds	r24, 0x01A7
     800:	8f 93       	push	r24
     802:	24 d8       	rcall	.-4024   	; 0xfffff84c <__eeprom_end+0xff7ef84c>

	snprintf(disp_seconds, 3, "%d", seconds);
     804:	80 91 fb 00 	lds	r24, 0x00FB
     808:	8f 93       	push	r24
     80a:	80 91 fa 00 	lds	r24, 0x00FA
     80e:	8f 93       	push	r24
     810:	c6 ee       	ldi	r28, 0xE6	; 230
     812:	d0 e0       	ldi	r29, 0x00	; 0
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	1f 92       	push	r1
     81a:	13 e0       	ldi	r17, 0x03	; 3
     81c:	1f 93       	push	r17
     81e:	80 91 a6 01 	lds	r24, 0x01A6
     822:	8f 93       	push	r24
     824:	80 91 a5 01 	lds	r24, 0x01A5
     828:	8f 93       	push	r24
     82a:	10 d8       	rcall	.-4064   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
	snprintf(disp_minutes, 3, "%d", minutes);
     82c:	80 91 f9 00 	lds	r24, 0x00F9
     830:	8f 93       	push	r24
     832:	80 91 f8 00 	lds	r24, 0x00F8
     836:	8f 93       	push	r24
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	1f 92       	push	r1
     83e:	1f 93       	push	r17
     840:	80 91 ac 01 	lds	r24, 0x01AC
     844:	8f 93       	push	r24
     846:	80 91 ab 01 	lds	r24, 0x01AB
     84a:	8f 93       	push	r24
     84c:	ff d7       	rcall	.+4094   	; 0x184c <snprintf>
	snprintf(disp_hours, 3, "%d", hours);
     84e:	80 91 f7 00 	lds	r24, 0x00F7
     852:	8f 93       	push	r24
     854:	80 91 f6 00 	lds	r24, 0x00F6
     858:	8f 93       	push	r24
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	1f 92       	push	r1
     860:	1f 93       	push	r17
     862:	80 91 a1 01 	lds	r24, 0x01A1
     866:	8f 93       	push	r24
     868:	80 91 a0 01 	lds	r24, 0x01A0
     86c:	8f 93       	push	r24
     86e:	ee d7       	rcall	.+4060   	; 0x184c <snprintf>
	lcd_clrscr();
     870:	8d b7       	in	r24, 0x3d	; 61
     872:	9e b7       	in	r25, 0x3e	; 62
     874:	82 96       	adiw	r24, 0x22	; 34
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	9e bf       	out	0x3e, r25	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	8d bf       	out	0x3d, r24	; 61
     880:	18 dd       	rcall	.-1488   	; 0x2b2 <lcd_clrscr>
	LCDWriteStringXY(1, 1, disp_hours);
     882:	00 91 a0 01 	lds	r16, 0x01A0
     886:	10 91 a1 01 	lds	r17, 0x01A1
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	fe dc       	rcall	.-1540   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     890:	c8 01       	movw	r24, r16
     892:	2a dd       	rcall	.-1452   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	f9 dc       	rcall	.-1550   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     89a:	8d ee       	ldi	r24, 0xED	; 237
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	24 dd       	rcall	.-1464   	; 0x2e8 <lcd_puts>
	snprintf(disp_minutes, 3, "%d", minutes);
	snprintf(disp_hours, 3, "%d", hours);
	lcd_clrscr();
	LCDWriteStringXY(1, 1, disp_hours);
	LCDWriteStringXY(1, 3, ":");
	LCDWriteStringXY(1, 4, disp_minutes);
     8a0:	00 91 ab 01 	lds	r16, 0x01AB
     8a4:	10 91 ac 01 	lds	r17, 0x01AC
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	ef dc       	rcall	.-1570   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     8ae:	c8 01       	movw	r24, r16
     8b0:	1b dd       	rcall	.-1482   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	85 e0       	ldi	r24, 0x05	; 5
     8b6:	ea dc       	rcall	.-1580   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     8b8:	8d ee       	ldi	r24, 0xED	; 237
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	15 dd       	rcall	.-1494   	; 0x2e8 <lcd_puts>
	lcd_clrscr();
	LCDWriteStringXY(1, 1, disp_hours);
	LCDWriteStringXY(1, 3, ":");
	LCDWriteStringXY(1, 4, disp_minutes);
	LCDWriteStringXY(1, 6, ":");
	LCDWriteStringXY(1, 7, disp_seconds);
     8be:	00 91 a5 01 	lds	r16, 0x01A5
     8c2:	10 91 a6 01 	lds	r17, 0x01A6
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	e0 dc       	rcall	.-1600   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     8cc:	c8 01       	movw	r24, r16
     8ce:	0c dd       	rcall	.-1512   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(1, 3, ":");
	LCDWriteStringXY(1, 4, disp_minutes);
	LCDWriteStringXY(1, 6, ":");
	LCDWriteStringXY(1, 7, disp_seconds);

	snprintf(disp_preset, 2, "%d", preset);
     8d0:	80 91 0d 01 	lds	r24, 0x010D
     8d4:	8f 93       	push	r24
     8d6:	80 91 0c 01 	lds	r24, 0x010C
     8da:	8f 93       	push	r24
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	1f 92       	push	r1
     8e2:	f2 e0       	ldi	r31, 0x02	; 2
     8e4:	ff 2e       	mov	r15, r31
     8e6:	ff 92       	push	r15
     8e8:	80 91 aa 01 	lds	r24, 0x01AA
     8ec:	8f 93       	push	r24
     8ee:	80 91 a9 01 	lds	r24, 0x01A9
     8f2:	8f 93       	push	r24
     8f4:	ab d7       	rcall	.+3926   	; 0x184c <snprintf>
	LCDWriteStringXY(1, 10, disp_preset);
     8f6:	00 91 a9 01 	lds	r16, 0x01A9
     8fa:	10 91 aa 01 	lds	r17, 0x01AA
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	c4 dc       	rcall	.-1656   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     904:	c8 01       	movw	r24, r16
     906:	f0 dc       	rcall	.-1568   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	8a e0       	ldi	r24, 0x0A	; 10
     90c:	bf dc       	rcall	.-1666   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     90e:	8f ee       	ldi	r24, 0xEF	; 239
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	ea dc       	rcall	.-1580   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(1, 7, disp_seconds);

	snprintf(disp_preset, 2, "%d", preset);
	LCDWriteStringXY(1, 10, disp_preset);
	LCDWriteStringXY(1, 11, "/");
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
     914:	80 91 9b 01 	lds	r24, 0x019B
     918:	8f 93       	push	r24
     91a:	80 91 9a 01 	lds	r24, 0x019A
     91e:	8f 93       	push	r24
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	1f 92       	push	r1
     926:	ff 92       	push	r15
     928:	80 91 a2 01 	lds	r24, 0x01A2
     92c:	1f 92       	push	r1
     92e:	8f 93       	push	r24
     930:	8d d7       	rcall	.+3866   	; 0x184c <snprintf>
	LCDWriteStringXY(1, 12, disp_maxpreset);
     932:	c0 91 a2 01 	lds	r28, 0x01A2
     936:	d0 e0       	ldi	r29, 0x00	; 0
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	8b e0       	ldi	r24, 0x0B	; 11
     93c:	a7 dc       	rcall	.-1714   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     93e:	ce 01       	movw	r24, r28
     940:	d3 dc       	rcall	.-1626   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(1, 10, disp_preset);
	LCDWriteStringXY(1, 11, "/");
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
	LCDWriteStringXY(1, 12, disp_maxpreset);

	LCDWriteStringXY(1, 14, progcode);
     942:	c0 91 af 01 	lds	r28, 0x01AF
     946:	d0 e0       	ldi	r29, 0x00	; 0
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	8d e0       	ldi	r24, 0x0D	; 13
     94c:	9f dc       	rcall	.-1730   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     94e:	ce 01       	movw	r24, r28
     950:	cb dc       	rcall	.-1642   	; 0x2e8 <lcd_puts>
	snprintf(disp_maxpreset, 2, "%d", maxpreset);
	LCDWriteStringXY(1, 12, disp_maxpreset);

	LCDWriteStringXY(1, 14, progcode);

	LCDWriteStringXY(2, 6, disp_lastchangehour);
     952:	c0 91 9c 01 	lds	r28, 0x019C
     956:	d0 91 9d 01 	lds	r29, 0x019D
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	85 e0       	ldi	r24, 0x05	; 5
     95e:	96 dc       	rcall	.-1748   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     960:	ce 01       	movw	r24, r28
     962:	c2 dc       	rcall	.-1660   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	87 e0       	ldi	r24, 0x07	; 7
     968:	91 dc       	rcall	.-1758   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     96a:	8d ee       	ldi	r24, 0xED	; 237
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	bc dc       	rcall	.-1672   	; 0x2e8 <lcd_puts>

	LCDWriteStringXY(1, 14, progcode);

	LCDWriteStringXY(2, 6, disp_lastchangehour);
	LCDWriteStringXY(2, 8, ":");
	LCDWriteStringXY(2, 9, disp_lastchangemin);
     970:	c0 91 ad 01 	lds	r28, 0x01AD
     974:	d0 91 ae 01 	lds	r29, 0x01AE
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	87 dc       	rcall	.-1778   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     97e:	ce 01       	movw	r24, r28
     980:	b3 dc       	rcall	.-1690   	; 0x2e8 <lcd_puts>
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	8a e0       	ldi	r24, 0x0A	; 10
     986:	82 dc       	rcall	.-1788   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     988:	8d ee       	ldi	r24, 0xED	; 237
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	ad dc       	rcall	.-1702   	; 0x2e8 <lcd_puts>

	LCDWriteStringXY(2, 6, disp_lastchangehour);
	LCDWriteStringXY(2, 8, ":");
	LCDWriteStringXY(2, 9, disp_lastchangemin);
	LCDWriteStringXY(2, 11, ":");
	LCDWriteStringXY(2, 12, disp_lastchangesec);
     98e:	c0 91 a3 01 	lds	r28, 0x01A3
     992:	d0 91 a4 01 	lds	r29, 0x01A4
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	8b e0       	ldi	r24, 0x0B	; 11
     99a:	78 dc       	rcall	.-1808   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     99c:	ce 01       	movw	r24, r28
     99e:	a4 dc       	rcall	.-1720   	; 0x2e8 <lcd_puts>
	LCDWriteStringXY(2, 8, ":");
	LCDWriteStringXY(2, 9, disp_lastchangemin);
	LCDWriteStringXY(2, 11, ":");
	LCDWriteStringXY(2, 12, disp_lastchangesec);

	LCDWriteStringXY(2, 1, disp_avg);
     9a0:	c0 91 a7 01 	lds	r28, 0x01A7
     9a4:	d0 91 a8 01 	lds	r29, 0x01A8
	adc_value = ADCW; //Store ADC value
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	6f dc       	rcall	.-1826   	; 0x28c <lcd_gotoxy>
	lcd_puts(s);
     9ae:	8d b7       	in	r24, 0x3d	; 61
     9b0:	9e b7       	in	r25, 0x3e	; 62
     9b2:	40 96       	adiw	r24, 0x10	; 16
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	9e bf       	out	0x3e, r25	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	8d bf       	out	0x3d, r24	; 61
     9be:	ce 01       	movw	r24, r28
	LCDWriteStringXY(2, 9, disp_lastchangemin);
	LCDWriteStringXY(2, 11, ":");
	LCDWriteStringXY(2, 12, disp_lastchangesec);

	LCDWriteStringXY(2, 1, disp_avg);
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
	return adc_value;
}

void LCDWriteStringXY(int x, int y, const char *s) {
	lcd_gotoxy(y - 1, x - 1);
	lcd_puts(s);
     9ca:	8e cc       	rjmp	.-1764   	; 0x2e8 <lcd_puts>

000009cc <main>:
char *disp_lastchangehour;

int doLCD = 0;

int main() {
	maxpreset = 9;
     9cc:	89 e0       	ldi	r24, 0x09	; 9
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	90 93 9b 01 	sts	0x019B, r25
     9d4:	80 93 9a 01 	sts	0x019A, r24
	progcode="Z";
     9d8:	81 ef       	ldi	r24, 0xF1	; 241
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	80 93 af 01 	sts	0x01AF, r24
	disp_avg = malloc(6 * sizeof(char));
     9e0:	86 e0       	ldi	r24, 0x06	; 6
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0c d6       	rcall	.+3096   	; 0x15fe <malloc>
     9e6:	90 93 a8 01 	sts	0x01A8, r25
     9ea:	80 93 a7 01 	sts	0x01A7, r24
	disp_preset = malloc(2 * sizeof(char));
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	05 d6       	rcall	.+3082   	; 0x15fe <malloc>
     9f4:	90 93 aa 01 	sts	0x01AA, r25
     9f8:	80 93 a9 01 	sts	0x01A9, r24
	disp_maxpreset = malloc(2 * sizeof(char));
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fe d5       	rcall	.+3068   	; 0x15fe <malloc>
     a02:	80 93 a2 01 	sts	0x01A2, r24

	disp_lastchangesec = malloc(3 * sizeof(char));
	disp_lastchangemin = malloc(3 * sizeof(char));
	disp_lastchangehour = malloc(3 * sizeof(char));
	disp_lastchangesec = '00';
     a06:	80 e3       	ldi	r24, 0x30	; 48
     a08:	90 e3       	ldi	r25, 0x30	; 48
     a0a:	90 93 a4 01 	sts	0x01A4, r25
     a0e:	80 93 a3 01 	sts	0x01A3, r24
	disp_lastchangemin = '00';
     a12:	90 93 ae 01 	sts	0x01AE, r25
     a16:	80 93 ad 01 	sts	0x01AD, r24
	disp_lastchangehour = '00';
     a1a:	90 93 9d 01 	sts	0x019D, r25
     a1e:	80 93 9c 01 	sts	0x019C, r24

	disp_seconds = malloc(3 * sizeof(char));
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	eb d5       	rcall	.+3030   	; 0x15fe <malloc>
     a28:	90 93 a6 01 	sts	0x01A6, r25
     a2c:	80 93 a5 01 	sts	0x01A5, r24
	disp_minutes = malloc(3 * sizeof(char));
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	e4 d5       	rcall	.+3016   	; 0x15fe <malloc>
     a36:	90 93 ac 01 	sts	0x01AC, r25
     a3a:	80 93 ab 01 	sts	0x01AB, r24
	disp_hours = malloc(3 * sizeof(char));
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	dd d5       	rcall	.+3002   	; 0x15fe <malloc>
     a44:	90 93 a1 01 	sts	0x01A1, r25
     a48:	80 93 a0 01 	sts	0x01A0, r24

	message = malloc(6 * sizeof(char));
     a4c:	86 e0       	ldi	r24, 0x06	; 6
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	d6 d5       	rcall	.+2988   	; 0x15fe <malloc>
     a52:	90 93 9f 01 	sts	0x019F, r25
     a56:	80 93 9e 01 	sts	0x019E, r24
	avg = 0;
     a5a:	10 92 06 01 	sts	0x0106, r1
     a5e:	10 92 07 01 	sts	0x0107, r1
     a62:	10 92 08 01 	sts	0x0108, r1
     a66:	10 92 09 01 	sts	0x0109, r1
	lastAvg = 0;
     a6a:	10 92 02 01 	sts	0x0102, r1
     a6e:	10 92 03 01 	sts	0x0103, r1
     a72:	10 92 04 01 	sts	0x0104, r1
     a76:	10 92 05 01 	sts	0x0105, r1
	return 0;
}

static void setup() {

	DDRD = 0xff; //PORTD as OUTPUT
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00; //All pins of PORTD LOW
     a7e:	12 ba       	out	0x12, r1	; 18

	DDRC &= ~(1 << PC0);
     a80:	a0 98       	cbi	0x14, 0	; 20
	DDRC &= ~(1 << PC1);
     a82:	a1 98       	cbi	0x14, 1	; 20

	lcd_init(LCD_DISP_ON);
     a84:	8c e0       	ldi	r24, 0x0C	; 12
     a86:	50 dc       	rcall	.-1888   	; 0x328 <lcd_init>
	uartInit();
     a88:	5b d4       	rcall	.+2230   	; 0x1340 <uartInit>
	rprintfInit(uartSendByte);
     a8a:	8e ee       	ldi	r24, 0xEE	; 238
     a8c:	99 e0       	ldi	r25, 0x09	; 9
     a8e:	9b d1       	rcall	.+822    	; 0xdc6 <rprintfInit>

	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS0);
     a90:	85 e8       	ldi	r24, 0x85	; 133
     a92:	86 b9       	out	0x06, r24	; 6
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
	ADMUX = 0x05; // ADC input channel set to PC5
     a94:	85 e0       	ldi	r24, 0x05	; 5
     a96:	87 b9       	out	0x07, r24	; 7

	//LED timer interrupts
	OCR2 = 32;
     a98:	80 e2       	ldi	r24, 0x20	; 32
     a9a:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1 << WGM21); // Set to CTC Mode
     a9c:	85 b5       	in	r24, 0x25	; 37
     a9e:	88 60       	ori	r24, 0x08	; 8
     aa0:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2); //Set interrupt on compare match
     aa2:	89 b7       	in	r24, 0x39	; 57
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	89 bf       	out	0x39, r24	; 57
	TCCR2 |= (1 << CS21); // set prescaler to 64 and starts PWM
     aa8:	85 b5       	in	r24, 0x25	; 37
     aaa:	82 60       	ori	r24, 0x02	; 2
     aac:	85 bd       	out	0x25, r24	; 37


	//LCD timer interrupt
	OCR1A = 7930;
     aae:	8a ef       	ldi	r24, 0xFA	; 250
     ab0:	9e e1       	ldi	r25, 0x1E	; 30
     ab2:	9b bd       	out	0x2b, r25	; 43
     ab4:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << WGM12);
     ab6:	8e b5       	in	r24, 0x2e	; 46
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	8e bd       	out	0x2e, r24	; 46
	// Mode 4, CTC on OCR1A
	TIMSK |= (1 << OCIE1A);
     abc:	89 b7       	in	r24, 0x39	; 57
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	89 bf       	out	0x39, r24	; 57
	//Set interrupt on compare match
	TCCR1B |= (1 << CS12) | (1 << CS10);
     ac2:	8e b5       	in	r24, 0x2e	; 46
     ac4:	85 60       	ori	r24, 0x05	; 5
     ac6:	8e bd       	out	0x2e, r24	; 46
	// set prescaler to 1024 and start the timer


	sei();
     ac8:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aca:	80 e2       	ldi	r24, 0x20	; 32
     acc:	9e e4       	ldi	r25, 0x4E	; 78
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <main+0x102>
	setup();

	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
			butUpPressed = 1;
     ad2:	cc 24       	eor	r12, r12
     ad4:	c3 94       	inc	r12
     ad6:	d1 2c       	mov	r13, r1
     ad8:	c0 e4       	ldi	r28, 0x40	; 64
     ada:	dc e9       	ldi	r29, 0x9C	; 156
     adc:	b0 c0       	rjmp	.+352    	; 0xc3e <main+0x272>
	lastAvg = 0;
	setup();

	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
     ade:	80 91 00 01 	lds	r24, 0x0100
     ae2:	90 91 01 01 	lds	r25, 0x0101
     ae6:	89 2b       	or	r24, r25
     ae8:	09 f0       	breq	.+2      	; 0xaec <main+0x120>
     aea:	ab c0       	rjmp	.+342    	; 0xc42 <main+0x276>
			butUpPressed = 1;
     aec:	d0 92 01 01 	sts	0x0101, r13
     af0:	c0 92 00 01 	sts	0x0100, r12
			if (preset < maxpreset) {
     af4:	80 91 0c 01 	lds	r24, 0x010C
     af8:	90 91 0d 01 	lds	r25, 0x010D
     afc:	20 91 9a 01 	lds	r18, 0x019A
     b00:	30 91 9b 01 	lds	r19, 0x019B
     b04:	82 17       	cp	r24, r18
     b06:	93 07       	cpc	r25, r19
     b08:	0c f4       	brge	.+2      	; 0xb0c <main+0x140>
     b0a:	3e c1       	rjmp	.+636    	; 0xd88 <main+0x3bc>

			}
		} else {
			butUpPressed = 0;
		}
		if ((PINC & (1 << PC1)) && butDnPressed == 0) {
     b0c:	99 9b       	sbis	0x13, 1	; 19
     b0e:	9f c0       	rjmp	.+318    	; 0xc4e <main+0x282>
     b10:	80 91 fe 00 	lds	r24, 0x00FE
     b14:	90 91 ff 00 	lds	r25, 0x00FF
     b18:	89 2b       	or	r24, r25
     b1a:	09 f0       	breq	.+2      	; 0xb1e <main+0x152>
     b1c:	98 c0       	rjmp	.+304    	; 0xc4e <main+0x282>
			butDnPressed = 1;
     b1e:	d0 92 ff 00 	sts	0x00FF, r13
     b22:	c0 92 fe 00 	sts	0x00FE, r12
			if (preset > 0) {
     b26:	80 91 0c 01 	lds	r24, 0x010C
     b2a:	90 91 0d 01 	lds	r25, 0x010D
     b2e:	18 16       	cp	r1, r24
     b30:	19 06       	cpc	r1, r25
     b32:	f4 f4       	brge	.+60     	; 0xb70 <main+0x1a4>
				preset--;
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	90 93 0d 01 	sts	0x010D, r25
     b3a:	80 93 0c 01 	sts	0x010C, r24
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     b3e:	10 92 13 01 	sts	0x0113, r1
     b42:	10 92 12 01 	sts	0x0112, r1
	led2Count = 0;
     b46:	10 92 0f 01 	sts	0x010F, r1
     b4a:	10 92 0e 01 	sts	0x010E, r1
	led3Count = 0;
     b4e:	10 92 11 01 	sts	0x0111, r1
     b52:	10 92 10 01 	sts	0x0110, r1
	led1Up = 0;
     b56:	10 92 6b 00 	sts	0x006B, r1
     b5a:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     b5e:	10 92 69 00 	sts	0x0069, r1
     b62:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     b66:	10 92 6d 00 	sts	0x006D, r1
     b6a:	10 92 6c 00 	sts	0x006C, r1
		if ((PINC & (1 << PC1)) && butDnPressed == 0) {
			butDnPressed = 1;
			if (preset > 0) {
				preset--;
				resetcounters();
				setLastPresetChange();
     b6e:	e6 dd       	rcall	.-1076   	; 0x73c <setLastPresetChange>
		} else {
			butDnPressed = 0;
		}

		//check changes to send to pc
		if (avg != lastAvg) {
     b70:	40 91 06 01 	lds	r20, 0x0106
     b74:	50 91 07 01 	lds	r21, 0x0107
     b78:	60 91 08 01 	lds	r22, 0x0108
     b7c:	70 91 09 01 	lds	r23, 0x0109
     b80:	80 91 02 01 	lds	r24, 0x0102
     b84:	90 91 03 01 	lds	r25, 0x0103
     b88:	a0 91 04 01 	lds	r26, 0x0104
     b8c:	b0 91 05 01 	lds	r27, 0x0105
     b90:	48 17       	cp	r20, r24
     b92:	59 07       	cpc	r21, r25
     b94:	6a 07       	cpc	r22, r26
     b96:	7b 07       	cpc	r23, r27
     b98:	f9 f0       	breq	.+62     	; 0xbd8 <main+0x20c>
			rprintfChar('L');
     b9a:	8c e4       	ldi	r24, 0x4C	; 76
     b9c:	19 d1       	rcall	.+562    	; 0xdd0 <rprintfChar>
			rprintfNum(10, 4, FALSE, '0', avg);
     b9e:	e0 90 06 01 	lds	r14, 0x0106
     ba2:	f0 90 07 01 	lds	r15, 0x0107
     ba6:	00 91 08 01 	lds	r16, 0x0108
     baa:	10 91 09 01 	lds	r17, 0x0109
     bae:	20 e3       	ldi	r18, 0x30	; 48
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	64 e0       	ldi	r22, 0x04	; 4
     bb4:	8a e0       	ldi	r24, 0x0A	; 10
     bb6:	18 d2       	rcall	.+1072   	; 0xfe8 <rprintfNum>
			lastAvg = avg;
     bb8:	80 91 06 01 	lds	r24, 0x0106
     bbc:	90 91 07 01 	lds	r25, 0x0107
     bc0:	a0 91 08 01 	lds	r26, 0x0108
     bc4:	b0 91 09 01 	lds	r27, 0x0109
     bc8:	80 93 02 01 	sts	0x0102, r24
     bcc:	90 93 03 01 	sts	0x0103, r25
     bd0:	a0 93 04 01 	sts	0x0104, r26
     bd4:	b0 93 05 01 	sts	0x0105, r27
		}

		if (preset != lastpreset) {
     bd8:	20 91 0c 01 	lds	r18, 0x010C
     bdc:	30 91 0d 01 	lds	r19, 0x010D
     be0:	80 91 0a 01 	lds	r24, 0x010A
     be4:	90 91 0b 01 	lds	r25, 0x010B
     be8:	28 17       	cp	r18, r24
     bea:	39 07       	cpc	r19, r25
     bec:	b9 f0       	breq	.+46     	; 0xc1c <main+0x250>
			rprintfChar('P');
     bee:	80 e5       	ldi	r24, 0x50	; 80
     bf0:	ef d0       	rcall	.+478    	; 0xdd0 <rprintfChar>
			rprintfNum(10, 4, FALSE, '0', preset);
     bf2:	e0 90 0c 01 	lds	r14, 0x010C
     bf6:	f0 90 0d 01 	lds	r15, 0x010D
     bfa:	00 27       	eor	r16, r16
     bfc:	f7 fc       	sbrc	r15, 7
     bfe:	00 95       	com	r16
     c00:	10 2f       	mov	r17, r16
     c02:	20 e3       	ldi	r18, 0x30	; 48
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	64 e0       	ldi	r22, 0x04	; 4
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	ee d1       	rcall	.+988    	; 0xfe8 <rprintfNum>
			lastpreset = preset;
     c0c:	80 91 0c 01 	lds	r24, 0x010C
     c10:	90 91 0d 01 	lds	r25, 0x010D
     c14:	90 93 0b 01 	sts	0x010B, r25
     c18:	80 93 0a 01 	sts	0x010A, r24
		}

		//read preset from PC
		if (!uartReceiveBufferIsEmpty()) {
     c1c:	1a d4       	rcall	.+2100   	; 0x1452 <uartReceiveBufferIsEmpty>
     c1e:	88 23       	and	r24, r24
     c20:	d9 f0       	breq	.+54     	; 0xc58 <main+0x28c>
				}
			}

		}

		doLCD++;
     c22:	80 91 f4 00 	lds	r24, 0x00F4
     c26:	90 91 f5 00 	lds	r25, 0x00F5
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	90 93 f5 00 	sts	0x00F5, r25
     c30:	80 93 f4 00 	sts	0x00F4, r24
		if(doLCD == 25){
     c34:	49 97       	sbiw	r24, 0x19	; 25
     c36:	09 f1       	breq	.+66     	; 0xc7a <main+0x2ae>
     c38:	ce 01       	movw	r24, r28
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <main+0x26e>
	lastAvg = 0;
	setup();

	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
     c3e:	98 99       	sbic	0x13, 0	; 19
     c40:	4e cf       	rjmp	.-356    	; 0xade <main+0x112>
				resetcounters();
				setLastPresetChange();

			}
		} else {
			butUpPressed = 0;
     c42:	10 92 01 01 	sts	0x0101, r1
     c46:	10 92 00 01 	sts	0x0100, r1
		}
		if ((PINC & (1 << PC1)) && butDnPressed == 0) {
     c4a:	99 99       	sbic	0x13, 1	; 19
     c4c:	61 cf       	rjmp	.-318    	; 0xb10 <main+0x144>
				preset--;
				resetcounters();
				setLastPresetChange();
			}
		} else {
			butDnPressed = 0;
     c4e:	10 92 ff 00 	sts	0x00FF, r1
     c52:	10 92 fe 00 	sts	0x00FE, r1
     c56:	8c cf       	rjmp	.-232    	; 0xb70 <main+0x1a4>
			lastpreset = preset;
		}

		//read preset from PC
		if (!uartReceiveBufferIsEmpty()) {
			pc_read = uartGetByte();
     c58:	e4 d3       	rcall	.+1992   	; 0x1422 <uartGetByte>
     c5a:	90 93 fd 00 	sts	0x00FD, r25
     c5e:	80 93 fc 00 	sts	0x00FC, r24
			if (pc_read != -1){
     c62:	8f 3f       	cpi	r24, 0xFF	; 255
     c64:	2f ef       	ldi	r18, 0xFF	; 255
     c66:	92 07       	cpc	r25, r18
     c68:	e1 f2       	breq	.-72     	; 0xc22 <main+0x256>
				if(pc_read >= 0 && pc_read < 10){
     c6a:	8a 30       	cpi	r24, 0x0A	; 10
     c6c:	91 05       	cpc	r25, r1
     c6e:	58 f4       	brcc	.+22     	; 0xc86 <main+0x2ba>
					preset = pc_read;
     c70:	90 93 0d 01 	sts	0x010D, r25
     c74:	80 93 0c 01 	sts	0x010C, r24
     c78:	d4 cf       	rjmp	.-88     	; 0xc22 <main+0x256>

		}

		doLCD++;
		if(doLCD == 25){
			updateLCD();
     c7a:	a5 dd       	rcall	.-1206   	; 0x7c6 <updateLCD>
			doLCD = 0;
     c7c:	10 92 f5 00 	sts	0x00F5, r1
     c80:	10 92 f4 00 	sts	0x00F4, r1
     c84:	d9 cf       	rjmp	.-78     	; 0xc38 <main+0x26c>
		if (!uartReceiveBufferIsEmpty()) {
			pc_read = uartGetByte();
			if (pc_read != -1){
				if(pc_read >= 0 && pc_read < 10){
					preset = pc_read;
				}else if(pc_read == '#'){
     c86:	83 32       	cpi	r24, 0x23	; 35
     c88:	91 05       	cpc	r25, r1
     c8a:	71 f0       	breq	.+28     	; 0xca8 <main+0x2dc>
					while(uartReceiveBufferIsEmpty());
					maxpreset = uartGetByte();
					preset = 0;
				}else if(pc_read == '$'){
     c8c:	84 32       	cpi	r24, 0x24	; 36
     c8e:	91 05       	cpc	r25, r1
     c90:	c1 f0       	breq	.+48     	; 0xcc2 <main+0x2f6>
					led1Counterdn[presettomodify] = uartGetByte();
					while(uartReceiveBufferIsEmpty());
					led2Counterdn[presettomodify] = uartGetByte();
					while(uartReceiveBufferIsEmpty());
					led3Counterdn[presettomodify] = uartGetByte();
				}else if(pc_read == '&'){
     c92:	86 97       	sbiw	r24, 0x26	; 38
     c94:	31 f6       	brne	.-116    	; 0xc22 <main+0x256>
					while(uartReceiveBufferIsEmpty());
     c96:	dd d3       	rcall	.+1978   	; 0x1452 <uartReceiveBufferIsEmpty>
     c98:	81 11       	cpse	r24, r1
     c9a:	fd cf       	rjmp	.-6      	; 0xc96 <main+0x2ca>
					presettomodify = uartGetByte();
     c9c:	c2 d3       	rcall	.+1924   	; 0x1422 <uartGetByte>
     c9e:	90 93 67 00 	sts	0x0067, r25
     ca2:	80 93 66 00 	sts	0x0066, r24
     ca6:	bd cf       	rjmp	.-134    	; 0xc22 <main+0x256>
			pc_read = uartGetByte();
			if (pc_read != -1){
				if(pc_read >= 0 && pc_read < 10){
					preset = pc_read;
				}else if(pc_read == '#'){
					while(uartReceiveBufferIsEmpty());
     ca8:	d4 d3       	rcall	.+1960   	; 0x1452 <uartReceiveBufferIsEmpty>
     caa:	81 11       	cpse	r24, r1
     cac:	fd cf       	rjmp	.-6      	; 0xca8 <main+0x2dc>
					maxpreset = uartGetByte();
     cae:	b9 d3       	rcall	.+1906   	; 0x1422 <uartGetByte>
     cb0:	90 93 9b 01 	sts	0x019B, r25
     cb4:	80 93 9a 01 	sts	0x019A, r24
					preset = 0;
     cb8:	10 92 0d 01 	sts	0x010D, r1
     cbc:	10 92 0c 01 	sts	0x010C, r1
     cc0:	b0 cf       	rjmp	.-160    	; 0xc22 <main+0x256>
				}else if(pc_read == '$'){
					while(uartReceiveBufferIsEmpty());
     cc2:	c7 d3       	rcall	.+1934   	; 0x1452 <uartReceiveBufferIsEmpty>
     cc4:	81 11       	cpse	r24, r1
     cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <main+0x2f6>
					presettomodify = uartGetByte();
     cc8:	ac d3       	rcall	.+1880   	; 0x1422 <uartGetByte>
     cca:	90 93 67 00 	sts	0x0067, r25
     cce:	80 93 66 00 	sts	0x0066, r24
					while(uartReceiveBufferIsEmpty());
     cd2:	bf d3       	rcall	.+1918   	; 0x1452 <uartReceiveBufferIsEmpty>
     cd4:	81 11       	cpse	r24, r1
     cd6:	fd cf       	rjmp	.-6      	; 0xcd2 <main+0x306>
					led1Counterup[presettomodify] = uartGetByte();
     cd8:	00 91 66 00 	lds	r16, 0x0066
     cdc:	10 91 67 00 	lds	r17, 0x0067
     ce0:	a0 d3       	rcall	.+1856   	; 0x1422 <uartGetByte>
     ce2:	f8 01       	movw	r30, r16
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 52       	subi	r30, 0x2E	; 46
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     cf0:	b0 d3       	rcall	.+1888   	; 0x1452 <uartReceiveBufferIsEmpty>
     cf2:	81 11       	cpse	r24, r1
     cf4:	fd cf       	rjmp	.-6      	; 0xcf0 <main+0x324>
					led2Counterup[presettomodify] = uartGetByte();
     cf6:	00 91 66 00 	lds	r16, 0x0066
     cfa:	10 91 67 00 	lds	r17, 0x0067
     cfe:	91 d3       	rcall	.+1826   	; 0x1422 <uartGetByte>
     d00:	f8 01       	movw	r30, r16
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	e2 54       	subi	r30, 0x42	; 66
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     d0e:	a1 d3       	rcall	.+1858   	; 0x1452 <uartReceiveBufferIsEmpty>
     d10:	81 11       	cpse	r24, r1
     d12:	fd cf       	rjmp	.-6      	; 0xd0e <main+0x342>
					led3Counterup[presettomodify] = uartGetByte();
     d14:	00 91 66 00 	lds	r16, 0x0066
     d18:	10 91 67 00 	lds	r17, 0x0067
     d1c:	82 d3       	rcall	.+1796   	; 0x1422 <uartGetByte>
     d1e:	f8 01       	movw	r30, r16
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	e6 55       	subi	r30, 0x56	; 86
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24

					while(uartReceiveBufferIsEmpty());
     d2c:	92 d3       	rcall	.+1828   	; 0x1452 <uartReceiveBufferIsEmpty>
     d2e:	81 11       	cpse	r24, r1
     d30:	fd cf       	rjmp	.-6      	; 0xd2c <main+0x360>
					led1Counterdn[presettomodify] = uartGetByte();
     d32:	00 91 66 00 	lds	r16, 0x0066
     d36:	10 91 67 00 	lds	r17, 0x0067
     d3a:	73 d3       	rcall	.+1766   	; 0x1422 <uartGetByte>
     d3c:	f8 01       	movw	r30, r16
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	ea 56       	subi	r30, 0x6A	; 106
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     d4a:	83 d3       	rcall	.+1798   	; 0x1452 <uartReceiveBufferIsEmpty>
     d4c:	81 11       	cpse	r24, r1
     d4e:	fd cf       	rjmp	.-6      	; 0xd4a <main+0x37e>
					led2Counterdn[presettomodify] = uartGetByte();
     d50:	00 91 66 00 	lds	r16, 0x0066
     d54:	10 91 67 00 	lds	r17, 0x0067
     d58:	64 d3       	rcall	.+1736   	; 0x1422 <uartGetByte>
     d5a:	f8 01       	movw	r30, r16
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	ee 57       	subi	r30, 0x7E	; 126
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	80 83       	st	Z, r24
					while(uartReceiveBufferIsEmpty());
     d68:	74 d3       	rcall	.+1768   	; 0x1452 <uartReceiveBufferIsEmpty>
     d6a:	81 11       	cpse	r24, r1
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <main+0x39c>
					led3Counterdn[presettomodify] = uartGetByte();
     d6e:	00 91 66 00 	lds	r16, 0x0066
     d72:	10 91 67 00 	lds	r17, 0x0067
     d76:	55 d3       	rcall	.+1706   	; 0x1422 <uartGetByte>
     d78:	f8 01       	movw	r30, r16
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	e2 59       	subi	r30, 0x92	; 146
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
     d86:	4d cf       	rjmp	.-358    	; 0xc22 <main+0x256>
	do {
		//check buttons
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
			butUpPressed = 1;
			if (preset < maxpreset) {
				preset++;
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	90 93 0d 01 	sts	0x010D, r25
     d8e:	80 93 0c 01 	sts	0x010C, r24
	avg = filter_adc();

}

void resetcounters(){
	led1Count = 0;
     d92:	10 92 13 01 	sts	0x0113, r1
     d96:	10 92 12 01 	sts	0x0112, r1
	led2Count = 0;
     d9a:	10 92 0f 01 	sts	0x010F, r1
     d9e:	10 92 0e 01 	sts	0x010E, r1
	led3Count = 0;
     da2:	10 92 11 01 	sts	0x0111, r1
     da6:	10 92 10 01 	sts	0x0110, r1
	led1Up = 0;
     daa:	10 92 6b 00 	sts	0x006B, r1
     dae:	10 92 6a 00 	sts	0x006A, r1
	led2Up = 0;
     db2:	10 92 69 00 	sts	0x0069, r1
     db6:	10 92 68 00 	sts	0x0068, r1
	led3Up = 0;
     dba:	10 92 6d 00 	sts	0x006D, r1
     dbe:	10 92 6c 00 	sts	0x006C, r1
		if ((PINC & (1 << PC0)) && butUpPressed == 0) {
			butUpPressed = 1;
			if (preset < maxpreset) {
				preset++;
				resetcounters();
				setLastPresetChange();
     dc2:	bc dc       	rcall	.-1672   	; 0x73c <setLastPresetChange>
     dc4:	a3 ce       	rjmp	.-698    	; 0xb0c <main+0x140>

00000dc6 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     dc6:	90 93 17 01 	sts	0x0117, r25
     dca:	80 93 16 01 	sts	0x0116, r24
     dce:	08 95       	ret

00000dd0 <rprintfChar>:
}

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     dd0:	cf 93       	push	r28
     dd2:	c8 2f       	mov	r28, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     dd4:	8a 30       	cpi	r24, 0x0A	; 10
     dd6:	39 f0       	breq	.+14     	; 0xde6 <rprintfChar+0x16>
		rputchar('\r');
	// send character
	rputchar(c);
     dd8:	e0 91 16 01 	lds	r30, 0x0116
     ddc:	f0 91 17 01 	lds	r31, 0x0117
     de0:	8c 2f       	mov	r24, r28
}
     de2:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     de4:	09 94       	ijmp
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     de6:	e0 91 16 01 	lds	r30, 0x0116
     dea:	f0 91 17 01 	lds	r31, 0x0117
     dee:	8d e0       	ldi	r24, 0x0D	; 13
     df0:	09 95       	icall
	// send character
	rputchar(c);
     df2:	e0 91 16 01 	lds	r30, 0x0116
     df6:	f0 91 17 01 	lds	r31, 0x0117
     dfa:	8c 2f       	mov	r24, r28
}
     dfc:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     dfe:	09 94       	ijmp

00000e00 <rprintfStr>:
}

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	c9 f0       	breq	.+50     	; 0xe3c <rprintfStr+0x3c>

	// print the string until a null-terminator
	while (*str)
     e0a:	fc 01       	movw	r30, r24
     e0c:	10 81       	ld	r17, Z
     e0e:	11 23       	and	r17, r17
     e10:	a9 f0       	breq	.+42     	; 0xe3c <rprintfStr+0x3c>
     e12:	ec 01       	movw	r28, r24
     e14:	21 96       	adiw	r28, 0x01	; 1
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <rprintfStr+0x2a>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     e18:	e0 91 16 01 	lds	r30, 0x0116
     e1c:	f0 91 17 01 	lds	r31, 0x0117
     e20:	81 2f       	mov	r24, r17
     e22:	09 95       	icall
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
     e24:	19 91       	ld	r17, Y+
     e26:	11 23       	and	r17, r17
     e28:	49 f0       	breq	.+18     	; 0xe3c <rprintfStr+0x3c>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     e2a:	1a 30       	cpi	r17, 0x0A	; 10
     e2c:	a9 f7       	brne	.-22     	; 0xe18 <rprintfStr+0x18>
		rputchar('\r');
     e2e:	e0 91 16 01 	lds	r30, 0x0116
     e32:	f0 91 17 01 	lds	r31, 0x0117
     e36:	8d e0       	ldi	r24, 0x0D	; 13
     e38:	09 95       	icall
     e3a:	ee cf       	rjmp	.-36     	; 0xe18 <rprintfStr+0x18>
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	08 95       	ret

00000e44 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	1f 92       	push	r1
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	a9 f1       	breq	.+106    	; 0xeca <rprintfStrLen+0x86>
     e60:	fc 01       	movw	r30, r24
     e62:	68 0f       	add	r22, r24
     e64:	79 1f       	adc	r23, r25
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <rprintfStrLen+0x34>
     e68:	6f 01       	movw	r12, r30
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	c8 1a       	sub	r12, r24
     e6e:	d8 0a       	sbc	r13, r24
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
     e70:	80 81       	ld	r24, Z
     e72:	88 23       	and	r24, r24
     e74:	29 f0       	breq	.+10     	; 0xe80 <rprintfStrLen+0x3c>
     e76:	f6 01       	movw	r30, r12
     e78:	6f 01       	movw	r12, r30
     e7a:	e6 17       	cp	r30, r22
     e7c:	f7 07       	cpc	r31, r23
     e7e:	a1 f7       	brne	.-24     	; 0xe68 <rprintfStrLen+0x24>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     e80:	e1 14       	cp	r14, r1
     e82:	f1 04       	cpc	r15, r1
     e84:	11 f1       	breq	.+68     	; 0xeca <rprintfStrLen+0x86>
     e86:	00 e0       	ldi	r16, 0x00	; 0
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	10 c0       	rjmp	.+32     	; 0xeac <rprintfStrLen+0x68>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
			rprintfChar(*str++);
     e8c:	bf ef       	ldi	r27, 0xFF	; 255
     e8e:	cb 1a       	sub	r12, r27
     e90:	db 0a       	sbc	r13, r27
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     e92:	9a 30       	cpi	r25, 0x0A	; 10
     e94:	21 f1       	breq	.+72     	; 0xede <rprintfStrLen+0x9a>
		rputchar('\r');
	// send character
	rputchar(c);
     e96:	e0 91 16 01 	lds	r30, 0x0116
     e9a:	f0 91 17 01 	lds	r31, 0x0117
     e9e:	89 2f       	mov	r24, r25
     ea0:	09 95       	icall
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     ea2:	0f 5f       	subi	r16, 0xFF	; 255
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	0e 15       	cp	r16, r14
     ea8:	1f 05       	cpc	r17, r15
     eaa:	79 f0       	breq	.+30     	; 0xeca <rprintfStrLen+0x86>
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
     eac:	d6 01       	movw	r26, r12
     eae:	9c 91       	ld	r25, X
     eb0:	91 11       	cpse	r25, r1
     eb2:	ec cf       	rjmp	.-40     	; 0xe8c <rprintfStrLen+0x48>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     eb4:	e0 91 16 01 	lds	r30, 0x0116
     eb8:	f0 91 17 01 	lds	r31, 0x0117
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	09 95       	icall
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
     ec0:	0f 5f       	subi	r16, 0xFF	; 255
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	0e 15       	cp	r16, r14
     ec6:	1f 05       	cpc	r17, r15
     ec8:	89 f7       	brne	.-30     	; 0xeac <rprintfStrLen+0x68>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	08 95       	ret
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     ede:	e0 91 16 01 	lds	r30, 0x0116
     ee2:	f0 91 17 01 	lds	r31, 0x0117
     ee6:	8d e0       	ldi	r24, 0x0D	; 13
     ee8:	99 83       	std	Y+1, r25	; 0x01
     eea:	09 95       	icall
     eec:	99 81       	ldd	r25, Y+1	; 0x01
     eee:	d3 cf       	rjmp	.-90     	; 0xe96 <rprintfStrLen+0x52>

00000ef0 <rprintfProgStr>:
}

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const char str[])
{
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	d9 f0       	breq	.+54     	; 0xf30 <rprintfProgStr+0x40>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     efa:	ec 01       	movw	r28, r24
     efc:	21 96       	adiw	r28, 0x01	; 1
     efe:	fc 01       	movw	r30, r24
     f00:	14 91       	lpm	r17, Z
     f02:	11 11       	cpse	r17, r1
     f04:	0c c0       	rjmp	.+24     	; 0xf1e <rprintfProgStr+0x2e>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <rprintfProgStr+0x40>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     f08:	e0 91 16 01 	lds	r30, 0x0116
     f0c:	f0 91 17 01 	lds	r31, 0x0117
     f10:	81 2f       	mov	r24, r17
     f12:	09 95       	icall

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
     f14:	fe 01       	movw	r30, r28
     f16:	14 91       	lpm	r17, Z
     f18:	21 96       	adiw	r28, 0x01	; 1
     f1a:	11 23       	and	r17, r17
     f1c:	49 f0       	breq	.+18     	; 0xf30 <rprintfProgStr+0x40>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     f1e:	1a 30       	cpi	r17, 0x0A	; 10
     f20:	99 f7       	brne	.-26     	; 0xf08 <rprintfProgStr+0x18>
		rputchar('\r');
     f22:	e0 91 16 01 	lds	r30, 0x0116
     f26:	f0 91 17 01 	lds	r31, 0x0117
     f2a:	8d e0       	ldi	r24, 0x0D	; 13
     f2c:	09 95       	icall
     f2e:	ec cf       	rjmp	.-40     	; 0xf08 <rprintfProgStr+0x18>
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	08 95       	ret

00000f38 <rprintfCRLF>:
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     f38:	e0 91 16 01 	lds	r30, 0x0116
     f3c:	f0 91 17 01 	lds	r31, 0x0117
     f40:	8d e0       	ldi	r24, 0x0D	; 13
     f42:	09 95       	icall
	// send character
	rputchar(c);
     f44:	e0 91 16 01 	lds	r30, 0x0116
     f48:	f0 91 17 01 	lds	r31, 0x0117
     f4c:	8a e0       	ldi	r24, 0x0A	; 10
     f4e:	09 94       	ijmp

00000f50 <rprintfu04>:
}

// *** rprintfu04 ***
// prints an unsigned 4-bit number in hex (1 digit)
void rprintfu04(unsigned char data)
{
     f50:	cf 93       	push	r28
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
     f52:	8f 70       	andi	r24, 0x0F	; 15
     f54:	e8 2f       	mov	r30, r24
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	ea 5d       	subi	r30, 0xDA	; 218
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	c4 91       	lpm	r28, Z
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
     f5e:	ca 30       	cpi	r28, 0x0A	; 10
     f60:	39 f0       	breq	.+14     	; 0xf70 <rprintfu04+0x20>
		rputchar('\r');
	// send character
	rputchar(c);
     f62:	e0 91 16 01 	lds	r30, 0x0116
     f66:	f0 91 17 01 	lds	r31, 0x0117
     f6a:	8c 2f       	mov	r24, r28
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
}
     f6c:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     f6e:	09 94       	ijmp
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
     f70:	e0 91 16 01 	lds	r30, 0x0116
     f74:	f0 91 17 01 	lds	r31, 0x0117
     f78:	8d e0       	ldi	r24, 0x0D	; 13
     f7a:	09 95       	icall
	// send character
	rputchar(c);
     f7c:	e0 91 16 01 	lds	r30, 0x0116
     f80:	f0 91 17 01 	lds	r31, 0x0117
     f84:	8c 2f       	mov	r24, r28
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
}
     f86:	cf 91       	pop	r28
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
     f88:	09 94       	ijmp

00000f8a <rprintfu08>:
}

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
     f8a:	cf 93       	push	r28
     f8c:	c8 2f       	mov	r28, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
     f8e:	82 95       	swap	r24
     f90:	8f 70       	andi	r24, 0x0F	; 15
     f92:	de df       	rcall	.-68     	; 0xf50 <rprintfu04>
	rprintfu04(data);
     f94:	8c 2f       	mov	r24, r28
}
     f96:	cf 91       	pop	r28
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
     f98:	db cf       	rjmp	.-74     	; 0xf50 <rprintfu04>

00000f9a <rprintfu16>:
}

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	1f 92       	push	r1
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	18 2f       	mov	r17, r24
// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
     fa8:	89 2f       	mov	r24, r25
     faa:	82 95       	swap	r24
     fac:	8f 70       	andi	r24, 0x0F	; 15
     fae:	99 83       	std	Y+1, r25	; 0x01
     fb0:	cf df       	rcall	.-98     	; 0xf50 <rprintfu04>
	rprintfu04(data);
     fb2:	99 81       	ldd	r25, Y+1	; 0x01
     fb4:	89 2f       	mov	r24, r25
     fb6:	cc df       	rcall	.-104    	; 0xf50 <rprintfu04>
// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
     fb8:	81 2f       	mov	r24, r17
     fba:	82 95       	swap	r24
     fbc:	8f 70       	andi	r24, 0x0F	; 15
     fbe:	c8 df       	rcall	.-112    	; 0xf50 <rprintfu04>
	rprintfu04(data);
     fc0:	81 2f       	mov	r24, r17
void rprintfu16(unsigned short data)
{
	// print 16-bit hex value
	rprintfu08(data>>8);
	rprintfu08(data);
}
     fc2:	0f 90       	pop	r0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
	// print 8-bit hex value
	rprintfu04(data>>4);
	rprintfu04(data);
     fca:	c2 cf       	rjmp	.-124    	; 0xf50 <rprintfu04>

00000fcc <rprintfu32>:
}

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	6b 01       	movw	r12, r22
     fd6:	7c 01       	movw	r14, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
     fd8:	c7 01       	movw	r24, r14
     fda:	df df       	rcall	.-66     	; 0xf9a <rprintfu16>
	rprintfu16(data);
     fdc:	c6 01       	movw	r24, r12
}
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
	// print 32-bit hex value
	rprintfu16(data>>16);
	rprintfu16(data);
     fe6:	d9 cf       	rjmp	.-78     	; 0xf9a <rprintfu16>

00000fe8 <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
     fe8:	3f 92       	push	r3
     fea:	4f 92       	push	r4
     fec:	5f 92       	push	r5
     fee:	6f 92       	push	r6
     ff0:	7f 92       	push	r7
     ff2:	8f 92       	push	r8
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	bf 92       	push	r11
     ffa:	cf 92       	push	r12
     ffc:	df 92       	push	r13
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	a9 97       	sbiw	r28, 0x29	; 41
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	36 2e       	mov	r3, r22
    101c:	72 2e       	mov	r7, r18
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    101e:	44 23       	and	r20, r20
    1020:	11 f0       	breq	.+4      	; 0x1026 <rprintfNum+0x3e>
    1022:	17 fd       	sbrc	r17, 7
    1024:	9f c0       	rjmp	.+318    	; 0x1164 <rprintfNum+0x17c>
	{
		x = -n;
	}
	else
	{
	 	x = n;
    1026:	47 01       	movw	r8, r14
    1028:	58 01       	movw	r10, r16
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    102a:	dd 24       	eor	r13, r13
    102c:	d3 94       	inc	r13
    102e:	41 11       	cpse	r20, r1
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <rprintfNum+0x4c>
    1032:	d1 2c       	mov	r13, r1
    1034:	cc 24       	eor	r12, r12
    1036:	ca 94       	dec	r12
    1038:	c3 0c       	add	r12, r3
    103a:	cd 18       	sub	r12, r13
  	p = buf + sizeof (buf);
  	*--p = '\0';
    103c:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	29 a3       	std	Y+33, r18	; 0x21
    1048:	3a a3       	std	Y+34, r19	; 0x22
    104a:	4b a3       	std	Y+35, r20	; 0x23
    104c:	5c a3       	std	Y+36, r21	; 0x24
    104e:	c5 01       	movw	r24, r10
    1050:	b4 01       	movw	r22, r8
    1052:	a7 d2       	rcall	.+1358   	; 0x15a2 <__udivmodsi4>
    1054:	fb 01       	movw	r30, r22
    1056:	ef 70       	andi	r30, 0x0F	; 15
    1058:	ff 27       	eor	r31, r31
    105a:	ea 5d       	subi	r30, 0xDA	; 218
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	64 91       	lpm	r22, Z
    1060:	6f 8f       	std	Y+31, r22	; 0x1f
    1062:	c5 01       	movw	r24, r10
    1064:	b4 01       	movw	r22, r8
    1066:	29 a1       	ldd	r18, Y+33	; 0x21
    1068:	3a a1       	ldd	r19, Y+34	; 0x22
    106a:	4b a1       	ldd	r20, Y+35	; 0x23
    106c:	5c a1       	ldd	r21, Y+36	; 0x24
    106e:	99 d2       	rcall	.+1330   	; 0x15a2 <__udivmodsi4>
    1070:	49 01       	movw	r8, r18
    1072:	5a 01       	movw	r10, r20
    1074:	2e 01       	movw	r4, r28
    1076:	3e e1       	ldi	r19, 0x1E	; 30
    1078:	43 0e       	add	r4, r19
    107a:	51 1c       	adc	r5, r1
    107c:	ed a2       	std	Y+37, r14	; 0x25
    107e:	fe a2       	std	Y+38, r15	; 0x26
    1080:	0f a3       	std	Y+39, r16	; 0x27
    1082:	18 a7       	std	Y+40, r17	; 0x28
    1084:	0c 2d       	mov	r16, r12
    1086:	1c 2d       	mov	r17, r12
    1088:	6d 2c       	mov	r6, r13
    108a:	c9 a0       	ldd	r12, Y+33	; 0x21
    108c:	da a0       	ldd	r13, Y+34	; 0x22
    108e:	eb a0       	ldd	r14, Y+35	; 0x23
    1090:	fc a0       	ldd	r15, Y+36	; 0x24
	// calculate remaining digits
	while(count--)
    1092:	17 c0       	rjmp	.+46     	; 0x10c2 <rprintfNum+0xda>
	{
		if(x != 0)
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    1094:	c5 01       	movw	r24, r10
    1096:	b4 01       	movw	r22, r8
    1098:	a7 01       	movw	r20, r14
    109a:	96 01       	movw	r18, r12
    109c:	82 d2       	rcall	.+1284   	; 0x15a2 <__udivmodsi4>
    109e:	fb 01       	movw	r30, r22
    10a0:	ef 70       	andi	r30, 0x0F	; 15
    10a2:	ff 27       	eor	r31, r31
    10a4:	ea 5d       	subi	r30, 0xDA	; 218
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	64 91       	lpm	r22, Z
    10aa:	f2 01       	movw	r30, r4
    10ac:	60 83       	st	Z, r22
    10ae:	c5 01       	movw	r24, r10
    10b0:	b4 01       	movw	r22, r8
    10b2:	a7 01       	movw	r20, r14
    10b4:	96 01       	movw	r18, r12
    10b6:	75 d2       	rcall	.+1258   	; 0x15a2 <__udivmodsi4>
    10b8:	49 01       	movw	r8, r18
    10ba:	5a 01       	movw	r10, r20
    10bc:	f1 e0       	ldi	r31, 0x01	; 1
    10be:	4f 1a       	sub	r4, r31
    10c0:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    10c2:	11 50       	subi	r17, 0x01	; 1
    10c4:	40 f0       	brcs	.+16     	; 0x10d6 <rprintfNum+0xee>
	{
		if(x != 0)
    10c6:	81 14       	cp	r8, r1
    10c8:	91 04       	cpc	r9, r1
    10ca:	a1 04       	cpc	r10, r1
    10cc:	b1 04       	cpc	r11, r1
    10ce:	11 f7       	brne	.-60     	; 0x1094 <rprintfNum+0xac>
			*--p = hexchar(x%base); x /= base;
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    10d0:	f2 01       	movw	r30, r4
    10d2:	70 82       	st	Z, r7
    10d4:	f3 cf       	rjmp	.-26     	; 0x10bc <rprintfNum+0xd4>
    10d6:	c0 2e       	mov	r12, r16
    10d8:	ed a0       	ldd	r14, Y+37	; 0x25
    10da:	fe a0       	ldd	r15, Y+38	; 0x26
    10dc:	0f a1       	ldd	r16, Y+39	; 0x27
    10de:	18 a5       	ldd	r17, Y+40	; 0x28
    10e0:	fe 01       	movw	r30, r28
    10e2:	7f 96       	adiw	r30, 0x1f	; 31
    10e4:	ec 19       	sub	r30, r12
    10e6:	f1 09       	sbc	r31, r1
		}
	}

	// apply signed notation if requested
	if( isSigned )
    10e8:	66 20       	and	r6, r6
    10ea:	49 f0       	breq	.+18     	; 0x10fe <rprintfNum+0x116>
	{
		if(n < 0)
    10ec:	17 fd       	sbrc	r17, 7
    10ee:	42 c0       	rjmp	.+132    	; 0x1174 <rprintfNum+0x18c>
		{
   			*--p = '-';
		}
		else if(n > 0)
    10f0:	ef 28       	or	r14, r15
    10f2:	e0 2a       	or	r14, r16
    10f4:	e1 2a       	or	r14, r17
    10f6:	09 f4       	brne	.+2      	; 0x10fa <rprintfNum+0x112>
    10f8:	40 c0       	rjmp	.+128    	; 0x117a <rprintfNum+0x192>
		{
	   		*--p = '+';
    10fa:	8b e2       	ldi	r24, 0x2B	; 43
    10fc:	82 93       	st	-Z, r24
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    10fe:	33 20       	and	r3, r3
    1100:	c9 f0       	breq	.+50     	; 0x1134 <rprintfNum+0x14c>
    1102:	8f 01       	movw	r16, r30
    1104:	f3 2c       	mov	r15, r3
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <rprintfNum+0x130>
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
    1108:	e0 91 16 01 	lds	r30, 0x0116
    110c:	f0 91 17 01 	lds	r31, 0x0117
    1110:	89 2f       	mov	r24, r25
    1112:	09 95       	icall
    1114:	fa 94       	dec	r15
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    1116:	71 f0       	breq	.+28     	; 0x1134 <rprintfNum+0x14c>
	{
		rprintfChar(*p++);
    1118:	f8 01       	movw	r30, r16
    111a:	91 91       	ld	r25, Z+
    111c:	8f 01       	movw	r16, r30
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
    111e:	9a 30       	cpi	r25, 0x0A	; 10
    1120:	99 f7       	brne	.-26     	; 0x1108 <rprintfNum+0x120>
		rputchar('\r');
    1122:	e0 91 16 01 	lds	r30, 0x0116
    1126:	f0 91 17 01 	lds	r31, 0x0117
    112a:	8d e0       	ldi	r24, 0x0D	; 13
    112c:	99 a7       	std	Y+41, r25	; 0x29
    112e:	09 95       	icall
    1130:	99 a5       	ldd	r25, Y+41	; 0x29
    1132:	ea cf       	rjmp	.-44     	; 0x1108 <rprintfNum+0x120>
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
    1134:	a9 96       	adiw	r28, 0x29	; 41
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	df 90       	pop	r13
    114e:	cf 90       	pop	r12
    1150:	bf 90       	pop	r11
    1152:	af 90       	pop	r10
    1154:	9f 90       	pop	r9
    1156:	8f 90       	pop	r8
    1158:	7f 90       	pop	r7
    115a:	6f 90       	pop	r6
    115c:	5f 90       	pop	r5
    115e:	4f 90       	pop	r4
    1160:	3f 90       	pop	r3
    1162:	08 95       	ret
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
	{
		x = -n;
    1164:	88 24       	eor	r8, r8
    1166:	99 24       	eor	r9, r9
    1168:	54 01       	movw	r10, r8
    116a:	8e 18       	sub	r8, r14
    116c:	9f 08       	sbc	r9, r15
    116e:	a0 0a       	sbc	r10, r16
    1170:	b1 0a       	sbc	r11, r17
    1172:	5b cf       	rjmp	.-330    	; 0x102a <rprintfNum+0x42>
	// apply signed notation if requested
	if( isSigned )
	{
		if(n < 0)
		{
   			*--p = '-';
    1174:	8d e2       	ldi	r24, 0x2D	; 45
    1176:	82 93       	st	-Z, r24
    1178:	c2 cf       	rjmp	.-124    	; 0x10fe <rprintfNum+0x116>
		{
	   		*--p = '+';
		}
		else
		{
	   		*--p = ' ';
    117a:	80 e2       	ldi	r24, 0x20	; 32
    117c:	82 93       	st	-Z, r24
    117e:	bf cf       	rjmp	.-130    	; 0x10fe <rprintfNum+0x116>

00001180 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    1180:	6f 92       	push	r6
    1182:	7f 92       	push	r7
    1184:	8f 92       	push	r8
    1186:	9f 92       	push	r9
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	7a 88       	ldd	r7, Y+18	; 0x12
    11a4:	cb 88       	ldd	r12, Y+19	; 0x13
    11a6:	dc 88       	ldd	r13, Y+20	; 0x14
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
    11a8:	4e 01       	movw	r8, r28
    11aa:	85 e1       	ldi	r24, 0x15	; 21
    11ac:	88 0e       	add	r8, r24
    11ae:	91 1c       	adc	r9, r1
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    11b0:	77 20       	and	r7, r7
    11b2:	a9 f0       	breq	.+42     	; 0x11de <rprintf1RamRom+0x5e>
    11b4:	86 01       	movw	r16, r12
    11b6:	0f 5f       	subi	r16, 0xFF	; 255
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ba:	f6 01       	movw	r30, r12
    11bc:	94 91       	lpm	r25, Z
    11be:	95 32       	cpi	r25, 0x25	; 37
    11c0:	49 f1       	breq	.+82     	; 0x1214 <rprintf1RamRom+0x94>
		{	// Until '%' or '\0'
			if (!format_flag)
    11c2:	99 23       	and	r25, r25
    11c4:	a9 f0       	breq	.+42     	; 0x11f0 <rprintf1RamRom+0x70>
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
    11c6:	9a 30       	cpi	r25, 0x0A	; 10
    11c8:	09 f4       	brne	.+2      	; 0x11cc <rprintf1RamRom+0x4c>
    11ca:	6f c0       	rjmp	.+222    	; 0x12aa <rprintf1RamRom+0x12a>
		rputchar('\r');
	// send character
	rputchar(c);
    11cc:	e0 91 16 01 	lds	r30, 0x0116
    11d0:	f0 91 17 01 	lds	r31, 0x0117
    11d4:	89 2f       	mov	r24, r25
    11d6:	09 95       	icall
    11d8:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    11da:	71 10       	cpse	r7, r1
    11dc:	eb cf       	rjmp	.-42     	; 0x11b4 <rprintf1RamRom+0x34>
    11de:	f6 01       	movw	r30, r12
    11e0:	90 81       	ld	r25, Z
    11e2:	95 32       	cpi	r25, 0x25	; 37
    11e4:	91 f1       	breq	.+100    	; 0x124a <rprintf1RamRom+0xca>
    11e6:	86 01       	movw	r16, r12
    11e8:	0f 5f       	subi	r16, 0xFF	; 255
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
		{	// Until '%' or '\0'
			if (!format_flag)
    11ec:	91 11       	cpse	r25, r1
    11ee:	eb cf       	rjmp	.-42     	; 0x11c6 <rprintf1RamRom+0x46>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0f 90       	pop	r0
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	08 95       	ret
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    1214:	f2 e0       	ldi	r31, 0x02	; 2
    1216:	cf 0e       	add	r12, r31
    1218:	d1 1c       	adc	r13, r1
    121a:	f8 01       	movw	r30, r16
    121c:	04 91       	lpm	r16, Z
    121e:	04 36       	cpi	r16, 0x64	; 100
    1220:	d9 f0       	breq	.+54     	; 0x1258 <rprintf1RamRom+0xd8>
    1222:	08 37       	cpi	r16, 0x78	; 120
    1224:	09 f4       	brne	.+2      	; 0x1228 <rprintf1RamRom+0xa8>
    1226:	4a c0       	rjmp	.+148    	; 0x12bc <rprintf1RamRom+0x13c>
    1228:	03 36       	cpi	r16, 0x63	; 99
    122a:	29 f4       	brne	.+10     	; 0x1236 <rprintf1RamRom+0xb6>
		{
			case 'c': format_flag = va_arg(ap,int);
    122c:	f4 01       	movw	r30, r8
    122e:	00 81       	ld	r16, Z
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	89 0e       	add	r8, r25
    1234:	91 1c       	adc	r9, r1
// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
    1236:	0a 30       	cpi	r16, 0x0A	; 10
    1238:	09 f4       	brne	.+2      	; 0x123c <rprintf1RamRom+0xbc>
    123a:	5d c0       	rjmp	.+186    	; 0x12f6 <rprintf1RamRom+0x176>
		rputchar('\r');
	// send character
	rputchar(c);
    123c:	e0 91 16 01 	lds	r30, 0x0116
    1240:	f0 91 17 01 	lds	r31, 0x0117
    1244:	80 2f       	mov	r24, r16
    1246:	09 95       	icall
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
    1248:	b3 cf       	rjmp	.-154    	; 0x11b0 <rprintf1RamRom+0x30>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    124a:	f6 01       	movw	r30, r12
    124c:	01 81       	ldd	r16, Z+1	; 0x01
    124e:	c6 01       	movw	r24, r12
    1250:	02 96       	adiw	r24, 0x02	; 2
    1252:	6c 01       	movw	r12, r24
    1254:	04 36       	cpi	r16, 0x64	; 100
    1256:	29 f7       	brne	.-54     	; 0x1222 <rprintf1RamRom+0xa2>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1258:	f4 01       	movw	r30, r8
    125a:	e0 80       	ld	r14, Z
    125c:	f1 80       	ldd	r15, Z+1	; 0x01
    125e:	e2 e0       	ldi	r30, 0x02	; 2
    1260:	8e 0e       	add	r8, r30
    1262:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
    1264:	f7 fc       	sbrc	r15, 7
    1266:	4e c0       	rjmp	.+156    	; 0x1304 <rprintf1RamRom+0x184>
				{
					u_val = - u_val;
					rprintfChar('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    1268:	80 e1       	ldi	r24, 0x10	; 16
    126a:	e8 16       	cp	r14, r24
    126c:	87 e2       	ldi	r24, 0x27	; 39
    126e:	f8 06       	cpc	r15, r24
    1270:	08 f0       	brcs	.+2      	; 0x1274 <rprintf1RamRom+0xf4>
    1272:	52 c0       	rjmp	.+164    	; 0x1318 <rprintf1RamRom+0x198>
    1274:	43 e0       	ldi	r20, 0x03	; 3
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	08 ee       	ldi	r16, 0xE8	; 232
    127a:	13 e0       	ldi	r17, 0x03	; 3
    127c:	e0 16       	cp	r14, r16
    127e:	f1 06       	cpc	r15, r17
    1280:	80 f4       	brcc	.+32     	; 0x12a2 <rprintf1RamRom+0x122>
    1282:	98 01       	movw	r18, r16
    1284:	ad ec       	ldi	r26, 0xCD	; 205
    1286:	bc ec       	ldi	r27, 0xCC	; 204
    1288:	ae d1       	rcall	.+860    	; 0x15e6 <__umulhisi3>
    128a:	8c 01       	movw	r16, r24
    128c:	16 95       	lsr	r17
    128e:	07 95       	ror	r16
    1290:	16 95       	lsr	r17
    1292:	07 95       	ror	r16
    1294:	16 95       	lsr	r17
    1296:	07 95       	ror	r16
    1298:	41 50       	subi	r20, 0x01	; 1
    129a:	51 09       	sbc	r21, r1
    129c:	41 15       	cp	r20, r1
    129e:	51 05       	cpc	r21, r1
    12a0:	69 f7       	brne	.-38     	; 0x127c <rprintf1RamRom+0xfc>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    12a2:	2a e0       	ldi	r18, 0x0A	; 10
    12a4:	a2 2e       	mov	r10, r18
    12a6:	b1 2c       	mov	r11, r1
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <rprintf1RamRom+0x152>
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
    12aa:	e0 91 16 01 	lds	r30, 0x0116
    12ae:	f0 91 17 01 	lds	r31, 0x0117
    12b2:	8d e0       	ldi	r24, 0x0D	; 13
    12b4:	99 83       	std	Y+1, r25	; 0x01
    12b6:	09 95       	icall
    12b8:	99 81       	ldd	r25, Y+1	; 0x01
    12ba:	88 cf       	rjmp	.-240    	; 0x11cc <rprintf1RamRom+0x4c>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    12bc:	f4 01       	movw	r30, r8
    12be:	e0 80       	ld	r14, Z
    12c0:	f1 80       	ldd	r15, Z+1	; 0x01
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
    12c4:	8f 0e       	add	r8, r31
    12c6:	91 1c       	adc	r9, r1
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
    12c8:	80 e1       	ldi	r24, 0x10	; 16
    12ca:	a8 2e       	mov	r10, r24
    12cc:	b1 2c       	mov	r11, r1
    12ce:	00 e0       	ldi	r16, 0x00	; 0
    12d0:	10 e1       	ldi	r17, 0x10	; 16
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    12d2:	c7 01       	movw	r24, r14
    12d4:	b8 01       	movw	r22, r16
    12d6:	51 d1       	rcall	.+674    	; 0x157a <__udivmodhi4>
    12d8:	68 2e       	mov	r6, r24
    12da:	86 2f       	mov	r24, r22
    12dc:	99 83       	std	Y+1, r25	; 0x01
    12de:	38 de       	rcall	.-912    	; 0xf50 <rprintfu04>
				u_val %= div_val;
    12e0:	e6 2c       	mov	r14, r6
    12e2:	99 81       	ldd	r25, Y+1	; 0x01
    12e4:	f9 2e       	mov	r15, r25
				div_val /= base;
    12e6:	c8 01       	movw	r24, r16
    12e8:	b5 01       	movw	r22, r10
    12ea:	47 d1       	rcall	.+654    	; 0x157a <__udivmodhi4>
    12ec:	8b 01       	movw	r16, r22
			} while (div_val);
    12ee:	61 15       	cp	r22, r1
    12f0:	71 05       	cpc	r23, r1
    12f2:	79 f7       	brne	.-34     	; 0x12d2 <rprintf1RamRom+0x152>
    12f4:	5d cf       	rjmp	.-326    	; 0x11b0 <rprintf1RamRom+0x30>
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
    12f6:	e0 91 16 01 	lds	r30, 0x0116
    12fa:	f0 91 17 01 	lds	r31, 0x0117
    12fe:	8d e0       	ldi	r24, 0x0D	; 13
    1300:	09 95       	icall
    1302:	9c cf       	rjmp	.-200    	; 0x123c <rprintf1RamRom+0xbc>
			u_val = va_arg(ap,int);
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
    1304:	f1 94       	neg	r15
    1306:	e1 94       	neg	r14
    1308:	f1 08       	sbc	r15, r1
{
	// do LF -> CR/LF translation
	if(c == '\n')
		rputchar('\r');
	// send character
	rputchar(c);
    130a:	e0 91 16 01 	lds	r30, 0x0116
    130e:	f0 91 17 01 	lds	r31, 0x0117
    1312:	8d e2       	ldi	r24, 0x2D	; 45
    1314:	09 95       	icall
    1316:	a8 cf       	rjmp	.-176    	; 0x1268 <rprintf1RamRom+0xe8>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    1318:	9a e0       	ldi	r25, 0x0A	; 10
    131a:	a9 2e       	mov	r10, r25
    131c:	b1 2c       	mov	r11, r1
    131e:	00 e1       	ldi	r16, 0x10	; 16
    1320:	17 e2       	ldi	r17, 0x27	; 39
    1322:	d7 cf       	rjmp	.-82     	; 0x12d2 <rprintf1RamRom+0x152>

00001324 <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, uartRxData, UART_RX_BUFFER_SIZE);
    1324:	40 e4       	ldi	r20, 0x40	; 64
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	6a e5       	ldi	r22, 0x5A	; 90
    132a:	71 e0       	ldi	r23, 0x01	; 1
    132c:	81 eb       	ldi	r24, 0xB1	; 177
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	9f d6       	rcall	.+3390   	; 0x2070 <__data_load_end+0x1f2>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, uartTxData, UART_TX_BUFFER_SIZE);
    1332:	40 e4       	ldi	r20, 0x40	; 64
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	6a e1       	ldi	r22, 0x1A	; 26
    1338:	71 e0       	ldi	r23, 0x01	; 1
    133a:	8a eb       	ldi	r24, 0xBA	; 186
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	98 c6       	rjmp	.+3376   	; 0x2070 <__data_load_end+0x1f2>

00001340 <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
    1340:	f1 df       	rcall	.-30     	; 0x1324 <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
    1342:	10 92 19 01 	sts	0x0119, r1
    1346:	10 92 18 01 	sts	0x0118, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    134a:	88 ed       	ldi	r24, 0xD8	; 216
    134c:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
    134e:	87 e6       	ldi	r24, 0x67	; 103
    1350:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    1352:	10 bc       	out	0x20, r1	; 32
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	80 93 b0 01 	sts	0x01B0, r24
	uartBufferedTx = FALSE;
    135a:	10 92 b9 01 	sts	0x01B9, r1
	// clear overflow count
	uartRxOverflow = 0;
    135e:	10 92 c3 01 	sts	0x01C3, r1
    1362:	10 92 c2 01 	sts	0x01C2, r1
	// enable interrupts
	sei();
    1366:	78 94       	sei
    1368:	08 95       	ret

0000136a <uartSetRxHandler>:

// redirects received data to a user function
void uartSetRxHandler(void (*rx_func)(unsigned char c))
{
	// set the receive interrupt to run the supplied user function
	UartRxFunc = rx_func;
    136a:	90 93 19 01 	sts	0x0119, r25
    136e:	80 93 18 01 	sts	0x0118, r24
    1372:	08 95       	ret

00001374 <uartSetBaudRate>:
}

// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	8b 01       	movw	r16, r22
    137a:	9c 01       	movw	r18, r24
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
    137c:	60 5c       	subi	r22, 0xC0	; 192
    137e:	7d 4b       	sbci	r23, 0xBD	; 189
    1380:	80 4f       	sbci	r24, 0xF0	; 240
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	66 0f       	add	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	88 1f       	adc	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	66 0f       	add	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	a9 01       	movw	r20, r18
    139e:	98 01       	movw	r18, r16
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	44 1f       	adc	r20, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	22 0f       	add	r18, r18
    13aa:	33 1f       	adc	r19, r19
    13ac:	44 1f       	adc	r20, r20
    13ae:	55 1f       	adc	r21, r21
    13b0:	22 0f       	add	r18, r18
    13b2:	33 1f       	adc	r19, r19
    13b4:	44 1f       	adc	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	22 0f       	add	r18, r18
    13ba:	33 1f       	adc	r19, r19
    13bc:	44 1f       	adc	r20, r20
    13be:	55 1f       	adc	r21, r21
    13c0:	f0 d0       	rcall	.+480    	; 0x15a2 <__udivmodsi4>
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	31 09       	sbc	r19, r1
	outb(UBRRL, bauddiv);
    13c6:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
    13c8:	30 bd       	out	0x20, r19	; 32
	#endif
}
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <uartGetRxBuffer>:
// returns the receive buffer structure 
cBuffer* uartGetRxBuffer(void)
{
	// return rx buffer pointer
	return &uartRxBuffer;
}
    13d0:	81 eb       	ldi	r24, 0xB1	; 177
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	08 95       	ret

000013d6 <uartGetTxBuffer>:
// returns the transmit buffer structure 
cBuffer* uartGetTxBuffer(void)
{
	// return tx buffer pointer
	return &uartTxBuffer;
}
    13d6:	8a eb       	ldi	r24, 0xBA	; 186
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	08 95       	ret

000013dc <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    13dc:	90 91 b0 01 	lds	r25, 0x01B0
    13e0:	99 23       	and	r25, r25
    13e2:	e1 f3       	breq	.-8      	; 0x13dc <uartSendByte>
	// send byte
	outb(UDR, txData);
    13e4:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    13e6:	10 92 b0 01 	sts	0x01B0, r1
    13ea:	08 95       	ret

000013ec <uartReceiveByte>:
		return -1;
}

// gets a byte (if available) from the uart receive buffer
u08 uartReceiveByte(u08* rxData)
{
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
	// make sure we have a receive buffer
	if(uartRxBuffer.size)
    13f2:	20 91 b3 01 	lds	r18, 0x01B3
    13f6:	30 91 b4 01 	lds	r19, 0x01B4
    13fa:	23 2b       	or	r18, r19
    13fc:	31 f0       	breq	.+12     	; 0x140a <uartReceiveByte+0x1e>
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
    13fe:	80 91 b5 01 	lds	r24, 0x01B5
    1402:	90 91 b6 01 	lds	r25, 0x01B6
    1406:	89 2b       	or	r24, r25
    1408:	21 f4       	brne	.+8      	; 0x1412 <uartReceiveByte+0x26>
		}
	}
	else
	{
		// no buffer
		return FALSE;
    140a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret
	{
		// make sure we have data
		if(uartRxBuffer.datalength)
		{
			// get byte from beginning of buffer
			*rxData = bufferGetFromFront(&uartRxBuffer);
    1412:	81 eb       	ldi	r24, 0xB1	; 177
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	39 d6       	rcall	.+3186   	; 0x208a <__data_load_end+0x20c>
    1418:	88 83       	st	Y, r24
			return TRUE;
    141a:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		// no buffer
		return FALSE;
	}
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <uartGetByte>:
	uartReadyTx = FALSE;
}

// gets a single byte from the uart receive buffer (getchar-style)
int uartGetByte(void)
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	1f 92       	push	r1
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	if(uartReceiveByte(&c))
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	dd df       	rcall	.-70     	; 0x13ec <uartReceiveByte>
    1432:	88 23       	and	r24, r24
    1434:	31 f0       	breq	.+12     	; 0x1442 <uartGetByte+0x20>
		return c;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	90 e0       	ldi	r25, 0x00	; 0
	else
		return -1;
}
    143a:	0f 90       	pop	r0
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret
{
	u08 c;
	if(uartReceiveByte(&c))
		return c;
	else
		return -1;
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	9f ef       	ldi	r25, 0xFF	; 255
    1446:	f9 cf       	rjmp	.-14     	; 0x143a <uartGetByte+0x18>

00001448 <uartFlushReceiveBuffer>:
void uartFlushReceiveBuffer(void)
{
	// flush all data from receive buffer
	//bufferFlush(&uartRxBuffer);
	// same effect as above
	uartRxBuffer.datalength = 0;
    1448:	10 92 b6 01 	sts	0x01B6, r1
    144c:	10 92 b5 01 	sts	0x01B5, r1
    1450:	08 95       	ret

00001452 <uartReceiveBufferIsEmpty>:
}

// return true if uart receive buffer is empty
u08 uartReceiveBufferIsEmpty(void)
{
	if(uartRxBuffer.datalength == 0)
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	20 91 b5 01 	lds	r18, 0x01B5
    1458:	30 91 b6 01 	lds	r19, 0x01B6
    145c:	23 2b       	or	r18, r19
    145e:	09 f0       	breq	.+2      	; 0x1462 <uartReceiveBufferIsEmpty+0x10>
    1460:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
    1462:	81 95       	neg	r24
    1464:	08 95       	ret

00001466 <uartAddToTxBuffer>:

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
    1466:	68 2f       	mov	r22, r24
    1468:	8a eb       	ldi	r24, 0xBA	; 186
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	68 c6       	rjmp	.+3280   	; 0x213e <__data_load_end+0x2c0>

0000146e <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	80 93 b9 01 	sts	0x01B9, r24
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
    1474:	8a eb       	ldi	r24, 0xBA	; 186
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	08 d6       	rcall	.+3088   	; 0x208a <__data_load_end+0x20c>

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
    147a:	90 91 b0 01 	lds	r25, 0x01B0
    147e:	99 23       	and	r25, r25
    1480:	e1 f3       	breq	.-8      	; 0x147a <uartSendTxBuffer+0xc>
	// send byte
	outb(UDR, txData);
    1482:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
    1484:	10 92 b0 01 	sts	0x01B0, r1
    1488:	08 95       	ret

0000148a <__vector_13>:
	}
}
*/
// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS)
{
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
	// check if buffered tx is enabled
	if(uartBufferedTx)
    14ac:	80 91 b9 01 	lds	r24, 0x01B9
    14b0:	88 23       	and	r24, r24
    14b2:	61 f0       	breq	.+24     	; 0x14cc <__vector_13+0x42>
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
    14b4:	80 91 be 01 	lds	r24, 0x01BE
    14b8:	90 91 bf 01 	lds	r25, 0x01BF
    14bc:	89 2b       	or	r24, r25
    14be:	d1 f4       	brne	.+52     	; 0x14f4 <__vector_13+0x6a>
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
    14c0:	10 92 b9 01 	sts	0x01B9, r1
			// return to ready state
			uartReadyTx = TRUE;
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	80 93 b0 01 	sts	0x01B0, r24
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <__vector_13+0x48>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	80 93 b0 01 	sts	0x01B0, r24
	}
}
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti
	{
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
		{
			// send byte from top of buffer
			outb(UDR, bufferGetFromFront(&uartTxBuffer));
    14f4:	8a eb       	ldi	r24, 0xBA	; 186
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	c8 d5       	rcall	.+2960   	; 0x208a <__data_load_end+0x20c>
    14fa:	8c b9       	out	0x0c, r24	; 12
    14fc:	ea cf       	rjmp	.-44     	; 0x14d2 <__vector_13+0x48>

000014fe <__vector_11>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
	u08 c;
	
	// get received char
	c = inb(UDR);
    1520:	8c b1       	in	r24, 0x0c	; 12

	// if there's a user function to handle this receive event
	if(UartRxFunc)
    1522:	20 91 18 01 	lds	r18, 0x0118
    1526:	30 91 19 01 	lds	r19, 0x0119
    152a:	23 2b       	or	r18, r19
    152c:	b1 f0       	breq	.+44     	; 0x155a <__vector_11+0x5c>
	{
		// call it and pass the received data
		UartRxFunc(c);
    152e:	e0 91 18 01 	lds	r30, 0x0118
    1532:	f0 91 19 01 	lds	r31, 0x0119
    1536:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
    1538:	ff 91       	pop	r31
    153a:	ef 91       	pop	r30
    153c:	bf 91       	pop	r27
    153e:	af 91       	pop	r26
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	7f 91       	pop	r23
    1546:	6f 91       	pop	r22
    1548:	5f 91       	pop	r21
    154a:	4f 91       	pop	r20
    154c:	3f 91       	pop	r19
    154e:	2f 91       	pop	r18
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
    155a:	68 2f       	mov	r22, r24
    155c:	81 eb       	ldi	r24, 0xB1	; 177
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	ee d5       	rcall	.+3036   	; 0x213e <__data_load_end+0x2c0>
    1562:	81 11       	cpse	r24, r1
    1564:	e9 cf       	rjmp	.-46     	; 0x1538 <__vector_11+0x3a>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
    1566:	80 91 c2 01 	lds	r24, 0x01C2
    156a:	90 91 c3 01 	lds	r25, 0x01C3
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	90 93 c3 01 	sts	0x01C3, r25
    1574:	80 93 c2 01 	sts	0x01C2, r24
    1578:	df cf       	rjmp	.-66     	; 0x1538 <__vector_11+0x3a>

0000157a <__udivmodhi4>:
    157a:	aa 1b       	sub	r26, r26
    157c:	bb 1b       	sub	r27, r27
    157e:	51 e1       	ldi	r21, 0x11	; 17
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <__udivmodhi4_ep>

00001582 <__udivmodhi4_loop>:
    1582:	aa 1f       	adc	r26, r26
    1584:	bb 1f       	adc	r27, r27
    1586:	a6 17       	cp	r26, r22
    1588:	b7 07       	cpc	r27, r23
    158a:	10 f0       	brcs	.+4      	; 0x1590 <__udivmodhi4_ep>
    158c:	a6 1b       	sub	r26, r22
    158e:	b7 0b       	sbc	r27, r23

00001590 <__udivmodhi4_ep>:
    1590:	88 1f       	adc	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	5a 95       	dec	r21
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__udivmodhi4_loop>
    1598:	80 95       	com	r24
    159a:	90 95       	com	r25
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	08 95       	ret

000015a2 <__udivmodsi4>:
    15a2:	a1 e2       	ldi	r26, 0x21	; 33
    15a4:	1a 2e       	mov	r1, r26
    15a6:	aa 1b       	sub	r26, r26
    15a8:	bb 1b       	sub	r27, r27
    15aa:	fd 01       	movw	r30, r26
    15ac:	0d c0       	rjmp	.+26     	; 0x15c8 <__udivmodsi4_ep>

000015ae <__udivmodsi4_loop>:
    15ae:	aa 1f       	adc	r26, r26
    15b0:	bb 1f       	adc	r27, r27
    15b2:	ee 1f       	adc	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	a2 17       	cp	r26, r18
    15b8:	b3 07       	cpc	r27, r19
    15ba:	e4 07       	cpc	r30, r20
    15bc:	f5 07       	cpc	r31, r21
    15be:	20 f0       	brcs	.+8      	; 0x15c8 <__udivmodsi4_ep>
    15c0:	a2 1b       	sub	r26, r18
    15c2:	b3 0b       	sbc	r27, r19
    15c4:	e4 0b       	sbc	r30, r20
    15c6:	f5 0b       	sbc	r31, r21

000015c8 <__udivmodsi4_ep>:
    15c8:	66 1f       	adc	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	1a 94       	dec	r1
    15d2:	69 f7       	brne	.-38     	; 0x15ae <__udivmodsi4_loop>
    15d4:	60 95       	com	r22
    15d6:	70 95       	com	r23
    15d8:	80 95       	com	r24
    15da:	90 95       	com	r25
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	bd 01       	movw	r22, r26
    15e2:	cf 01       	movw	r24, r30
    15e4:	08 95       	ret

000015e6 <__umulhisi3>:
    15e6:	a2 9f       	mul	r26, r18
    15e8:	b0 01       	movw	r22, r0
    15ea:	b3 9f       	mul	r27, r19
    15ec:	c0 01       	movw	r24, r0
    15ee:	a3 9f       	mul	r26, r19
    15f0:	01 d0       	rcall	.+2      	; 0x15f4 <__umulhisi3+0xe>
    15f2:	b2 9f       	mul	r27, r18
    15f4:	70 0d       	add	r23, r0
    15f6:	81 1d       	adc	r24, r1
    15f8:	11 24       	eor	r1, r1
    15fa:	91 1d       	adc	r25, r1
    15fc:	08 95       	ret

000015fe <malloc>:
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	91 05       	cpc	r25, r1
    1606:	10 f4       	brcc	.+4      	; 0x160c <malloc+0xe>
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	e0 91 c6 01 	lds	r30, 0x01C6
    1610:	f0 91 c7 01 	lds	r31, 0x01C7
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	a0 e0       	ldi	r26, 0x00	; 0
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	30 97       	sbiw	r30, 0x00	; 0
    161e:	39 f1       	breq	.+78     	; 0x166e <malloc+0x70>
    1620:	40 81       	ld	r20, Z
    1622:	51 81       	ldd	r21, Z+1	; 0x01
    1624:	48 17       	cp	r20, r24
    1626:	59 07       	cpc	r21, r25
    1628:	b8 f0       	brcs	.+46     	; 0x1658 <malloc+0x5a>
    162a:	48 17       	cp	r20, r24
    162c:	59 07       	cpc	r21, r25
    162e:	71 f4       	brne	.+28     	; 0x164c <malloc+0x4e>
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	10 97       	sbiw	r26, 0x00	; 0
    1636:	29 f0       	breq	.+10     	; 0x1642 <malloc+0x44>
    1638:	13 96       	adiw	r26, 0x03	; 3
    163a:	9c 93       	st	X, r25
    163c:	8e 93       	st	-X, r24
    163e:	12 97       	sbiw	r26, 0x02	; 2
    1640:	2c c0       	rjmp	.+88     	; 0x169a <malloc+0x9c>
    1642:	90 93 c7 01 	sts	0x01C7, r25
    1646:	80 93 c6 01 	sts	0x01C6, r24
    164a:	27 c0       	rjmp	.+78     	; 0x169a <malloc+0x9c>
    164c:	21 15       	cp	r18, r1
    164e:	31 05       	cpc	r19, r1
    1650:	31 f0       	breq	.+12     	; 0x165e <malloc+0x60>
    1652:	42 17       	cp	r20, r18
    1654:	53 07       	cpc	r21, r19
    1656:	18 f0       	brcs	.+6      	; 0x165e <malloc+0x60>
    1658:	a9 01       	movw	r20, r18
    165a:	db 01       	movw	r26, r22
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <malloc+0x62>
    165e:	ef 01       	movw	r28, r30
    1660:	9a 01       	movw	r18, r20
    1662:	bd 01       	movw	r22, r26
    1664:	df 01       	movw	r26, r30
    1666:	02 80       	ldd	r0, Z+2	; 0x02
    1668:	f3 81       	ldd	r31, Z+3	; 0x03
    166a:	e0 2d       	mov	r30, r0
    166c:	d7 cf       	rjmp	.-82     	; 0x161c <malloc+0x1e>
    166e:	21 15       	cp	r18, r1
    1670:	31 05       	cpc	r19, r1
    1672:	f9 f0       	breq	.+62     	; 0x16b2 <malloc+0xb4>
    1674:	28 1b       	sub	r18, r24
    1676:	39 0b       	sbc	r19, r25
    1678:	24 30       	cpi	r18, 0x04	; 4
    167a:	31 05       	cpc	r19, r1
    167c:	80 f4       	brcc	.+32     	; 0x169e <malloc+0xa0>
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	9b 81       	ldd	r25, Y+3	; 0x03
    1682:	61 15       	cp	r22, r1
    1684:	71 05       	cpc	r23, r1
    1686:	21 f0       	breq	.+8      	; 0x1690 <malloc+0x92>
    1688:	fb 01       	movw	r30, r22
    168a:	93 83       	std	Z+3, r25	; 0x03
    168c:	82 83       	std	Z+2, r24	; 0x02
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <malloc+0x9a>
    1690:	90 93 c7 01 	sts	0x01C7, r25
    1694:	80 93 c6 01 	sts	0x01C6, r24
    1698:	fe 01       	movw	r30, r28
    169a:	32 96       	adiw	r30, 0x02	; 2
    169c:	44 c0       	rjmp	.+136    	; 0x1726 <malloc+0x128>
    169e:	fe 01       	movw	r30, r28
    16a0:	e2 0f       	add	r30, r18
    16a2:	f3 1f       	adc	r31, r19
    16a4:	81 93       	st	Z+, r24
    16a6:	91 93       	st	Z+, r25
    16a8:	22 50       	subi	r18, 0x02	; 2
    16aa:	31 09       	sbc	r19, r1
    16ac:	39 83       	std	Y+1, r19	; 0x01
    16ae:	28 83       	st	Y, r18
    16b0:	3a c0       	rjmp	.+116    	; 0x1726 <malloc+0x128>
    16b2:	20 91 c4 01 	lds	r18, 0x01C4
    16b6:	30 91 c5 01 	lds	r19, 0x01C5
    16ba:	23 2b       	or	r18, r19
    16bc:	41 f4       	brne	.+16     	; 0x16ce <malloc+0xd0>
    16be:	20 91 62 00 	lds	r18, 0x0062
    16c2:	30 91 63 00 	lds	r19, 0x0063
    16c6:	30 93 c5 01 	sts	0x01C5, r19
    16ca:	20 93 c4 01 	sts	0x01C4, r18
    16ce:	20 91 60 00 	lds	r18, 0x0060
    16d2:	30 91 61 00 	lds	r19, 0x0061
    16d6:	21 15       	cp	r18, r1
    16d8:	31 05       	cpc	r19, r1
    16da:	41 f4       	brne	.+16     	; 0x16ec <malloc+0xee>
    16dc:	2d b7       	in	r18, 0x3d	; 61
    16de:	3e b7       	in	r19, 0x3e	; 62
    16e0:	40 91 64 00 	lds	r20, 0x0064
    16e4:	50 91 65 00 	lds	r21, 0x0065
    16e8:	24 1b       	sub	r18, r20
    16ea:	35 0b       	sbc	r19, r21
    16ec:	e0 91 c4 01 	lds	r30, 0x01C4
    16f0:	f0 91 c5 01 	lds	r31, 0x01C5
    16f4:	e2 17       	cp	r30, r18
    16f6:	f3 07       	cpc	r31, r19
    16f8:	a0 f4       	brcc	.+40     	; 0x1722 <malloc+0x124>
    16fa:	2e 1b       	sub	r18, r30
    16fc:	3f 0b       	sbc	r19, r31
    16fe:	28 17       	cp	r18, r24
    1700:	39 07       	cpc	r19, r25
    1702:	78 f0       	brcs	.+30     	; 0x1722 <malloc+0x124>
    1704:	ac 01       	movw	r20, r24
    1706:	4e 5f       	subi	r20, 0xFE	; 254
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	24 17       	cp	r18, r20
    170c:	35 07       	cpc	r19, r21
    170e:	48 f0       	brcs	.+18     	; 0x1722 <malloc+0x124>
    1710:	4e 0f       	add	r20, r30
    1712:	5f 1f       	adc	r21, r31
    1714:	50 93 c5 01 	sts	0x01C5, r21
    1718:	40 93 c4 01 	sts	0x01C4, r20
    171c:	81 93       	st	Z+, r24
    171e:	91 93       	st	Z+, r25
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <malloc+0x128>
    1722:	e0 e0       	ldi	r30, 0x00	; 0
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	cf 01       	movw	r24, r30
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <free>:
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	09 f4       	brne	.+2      	; 0x1738 <free+0xa>
    1736:	87 c0       	rjmp	.+270    	; 0x1846 <free+0x118>
    1738:	fc 01       	movw	r30, r24
    173a:	32 97       	sbiw	r30, 0x02	; 2
    173c:	13 82       	std	Z+3, r1	; 0x03
    173e:	12 82       	std	Z+2, r1	; 0x02
    1740:	c0 91 c6 01 	lds	r28, 0x01C6
    1744:	d0 91 c7 01 	lds	r29, 0x01C7
    1748:	20 97       	sbiw	r28, 0x00	; 0
    174a:	81 f4       	brne	.+32     	; 0x176c <free+0x3e>
    174c:	20 81       	ld	r18, Z
    174e:	31 81       	ldd	r19, Z+1	; 0x01
    1750:	28 0f       	add	r18, r24
    1752:	39 1f       	adc	r19, r25
    1754:	80 91 c4 01 	lds	r24, 0x01C4
    1758:	90 91 c5 01 	lds	r25, 0x01C5
    175c:	82 17       	cp	r24, r18
    175e:	93 07       	cpc	r25, r19
    1760:	79 f5       	brne	.+94     	; 0x17c0 <free+0x92>
    1762:	f0 93 c5 01 	sts	0x01C5, r31
    1766:	e0 93 c4 01 	sts	0x01C4, r30
    176a:	6d c0       	rjmp	.+218    	; 0x1846 <free+0x118>
    176c:	de 01       	movw	r26, r28
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	ae 17       	cp	r26, r30
    1774:	bf 07       	cpc	r27, r31
    1776:	50 f4       	brcc	.+20     	; 0x178c <free+0x5e>
    1778:	12 96       	adiw	r26, 0x02	; 2
    177a:	4d 91       	ld	r20, X+
    177c:	5c 91       	ld	r21, X
    177e:	13 97       	sbiw	r26, 0x03	; 3
    1780:	9d 01       	movw	r18, r26
    1782:	41 15       	cp	r20, r1
    1784:	51 05       	cpc	r21, r1
    1786:	09 f1       	breq	.+66     	; 0x17ca <free+0x9c>
    1788:	da 01       	movw	r26, r20
    178a:	f3 cf       	rjmp	.-26     	; 0x1772 <free+0x44>
    178c:	b3 83       	std	Z+3, r27	; 0x03
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	84 0f       	add	r24, r20
    1796:	95 1f       	adc	r25, r21
    1798:	8a 17       	cp	r24, r26
    179a:	9b 07       	cpc	r25, r27
    179c:	71 f4       	brne	.+28     	; 0x17ba <free+0x8c>
    179e:	8d 91       	ld	r24, X+
    17a0:	9c 91       	ld	r25, X
    17a2:	11 97       	sbiw	r26, 0x01	; 1
    17a4:	84 0f       	add	r24, r20
    17a6:	95 1f       	adc	r25, r21
    17a8:	02 96       	adiw	r24, 0x02	; 2
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	80 83       	st	Z, r24
    17ae:	12 96       	adiw	r26, 0x02	; 2
    17b0:	8d 91       	ld	r24, X+
    17b2:	9c 91       	ld	r25, X
    17b4:	13 97       	sbiw	r26, 0x03	; 3
    17b6:	93 83       	std	Z+3, r25	; 0x03
    17b8:	82 83       	std	Z+2, r24	; 0x02
    17ba:	21 15       	cp	r18, r1
    17bc:	31 05       	cpc	r19, r1
    17be:	29 f4       	brne	.+10     	; 0x17ca <free+0x9c>
    17c0:	f0 93 c7 01 	sts	0x01C7, r31
    17c4:	e0 93 c6 01 	sts	0x01C6, r30
    17c8:	3e c0       	rjmp	.+124    	; 0x1846 <free+0x118>
    17ca:	d9 01       	movw	r26, r18
    17cc:	13 96       	adiw	r26, 0x03	; 3
    17ce:	fc 93       	st	X, r31
    17d0:	ee 93       	st	-X, r30
    17d2:	12 97       	sbiw	r26, 0x02	; 2
    17d4:	4d 91       	ld	r20, X+
    17d6:	5d 91       	ld	r21, X+
    17d8:	a4 0f       	add	r26, r20
    17da:	b5 1f       	adc	r27, r21
    17dc:	ea 17       	cp	r30, r26
    17de:	fb 07       	cpc	r31, r27
    17e0:	79 f4       	brne	.+30     	; 0x1800 <free+0xd2>
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	84 0f       	add	r24, r20
    17e8:	95 1f       	adc	r25, r21
    17ea:	02 96       	adiw	r24, 0x02	; 2
    17ec:	d9 01       	movw	r26, r18
    17ee:	11 96       	adiw	r26, 0x01	; 1
    17f0:	9c 93       	st	X, r25
    17f2:	8e 93       	st	-X, r24
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	13 96       	adiw	r26, 0x03	; 3
    17fa:	9c 93       	st	X, r25
    17fc:	8e 93       	st	-X, r24
    17fe:	12 97       	sbiw	r26, 0x02	; 2
    1800:	e0 e0       	ldi	r30, 0x00	; 0
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	9b 81       	ldd	r25, Y+3	; 0x03
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	19 f0       	breq	.+6      	; 0x1812 <free+0xe4>
    180c:	fe 01       	movw	r30, r28
    180e:	ec 01       	movw	r28, r24
    1810:	f9 cf       	rjmp	.-14     	; 0x1804 <free+0xd6>
    1812:	ce 01       	movw	r24, r28
    1814:	02 96       	adiw	r24, 0x02	; 2
    1816:	28 81       	ld	r18, Y
    1818:	39 81       	ldd	r19, Y+1	; 0x01
    181a:	82 0f       	add	r24, r18
    181c:	93 1f       	adc	r25, r19
    181e:	20 91 c4 01 	lds	r18, 0x01C4
    1822:	30 91 c5 01 	lds	r19, 0x01C5
    1826:	28 17       	cp	r18, r24
    1828:	39 07       	cpc	r19, r25
    182a:	69 f4       	brne	.+26     	; 0x1846 <free+0x118>
    182c:	30 97       	sbiw	r30, 0x00	; 0
    182e:	29 f4       	brne	.+10     	; 0x183a <free+0x10c>
    1830:	10 92 c7 01 	sts	0x01C7, r1
    1834:	10 92 c6 01 	sts	0x01C6, r1
    1838:	02 c0       	rjmp	.+4      	; 0x183e <free+0x110>
    183a:	13 82       	std	Z+3, r1	; 0x03
    183c:	12 82       	std	Z+2, r1	; 0x02
    183e:	d0 93 c5 01 	sts	0x01C5, r29
    1842:	c0 93 c4 01 	sts	0x01C4, r28
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <snprintf>:
    184c:	ae e0       	ldi	r26, 0x0E	; 14
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e2       	ldi	r30, 0x2B	; 43
    1852:	fc e0       	ldi	r31, 0x0C	; 12
    1854:	9f c2       	rjmp	.+1342   	; 0x1d94 <__prologue_saves__+0x1c>
    1856:	0d 89       	ldd	r16, Y+21	; 0x15
    1858:	1e 89       	ldd	r17, Y+22	; 0x16
    185a:	8f 89       	ldd	r24, Y+23	; 0x17
    185c:	98 8d       	ldd	r25, Y+24	; 0x18
    185e:	26 e0       	ldi	r18, 0x06	; 6
    1860:	2c 83       	std	Y+4, r18	; 0x04
    1862:	1a 83       	std	Y+2, r17	; 0x02
    1864:	09 83       	std	Y+1, r16	; 0x01
    1866:	97 ff       	sbrs	r25, 7
    1868:	02 c0       	rjmp	.+4      	; 0x186e <snprintf+0x22>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e8       	ldi	r25, 0x80	; 128
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	ae 01       	movw	r20, r28
    1876:	45 5e       	subi	r20, 0xE5	; 229
    1878:	5f 4f       	sbci	r21, 0xFF	; 255
    187a:	69 8d       	ldd	r22, Y+25	; 0x19
    187c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	11 d0       	rcall	.+34     	; 0x18a6 <vfprintf>
    1884:	4d 81       	ldd	r20, Y+5	; 0x05
    1886:	5e 81       	ldd	r21, Y+6	; 0x06
    1888:	57 fd       	sbrc	r21, 7
    188a:	0a c0       	rjmp	.+20     	; 0x18a0 <snprintf+0x54>
    188c:	2f 81       	ldd	r18, Y+7	; 0x07
    188e:	38 85       	ldd	r19, Y+8	; 0x08
    1890:	42 17       	cp	r20, r18
    1892:	53 07       	cpc	r21, r19
    1894:	0c f4       	brge	.+2      	; 0x1898 <snprintf+0x4c>
    1896:	9a 01       	movw	r18, r20
    1898:	f8 01       	movw	r30, r16
    189a:	e2 0f       	add	r30, r18
    189c:	f3 1f       	adc	r31, r19
    189e:	10 82       	st	Z, r1
    18a0:	2e 96       	adiw	r28, 0x0e	; 14
    18a2:	e4 e0       	ldi	r30, 0x04	; 4
    18a4:	93 c2       	rjmp	.+1318   	; 0x1dcc <__epilogue_restores__+0x1c>

000018a6 <vfprintf>:
    18a6:	ac e0       	ldi	r26, 0x0C	; 12
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e8 e5       	ldi	r30, 0x58	; 88
    18ac:	fc e0       	ldi	r31, 0x0C	; 12
    18ae:	64 c2       	rjmp	.+1224   	; 0x1d78 <__prologue_saves__>
    18b0:	7c 01       	movw	r14, r24
    18b2:	6b 01       	movw	r12, r22
    18b4:	8a 01       	movw	r16, r20
    18b6:	fc 01       	movw	r30, r24
    18b8:	17 82       	std	Z+7, r1	; 0x07
    18ba:	16 82       	std	Z+6, r1	; 0x06
    18bc:	83 81       	ldd	r24, Z+3	; 0x03
    18be:	81 ff       	sbrs	r24, 1
    18c0:	b0 c1       	rjmp	.+864    	; 0x1c22 <vfprintf+0x37c>
    18c2:	ce 01       	movw	r24, r28
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	4c 01       	movw	r8, r24
    18c8:	f7 01       	movw	r30, r14
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	f6 01       	movw	r30, r12
    18ce:	93 fd       	sbrc	r25, 3
    18d0:	85 91       	lpm	r24, Z+
    18d2:	93 ff       	sbrs	r25, 3
    18d4:	81 91       	ld	r24, Z+
    18d6:	6f 01       	movw	r12, r30
    18d8:	88 23       	and	r24, r24
    18da:	09 f4       	brne	.+2      	; 0x18de <vfprintf+0x38>
    18dc:	9e c1       	rjmp	.+828    	; 0x1c1a <vfprintf+0x374>
    18de:	85 32       	cpi	r24, 0x25	; 37
    18e0:	39 f4       	brne	.+14     	; 0x18f0 <vfprintf+0x4a>
    18e2:	93 fd       	sbrc	r25, 3
    18e4:	85 91       	lpm	r24, Z+
    18e6:	93 ff       	sbrs	r25, 3
    18e8:	81 91       	ld	r24, Z+
    18ea:	6f 01       	movw	r12, r30
    18ec:	85 32       	cpi	r24, 0x25	; 37
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <vfprintf+0x52>
    18f0:	b7 01       	movw	r22, r14
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	b1 d1       	rcall	.+866    	; 0x1c58 <fputc>
    18f6:	e8 cf       	rjmp	.-48     	; 0x18c8 <vfprintf+0x22>
    18f8:	51 2c       	mov	r5, r1
    18fa:	31 2c       	mov	r3, r1
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	20 32       	cpi	r18, 0x20	; 32
    1900:	a0 f4       	brcc	.+40     	; 0x192a <vfprintf+0x84>
    1902:	8b 32       	cpi	r24, 0x2B	; 43
    1904:	69 f0       	breq	.+26     	; 0x1920 <vfprintf+0x7a>
    1906:	30 f4       	brcc	.+12     	; 0x1914 <vfprintf+0x6e>
    1908:	80 32       	cpi	r24, 0x20	; 32
    190a:	59 f0       	breq	.+22     	; 0x1922 <vfprintf+0x7c>
    190c:	83 32       	cpi	r24, 0x23	; 35
    190e:	69 f4       	brne	.+26     	; 0x192a <vfprintf+0x84>
    1910:	20 61       	ori	r18, 0x10	; 16
    1912:	2c c0       	rjmp	.+88     	; 0x196c <vfprintf+0xc6>
    1914:	8d 32       	cpi	r24, 0x2D	; 45
    1916:	39 f0       	breq	.+14     	; 0x1926 <vfprintf+0x80>
    1918:	80 33       	cpi	r24, 0x30	; 48
    191a:	39 f4       	brne	.+14     	; 0x192a <vfprintf+0x84>
    191c:	21 60       	ori	r18, 0x01	; 1
    191e:	26 c0       	rjmp	.+76     	; 0x196c <vfprintf+0xc6>
    1920:	22 60       	ori	r18, 0x02	; 2
    1922:	24 60       	ori	r18, 0x04	; 4
    1924:	23 c0       	rjmp	.+70     	; 0x196c <vfprintf+0xc6>
    1926:	28 60       	ori	r18, 0x08	; 8
    1928:	21 c0       	rjmp	.+66     	; 0x196c <vfprintf+0xc6>
    192a:	27 fd       	sbrc	r18, 7
    192c:	27 c0       	rjmp	.+78     	; 0x197c <vfprintf+0xd6>
    192e:	30 ed       	ldi	r19, 0xD0	; 208
    1930:	38 0f       	add	r19, r24
    1932:	3a 30       	cpi	r19, 0x0A	; 10
    1934:	78 f4       	brcc	.+30     	; 0x1954 <vfprintf+0xae>
    1936:	26 ff       	sbrs	r18, 6
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <vfprintf+0xa0>
    193a:	fa e0       	ldi	r31, 0x0A	; 10
    193c:	5f 9e       	mul	r5, r31
    193e:	30 0d       	add	r19, r0
    1940:	11 24       	eor	r1, r1
    1942:	53 2e       	mov	r5, r19
    1944:	13 c0       	rjmp	.+38     	; 0x196c <vfprintf+0xc6>
    1946:	8a e0       	ldi	r24, 0x0A	; 10
    1948:	38 9e       	mul	r3, r24
    194a:	30 0d       	add	r19, r0
    194c:	11 24       	eor	r1, r1
    194e:	33 2e       	mov	r3, r19
    1950:	20 62       	ori	r18, 0x20	; 32
    1952:	0c c0       	rjmp	.+24     	; 0x196c <vfprintf+0xc6>
    1954:	8e 32       	cpi	r24, 0x2E	; 46
    1956:	21 f4       	brne	.+8      	; 0x1960 <vfprintf+0xba>
    1958:	26 fd       	sbrc	r18, 6
    195a:	5f c1       	rjmp	.+702    	; 0x1c1a <vfprintf+0x374>
    195c:	20 64       	ori	r18, 0x40	; 64
    195e:	06 c0       	rjmp	.+12     	; 0x196c <vfprintf+0xc6>
    1960:	8c 36       	cpi	r24, 0x6C	; 108
    1962:	11 f4       	brne	.+4      	; 0x1968 <vfprintf+0xc2>
    1964:	20 68       	ori	r18, 0x80	; 128
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0xc6>
    1968:	88 36       	cpi	r24, 0x68	; 104
    196a:	41 f4       	brne	.+16     	; 0x197c <vfprintf+0xd6>
    196c:	f6 01       	movw	r30, r12
    196e:	93 fd       	sbrc	r25, 3
    1970:	85 91       	lpm	r24, Z+
    1972:	93 ff       	sbrs	r25, 3
    1974:	81 91       	ld	r24, Z+
    1976:	6f 01       	movw	r12, r30
    1978:	81 11       	cpse	r24, r1
    197a:	c1 cf       	rjmp	.-126    	; 0x18fe <vfprintf+0x58>
    197c:	98 2f       	mov	r25, r24
    197e:	9f 7d       	andi	r25, 0xDF	; 223
    1980:	95 54       	subi	r25, 0x45	; 69
    1982:	93 30       	cpi	r25, 0x03	; 3
    1984:	28 f4       	brcc	.+10     	; 0x1990 <vfprintf+0xea>
    1986:	0c 5f       	subi	r16, 0xFC	; 252
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	ff e3       	ldi	r31, 0x3F	; 63
    198c:	f9 83       	std	Y+1, r31	; 0x01
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <vfprintf+0x104>
    1990:	83 36       	cpi	r24, 0x63	; 99
    1992:	31 f0       	breq	.+12     	; 0x19a0 <vfprintf+0xfa>
    1994:	83 37       	cpi	r24, 0x73	; 115
    1996:	71 f0       	breq	.+28     	; 0x19b4 <vfprintf+0x10e>
    1998:	83 35       	cpi	r24, 0x53	; 83
    199a:	09 f0       	breq	.+2      	; 0x199e <vfprintf+0xf8>
    199c:	57 c0       	rjmp	.+174    	; 0x1a4c <vfprintf+0x1a6>
    199e:	21 c0       	rjmp	.+66     	; 0x19e2 <vfprintf+0x13c>
    19a0:	f8 01       	movw	r30, r16
    19a2:	80 81       	ld	r24, Z
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	0e 5f       	subi	r16, 0xFE	; 254
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	44 24       	eor	r4, r4
    19ac:	43 94       	inc	r4
    19ae:	51 2c       	mov	r5, r1
    19b0:	54 01       	movw	r10, r8
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <vfprintf+0x136>
    19b4:	38 01       	movw	r6, r16
    19b6:	f2 e0       	ldi	r31, 0x02	; 2
    19b8:	6f 0e       	add	r6, r31
    19ba:	71 1c       	adc	r7, r1
    19bc:	f8 01       	movw	r30, r16
    19be:	a0 80       	ld	r10, Z
    19c0:	b1 80       	ldd	r11, Z+1	; 0x01
    19c2:	26 ff       	sbrs	r18, 6
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <vfprintf+0x126>
    19c6:	65 2d       	mov	r22, r5
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <vfprintf+0x12a>
    19cc:	6f ef       	ldi	r22, 0xFF	; 255
    19ce:	7f ef       	ldi	r23, 0xFF	; 255
    19d0:	c5 01       	movw	r24, r10
    19d2:	2c 87       	std	Y+12, r18	; 0x0c
    19d4:	36 d1       	rcall	.+620    	; 0x1c42 <strnlen>
    19d6:	2c 01       	movw	r4, r24
    19d8:	83 01       	movw	r16, r6
    19da:	2c 85       	ldd	r18, Y+12	; 0x0c
    19dc:	2f 77       	andi	r18, 0x7F	; 127
    19de:	22 2e       	mov	r2, r18
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <vfprintf+0x168>
    19e2:	38 01       	movw	r6, r16
    19e4:	f2 e0       	ldi	r31, 0x02	; 2
    19e6:	6f 0e       	add	r6, r31
    19e8:	71 1c       	adc	r7, r1
    19ea:	f8 01       	movw	r30, r16
    19ec:	a0 80       	ld	r10, Z
    19ee:	b1 80       	ldd	r11, Z+1	; 0x01
    19f0:	26 ff       	sbrs	r18, 6
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <vfprintf+0x154>
    19f4:	65 2d       	mov	r22, r5
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <vfprintf+0x158>
    19fa:	6f ef       	ldi	r22, 0xFF	; 255
    19fc:	7f ef       	ldi	r23, 0xFF	; 255
    19fe:	c5 01       	movw	r24, r10
    1a00:	2c 87       	std	Y+12, r18	; 0x0c
    1a02:	14 d1       	rcall	.+552    	; 0x1c2c <strnlen_P>
    1a04:	2c 01       	movw	r4, r24
    1a06:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a08:	20 68       	ori	r18, 0x80	; 128
    1a0a:	22 2e       	mov	r2, r18
    1a0c:	83 01       	movw	r16, r6
    1a0e:	23 fc       	sbrc	r2, 3
    1a10:	19 c0       	rjmp	.+50     	; 0x1a44 <vfprintf+0x19e>
    1a12:	83 2d       	mov	r24, r3
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	48 16       	cp	r4, r24
    1a18:	59 06       	cpc	r5, r25
    1a1a:	a0 f4       	brcc	.+40     	; 0x1a44 <vfprintf+0x19e>
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	80 e2       	ldi	r24, 0x20	; 32
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	1a d1       	rcall	.+564    	; 0x1c58 <fputc>
    1a24:	3a 94       	dec	r3
    1a26:	f5 cf       	rjmp	.-22     	; 0x1a12 <vfprintf+0x16c>
    1a28:	f5 01       	movw	r30, r10
    1a2a:	27 fc       	sbrc	r2, 7
    1a2c:	85 91       	lpm	r24, Z+
    1a2e:	27 fe       	sbrs	r2, 7
    1a30:	81 91       	ld	r24, Z+
    1a32:	5f 01       	movw	r10, r30
    1a34:	b7 01       	movw	r22, r14
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	0f d1       	rcall	.+542    	; 0x1c58 <fputc>
    1a3a:	31 10       	cpse	r3, r1
    1a3c:	3a 94       	dec	r3
    1a3e:	f1 e0       	ldi	r31, 0x01	; 1
    1a40:	4f 1a       	sub	r4, r31
    1a42:	51 08       	sbc	r5, r1
    1a44:	41 14       	cp	r4, r1
    1a46:	51 04       	cpc	r5, r1
    1a48:	79 f7       	brne	.-34     	; 0x1a28 <vfprintf+0x182>
    1a4a:	de c0       	rjmp	.+444    	; 0x1c08 <vfprintf+0x362>
    1a4c:	84 36       	cpi	r24, 0x64	; 100
    1a4e:	11 f0       	breq	.+4      	; 0x1a54 <vfprintf+0x1ae>
    1a50:	89 36       	cpi	r24, 0x69	; 105
    1a52:	31 f5       	brne	.+76     	; 0x1aa0 <vfprintf+0x1fa>
    1a54:	f8 01       	movw	r30, r16
    1a56:	27 ff       	sbrs	r18, 7
    1a58:	07 c0       	rjmp	.+14     	; 0x1a68 <vfprintf+0x1c2>
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	0c 5f       	subi	r16, 0xFC	; 252
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <vfprintf+0x1d2>
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	88 27       	eor	r24, r24
    1a6e:	77 fd       	sbrc	r23, 7
    1a70:	80 95       	com	r24
    1a72:	98 2f       	mov	r25, r24
    1a74:	0e 5f       	subi	r16, 0xFE	; 254
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	2f 76       	andi	r18, 0x6F	; 111
    1a7a:	b2 2e       	mov	r11, r18
    1a7c:	97 ff       	sbrs	r25, 7
    1a7e:	09 c0       	rjmp	.+18     	; 0x1a92 <vfprintf+0x1ec>
    1a80:	90 95       	com	r25
    1a82:	80 95       	com	r24
    1a84:	70 95       	com	r23
    1a86:	61 95       	neg	r22
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	20 68       	ori	r18, 0x80	; 128
    1a90:	b2 2e       	mov	r11, r18
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	a4 01       	movw	r20, r8
    1a98:	11 d1       	rcall	.+546    	; 0x1cbc <__ultoa_invert>
    1a9a:	a8 2e       	mov	r10, r24
    1a9c:	a8 18       	sub	r10, r8
    1a9e:	43 c0       	rjmp	.+134    	; 0x1b26 <vfprintf+0x280>
    1aa0:	85 37       	cpi	r24, 0x75	; 117
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <vfprintf+0x208>
    1aa4:	2f 7e       	andi	r18, 0xEF	; 239
    1aa6:	b2 2e       	mov	r11, r18
    1aa8:	2a e0       	ldi	r18, 0x0A	; 10
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	25 c0       	rjmp	.+74     	; 0x1af8 <vfprintf+0x252>
    1aae:	f2 2f       	mov	r31, r18
    1ab0:	f9 7f       	andi	r31, 0xF9	; 249
    1ab2:	bf 2e       	mov	r11, r31
    1ab4:	8f 36       	cpi	r24, 0x6F	; 111
    1ab6:	c1 f0       	breq	.+48     	; 0x1ae8 <vfprintf+0x242>
    1ab8:	18 f4       	brcc	.+6      	; 0x1ac0 <vfprintf+0x21a>
    1aba:	88 35       	cpi	r24, 0x58	; 88
    1abc:	79 f0       	breq	.+30     	; 0x1adc <vfprintf+0x236>
    1abe:	ad c0       	rjmp	.+346    	; 0x1c1a <vfprintf+0x374>
    1ac0:	80 37       	cpi	r24, 0x70	; 112
    1ac2:	19 f0       	breq	.+6      	; 0x1aca <vfprintf+0x224>
    1ac4:	88 37       	cpi	r24, 0x78	; 120
    1ac6:	21 f0       	breq	.+8      	; 0x1ad0 <vfprintf+0x22a>
    1ac8:	a8 c0       	rjmp	.+336    	; 0x1c1a <vfprintf+0x374>
    1aca:	2f 2f       	mov	r18, r31
    1acc:	20 61       	ori	r18, 0x10	; 16
    1ace:	b2 2e       	mov	r11, r18
    1ad0:	b4 fe       	sbrs	r11, 4
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <vfprintf+0x248>
    1ad4:	8b 2d       	mov	r24, r11
    1ad6:	84 60       	ori	r24, 0x04	; 4
    1ad8:	b8 2e       	mov	r11, r24
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <vfprintf+0x248>
    1adc:	24 ff       	sbrs	r18, 4
    1ade:	0a c0       	rjmp	.+20     	; 0x1af4 <vfprintf+0x24e>
    1ae0:	9f 2f       	mov	r25, r31
    1ae2:	96 60       	ori	r25, 0x06	; 6
    1ae4:	b9 2e       	mov	r11, r25
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <vfprintf+0x24e>
    1ae8:	28 e0       	ldi	r18, 0x08	; 8
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <vfprintf+0x252>
    1aee:	20 e1       	ldi	r18, 0x10	; 16
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <vfprintf+0x252>
    1af4:	20 e1       	ldi	r18, 0x10	; 16
    1af6:	32 e0       	ldi	r19, 0x02	; 2
    1af8:	f8 01       	movw	r30, r16
    1afa:	b7 fe       	sbrs	r11, 7
    1afc:	07 c0       	rjmp	.+14     	; 0x1b0c <vfprintf+0x266>
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	0c 5f       	subi	r16, 0xFC	; 252
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <vfprintf+0x272>
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 5f       	subi	r16, 0xFE	; 254
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	a4 01       	movw	r20, r8
    1b1a:	d0 d0       	rcall	.+416    	; 0x1cbc <__ultoa_invert>
    1b1c:	a8 2e       	mov	r10, r24
    1b1e:	a8 18       	sub	r10, r8
    1b20:	fb 2d       	mov	r31, r11
    1b22:	ff 77       	andi	r31, 0x7F	; 127
    1b24:	bf 2e       	mov	r11, r31
    1b26:	b6 fe       	sbrs	r11, 6
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <vfprintf+0x29a>
    1b2a:	2b 2d       	mov	r18, r11
    1b2c:	2e 7f       	andi	r18, 0xFE	; 254
    1b2e:	a5 14       	cp	r10, r5
    1b30:	50 f4       	brcc	.+20     	; 0x1b46 <vfprintf+0x2a0>
    1b32:	b4 fe       	sbrs	r11, 4
    1b34:	0a c0       	rjmp	.+20     	; 0x1b4a <vfprintf+0x2a4>
    1b36:	b2 fc       	sbrc	r11, 2
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <vfprintf+0x2a4>
    1b3a:	2b 2d       	mov	r18, r11
    1b3c:	2e 7e       	andi	r18, 0xEE	; 238
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <vfprintf+0x2a4>
    1b40:	7a 2c       	mov	r7, r10
    1b42:	2b 2d       	mov	r18, r11
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <vfprintf+0x2a6>
    1b46:	7a 2c       	mov	r7, r10
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <vfprintf+0x2a6>
    1b4a:	75 2c       	mov	r7, r5
    1b4c:	24 ff       	sbrs	r18, 4
    1b4e:	0d c0       	rjmp	.+26     	; 0x1b6a <vfprintf+0x2c4>
    1b50:	fe 01       	movw	r30, r28
    1b52:	ea 0d       	add	r30, r10
    1b54:	f1 1d       	adc	r31, r1
    1b56:	80 81       	ld	r24, Z
    1b58:	80 33       	cpi	r24, 0x30	; 48
    1b5a:	11 f4       	brne	.+4      	; 0x1b60 <vfprintf+0x2ba>
    1b5c:	29 7e       	andi	r18, 0xE9	; 233
    1b5e:	09 c0       	rjmp	.+18     	; 0x1b72 <vfprintf+0x2cc>
    1b60:	22 ff       	sbrs	r18, 2
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vfprintf+0x2ca>
    1b64:	73 94       	inc	r7
    1b66:	73 94       	inc	r7
    1b68:	04 c0       	rjmp	.+8      	; 0x1b72 <vfprintf+0x2cc>
    1b6a:	82 2f       	mov	r24, r18
    1b6c:	86 78       	andi	r24, 0x86	; 134
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <vfprintf+0x2cc>
    1b70:	73 94       	inc	r7
    1b72:	23 fd       	sbrc	r18, 3
    1b74:	12 c0       	rjmp	.+36     	; 0x1b9a <vfprintf+0x2f4>
    1b76:	20 ff       	sbrs	r18, 0
    1b78:	06 c0       	rjmp	.+12     	; 0x1b86 <vfprintf+0x2e0>
    1b7a:	5a 2c       	mov	r5, r10
    1b7c:	73 14       	cp	r7, r3
    1b7e:	18 f4       	brcc	.+6      	; 0x1b86 <vfprintf+0x2e0>
    1b80:	53 0c       	add	r5, r3
    1b82:	57 18       	sub	r5, r7
    1b84:	73 2c       	mov	r7, r3
    1b86:	73 14       	cp	r7, r3
    1b88:	60 f4       	brcc	.+24     	; 0x1ba2 <vfprintf+0x2fc>
    1b8a:	b7 01       	movw	r22, r14
    1b8c:	80 e2       	ldi	r24, 0x20	; 32
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	2c 87       	std	Y+12, r18	; 0x0c
    1b92:	62 d0       	rcall	.+196    	; 0x1c58 <fputc>
    1b94:	73 94       	inc	r7
    1b96:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b98:	f6 cf       	rjmp	.-20     	; 0x1b86 <vfprintf+0x2e0>
    1b9a:	73 14       	cp	r7, r3
    1b9c:	10 f4       	brcc	.+4      	; 0x1ba2 <vfprintf+0x2fc>
    1b9e:	37 18       	sub	r3, r7
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <vfprintf+0x2fe>
    1ba2:	31 2c       	mov	r3, r1
    1ba4:	24 ff       	sbrs	r18, 4
    1ba6:	11 c0       	rjmp	.+34     	; 0x1bca <vfprintf+0x324>
    1ba8:	b7 01       	movw	r22, r14
    1baa:	80 e3       	ldi	r24, 0x30	; 48
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	2c 87       	std	Y+12, r18	; 0x0c
    1bb0:	53 d0       	rcall	.+166    	; 0x1c58 <fputc>
    1bb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb4:	22 ff       	sbrs	r18, 2
    1bb6:	16 c0       	rjmp	.+44     	; 0x1be4 <vfprintf+0x33e>
    1bb8:	21 ff       	sbrs	r18, 1
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <vfprintf+0x31c>
    1bbc:	88 e5       	ldi	r24, 0x58	; 88
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <vfprintf+0x320>
    1bc2:	88 e7       	ldi	r24, 0x78	; 120
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	b7 01       	movw	r22, r14
    1bc8:	0c c0       	rjmp	.+24     	; 0x1be2 <vfprintf+0x33c>
    1bca:	82 2f       	mov	r24, r18
    1bcc:	86 78       	andi	r24, 0x86	; 134
    1bce:	51 f0       	breq	.+20     	; 0x1be4 <vfprintf+0x33e>
    1bd0:	21 fd       	sbrc	r18, 1
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <vfprintf+0x332>
    1bd4:	80 e2       	ldi	r24, 0x20	; 32
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <vfprintf+0x334>
    1bd8:	8b e2       	ldi	r24, 0x2B	; 43
    1bda:	27 fd       	sbrc	r18, 7
    1bdc:	8d e2       	ldi	r24, 0x2D	; 45
    1bde:	b7 01       	movw	r22, r14
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	3a d0       	rcall	.+116    	; 0x1c58 <fputc>
    1be4:	a5 14       	cp	r10, r5
    1be6:	30 f4       	brcc	.+12     	; 0x1bf4 <vfprintf+0x34e>
    1be8:	b7 01       	movw	r22, r14
    1bea:	80 e3       	ldi	r24, 0x30	; 48
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	34 d0       	rcall	.+104    	; 0x1c58 <fputc>
    1bf0:	5a 94       	dec	r5
    1bf2:	f8 cf       	rjmp	.-16     	; 0x1be4 <vfprintf+0x33e>
    1bf4:	aa 94       	dec	r10
    1bf6:	f4 01       	movw	r30, r8
    1bf8:	ea 0d       	add	r30, r10
    1bfa:	f1 1d       	adc	r31, r1
    1bfc:	80 81       	ld	r24, Z
    1bfe:	b7 01       	movw	r22, r14
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	2a d0       	rcall	.+84     	; 0x1c58 <fputc>
    1c04:	a1 10       	cpse	r10, r1
    1c06:	f6 cf       	rjmp	.-20     	; 0x1bf4 <vfprintf+0x34e>
    1c08:	33 20       	and	r3, r3
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <vfprintf+0x368>
    1c0c:	5d ce       	rjmp	.-838    	; 0x18c8 <vfprintf+0x22>
    1c0e:	b7 01       	movw	r22, r14
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	21 d0       	rcall	.+66     	; 0x1c58 <fputc>
    1c16:	3a 94       	dec	r3
    1c18:	f7 cf       	rjmp	.-18     	; 0x1c08 <vfprintf+0x362>
    1c1a:	f7 01       	movw	r30, r14
    1c1c:	86 81       	ldd	r24, Z+6	; 0x06
    1c1e:	97 81       	ldd	r25, Z+7	; 0x07
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x380>
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	9f ef       	ldi	r25, 0xFF	; 255
    1c26:	2c 96       	adiw	r28, 0x0c	; 12
    1c28:	e2 e1       	ldi	r30, 0x12	; 18
    1c2a:	c2 c0       	rjmp	.+388    	; 0x1db0 <__epilogue_restores__>

00001c2c <strnlen_P>:
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	05 90       	lpm	r0, Z+
    1c30:	61 50       	subi	r22, 0x01	; 1
    1c32:	70 40       	sbci	r23, 0x00	; 0
    1c34:	01 10       	cpse	r0, r1
    1c36:	d8 f7       	brcc	.-10     	; 0x1c2e <strnlen_P+0x2>
    1c38:	80 95       	com	r24
    1c3a:	90 95       	com	r25
    1c3c:	8e 0f       	add	r24, r30
    1c3e:	9f 1f       	adc	r25, r31
    1c40:	08 95       	ret

00001c42 <strnlen>:
    1c42:	fc 01       	movw	r30, r24
    1c44:	61 50       	subi	r22, 0x01	; 1
    1c46:	70 40       	sbci	r23, 0x00	; 0
    1c48:	01 90       	ld	r0, Z+
    1c4a:	01 10       	cpse	r0, r1
    1c4c:	d8 f7       	brcc	.-10     	; 0x1c44 <strnlen+0x2>
    1c4e:	80 95       	com	r24
    1c50:	90 95       	com	r25
    1c52:	8e 0f       	add	r24, r30
    1c54:	9f 1f       	adc	r25, r31
    1c56:	08 95       	ret

00001c58 <fputc>:
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	18 2f       	mov	r17, r24
    1c62:	09 2f       	mov	r16, r25
    1c64:	eb 01       	movw	r28, r22
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	81 fd       	sbrc	r24, 1
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <fputc+0x1a>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	9f ef       	ldi	r25, 0xFF	; 255
    1c70:	20 c0       	rjmp	.+64     	; 0x1cb2 <fputc+0x5a>
    1c72:	82 ff       	sbrs	r24, 2
    1c74:	10 c0       	rjmp	.+32     	; 0x1c96 <fputc+0x3e>
    1c76:	4e 81       	ldd	r20, Y+6	; 0x06
    1c78:	5f 81       	ldd	r21, Y+7	; 0x07
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	42 17       	cp	r20, r18
    1c80:	53 07       	cpc	r21, r19
    1c82:	7c f4       	brge	.+30     	; 0x1ca2 <fputc+0x4a>
    1c84:	e8 81       	ld	r30, Y
    1c86:	f9 81       	ldd	r31, Y+1	; 0x01
    1c88:	9f 01       	movw	r18, r30
    1c8a:	2f 5f       	subi	r18, 0xFF	; 255
    1c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8e:	39 83       	std	Y+1, r19	; 0x01
    1c90:	28 83       	st	Y, r18
    1c92:	10 83       	st	Z, r17
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <fputc+0x4a>
    1c96:	e8 85       	ldd	r30, Y+8	; 0x08
    1c98:	f9 85       	ldd	r31, Y+9	; 0x09
    1c9a:	81 2f       	mov	r24, r17
    1c9c:	09 95       	icall
    1c9e:	89 2b       	or	r24, r25
    1ca0:	29 f7       	brne	.-54     	; 0x1c6c <fputc+0x14>
    1ca2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	3f 83       	std	Y+7, r19	; 0x07
    1cac:	2e 83       	std	Y+6, r18	; 0x06
    1cae:	81 2f       	mov	r24, r17
    1cb0:	90 2f       	mov	r25, r16
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <__ultoa_invert>:
    1cbc:	fa 01       	movw	r30, r20
    1cbe:	aa 27       	eor	r26, r26
    1cc0:	28 30       	cpi	r18, 0x08	; 8
    1cc2:	51 f1       	breq	.+84     	; 0x1d18 <__ultoa_invert+0x5c>
    1cc4:	20 31       	cpi	r18, 0x10	; 16
    1cc6:	81 f1       	breq	.+96     	; 0x1d28 <__ultoa_invert+0x6c>
    1cc8:	e8 94       	clt
    1cca:	6f 93       	push	r22
    1ccc:	6e 7f       	andi	r22, 0xFE	; 254
    1cce:	6e 5f       	subi	r22, 0xFE	; 254
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	af 4f       	sbci	r26, 0xFF	; 255
    1cd8:	b1 e0       	ldi	r27, 0x01	; 1
    1cda:	3e d0       	rcall	.+124    	; 0x1d58 <__ultoa_invert+0x9c>
    1cdc:	b4 e0       	ldi	r27, 0x04	; 4
    1cde:	3c d0       	rcall	.+120    	; 0x1d58 <__ultoa_invert+0x9c>
    1ce0:	67 0f       	add	r22, r23
    1ce2:	78 1f       	adc	r23, r24
    1ce4:	89 1f       	adc	r24, r25
    1ce6:	9a 1f       	adc	r25, r26
    1ce8:	a1 1d       	adc	r26, r1
    1cea:	68 0f       	add	r22, r24
    1cec:	79 1f       	adc	r23, r25
    1cee:	8a 1f       	adc	r24, r26
    1cf0:	91 1d       	adc	r25, r1
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	6a 0f       	add	r22, r26
    1cf6:	71 1d       	adc	r23, r1
    1cf8:	81 1d       	adc	r24, r1
    1cfa:	91 1d       	adc	r25, r1
    1cfc:	a1 1d       	adc	r26, r1
    1cfe:	20 d0       	rcall	.+64     	; 0x1d40 <__ultoa_invert+0x84>
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <__ultoa_invert+0x48>
    1d02:	68 94       	set
    1d04:	3f 91       	pop	r19
    1d06:	2a e0       	ldi	r18, 0x0A	; 10
    1d08:	26 9f       	mul	r18, r22
    1d0a:	11 24       	eor	r1, r1
    1d0c:	30 19       	sub	r19, r0
    1d0e:	30 5d       	subi	r19, 0xD0	; 208
    1d10:	31 93       	st	Z+, r19
    1d12:	de f6       	brtc	.-74     	; 0x1cca <__ultoa_invert+0xe>
    1d14:	cf 01       	movw	r24, r30
    1d16:	08 95       	ret
    1d18:	46 2f       	mov	r20, r22
    1d1a:	47 70       	andi	r20, 0x07	; 7
    1d1c:	40 5d       	subi	r20, 0xD0	; 208
    1d1e:	41 93       	st	Z+, r20
    1d20:	b3 e0       	ldi	r27, 0x03	; 3
    1d22:	0f d0       	rcall	.+30     	; 0x1d42 <__ultoa_invert+0x86>
    1d24:	c9 f7       	brne	.-14     	; 0x1d18 <__ultoa_invert+0x5c>
    1d26:	f6 cf       	rjmp	.-20     	; 0x1d14 <__ultoa_invert+0x58>
    1d28:	46 2f       	mov	r20, r22
    1d2a:	4f 70       	andi	r20, 0x0F	; 15
    1d2c:	40 5d       	subi	r20, 0xD0	; 208
    1d2e:	4a 33       	cpi	r20, 0x3A	; 58
    1d30:	18 f0       	brcs	.+6      	; 0x1d38 <__ultoa_invert+0x7c>
    1d32:	49 5d       	subi	r20, 0xD9	; 217
    1d34:	31 fd       	sbrc	r19, 1
    1d36:	40 52       	subi	r20, 0x20	; 32
    1d38:	41 93       	st	Z+, r20
    1d3a:	02 d0       	rcall	.+4      	; 0x1d40 <__ultoa_invert+0x84>
    1d3c:	a9 f7       	brne	.-22     	; 0x1d28 <__ultoa_invert+0x6c>
    1d3e:	ea cf       	rjmp	.-44     	; 0x1d14 <__ultoa_invert+0x58>
    1d40:	b4 e0       	ldi	r27, 0x04	; 4
    1d42:	a6 95       	lsr	r26
    1d44:	97 95       	ror	r25
    1d46:	87 95       	ror	r24
    1d48:	77 95       	ror	r23
    1d4a:	67 95       	ror	r22
    1d4c:	ba 95       	dec	r27
    1d4e:	c9 f7       	brne	.-14     	; 0x1d42 <__ultoa_invert+0x86>
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 05       	cpc	r22, r1
    1d54:	71 05       	cpc	r23, r1
    1d56:	08 95       	ret
    1d58:	9b 01       	movw	r18, r22
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	0a 2e       	mov	r0, r26
    1d5e:	06 94       	lsr	r0
    1d60:	57 95       	ror	r21
    1d62:	47 95       	ror	r20
    1d64:	37 95       	ror	r19
    1d66:	27 95       	ror	r18
    1d68:	ba 95       	dec	r27
    1d6a:	c9 f7       	brne	.-14     	; 0x1d5e <__ultoa_invert+0xa2>
    1d6c:	62 0f       	add	r22, r18
    1d6e:	73 1f       	adc	r23, r19
    1d70:	84 1f       	adc	r24, r20
    1d72:	95 1f       	adc	r25, r21
    1d74:	a0 1d       	adc	r26, r0
    1d76:	08 95       	ret

00001d78 <__prologue_saves__>:
    1d78:	2f 92       	push	r2
    1d7a:	3f 92       	push	r3
    1d7c:	4f 92       	push	r4
    1d7e:	5f 92       	push	r5
    1d80:	6f 92       	push	r6
    1d82:	7f 92       	push	r7
    1d84:	8f 92       	push	r8
    1d86:	9f 92       	push	r9
    1d88:	af 92       	push	r10
    1d8a:	bf 92       	push	r11
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	ca 1b       	sub	r28, r26
    1da2:	db 0b       	sbc	r29, r27
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	09 94       	ijmp

00001db0 <__epilogue_restores__>:
    1db0:	2a 88       	ldd	r2, Y+18	; 0x12
    1db2:	39 88       	ldd	r3, Y+17	; 0x11
    1db4:	48 88       	ldd	r4, Y+16	; 0x10
    1db6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1db8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dba:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1dc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dc2:	b9 84       	ldd	r11, Y+9	; 0x09
    1dc4:	c8 84       	ldd	r12, Y+8	; 0x08
    1dc6:	df 80       	ldd	r13, Y+7	; 0x07
    1dc8:	ee 80       	ldd	r14, Y+6	; 0x06
    1dca:	fd 80       	ldd	r15, Y+5	; 0x05
    1dcc:	0c 81       	ldd	r16, Y+4	; 0x04
    1dce:	1b 81       	ldd	r17, Y+3	; 0x03
    1dd0:	aa 81       	ldd	r26, Y+2	; 0x02
    1dd2:	b9 81       	ldd	r27, Y+1	; 0x01
    1dd4:	ce 0f       	add	r28, r30
    1dd6:	d1 1d       	adc	r29, r1
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	ed 01       	movw	r28, r26
    1de4:	08 95       	ret

00001de6 <_exit>:
    1de6:	f8 94       	cli

00001de8 <__stop_program>:
    1de8:	ff cf       	rjmp	.-2      	; 0x1de8 <__stop_program>
